# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2024 Rother OSS GmbH, https://otobo.de/
# This file is distributed under the same license as the OTOBO Developer Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: OTOBO Developer Manual 11.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-05 00:39+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../content/additional-resources.rst:12
msgid "Additional Resources"
msgstr ""

#: ../../content/additional-resources.rst:14
msgid "otobo.de"
msgstr ""

#: ../../content/additional-resources.rst:15
msgid "The OTOBO website with source code, documentation and news is available at `www.otobo.de <https://www.otobo.de/>`__. Here you can also find information about professional services and OTOBO administrator training seminars from Rother OSS GmbH, the creator of OTOBO."
msgstr ""

#: ../../content/contributing.rst:12
msgid "Contributing to OTOBO"
msgstr ""

#: ../../content/contributing.rst:14
msgid "This chapter will show how you can contribute to the OTOBO framework, so that other users will be able to benefit from your work."
msgstr ""

#: ../../content/contributing.rst:16
#: ../../content/documentation.rst:18
#: ../../content/get-started.rst:18
#: ../../content/how-it-works.rst:14
#: ../../content/how-to-extend-otobo.rst:14
#: ../../content/how-to-publish-otobo-extensions.rst:14
#: ../../content/index.rst:45
msgid "Contents"
msgstr ""

#: ../../content/contributing/accessibility.rst:12
msgid "Accessibility Guide"
msgstr ""

#: ../../content/contributing/accessibility.rst:14
msgid "This document is supposed to explain basics about accessibility issues and give guidelines for contributions to OTOBO."
msgstr ""

#: ../../content/contributing/accessibility.rst:17
msgid "Accessibility Basics"
msgstr ""

#: ../../content/contributing/accessibility.rst:20
msgid "What is Accessibility?"
msgstr ""

#: ../../content/contributing/accessibility.rst:22
msgid "Accessibility is a general term used to describe the degree to which a product, device, service or environment is accessible by as many people as possible. Accessibility can be viewed as the *ability to access* any possible benefit of some system or entity. Accessibility is often used to focus on people with disabilities and their right of access to entities, often through use of assistive technology."
msgstr ""

#: ../../content/contributing/accessibility.rst:24
msgid "In the context of web development, accessibility has a focus on providing people with impairments full access to web interfaces. For example, this group of people can include partially visually impaired or completely blind people. While the former can still partially use the GUI, the latter have to completely rely on assistive technologies such as software which reads the screen to them (screen readers)."
msgstr ""

#: ../../content/contributing/accessibility.rst:28
msgid "Why is it important for OTOBO?"
msgstr ""

#: ../../content/contributing/accessibility.rst:30
msgid "To enable impaired users to access OTOBO systems is a valid goal in itself. It shows respect."
msgstr ""

#: ../../content/contributing/accessibility.rst:32
msgid "Furthermore, fulfilling accessibility standards is becoming increasingly important in the public sector (government institutions) and large companies, which both belong to the target markets of OTOBO."
msgstr ""

#: ../../content/contributing/accessibility.rst:36
msgid "How can I successfully work on accessibility issues even if I am not disabled?"
msgstr ""

#: ../../content/contributing/accessibility.rst:38
msgid "This is very simple. Pretend to be blind."
msgstr ""

#: ../../content/contributing/accessibility.rst:40
msgid "Don't use the mouse."
msgstr ""

#: ../../content/contributing/accessibility.rst:41
msgid "Don't look at the screen."
msgstr ""

#: ../../content/contributing/accessibility.rst:43
msgid "Then try to use OTOBO with the help of a screen reader and your keyboard only. This should give you an idea of how it will feel for a blind person."
msgstr ""

#: ../../content/contributing/accessibility.rst:47
msgid "Ok, but I don't have a screen reader!"
msgstr ""

#: ../../content/contributing/accessibility.rst:49
msgid "While commercial screen readers such as JAWS (perhaps the best known one) can be extremely expensive, there are open source screen readers which you can install and use:"
msgstr ""

#: ../../content/contributing/accessibility.rst:51
msgid "`NVDA <http://www.nvaccess.org/>`__, a screen reader for Windows."
msgstr ""

#: ../../content/contributing/accessibility.rst:52
msgid "`ORCA <https://wiki.gnome.org/Projects/Orca>`__, a screen reader for Gnome/Linux."
msgstr ""

#: ../../content/contributing/accessibility.rst:54
msgid "Now you don't have an excuse any more. ;)"
msgstr ""

#: ../../content/contributing/accessibility.rst:58
msgid "Accessibility Standards"
msgstr ""

#: ../../content/contributing/accessibility.rst:60
msgid "This section is included for reference only, you do not have to study the standards themselves to be able to work on accessibility issues in OTOBO. We'll try to extract the relevant guidelines in this document."
msgstr ""

#: ../../content/contributing/accessibility.rst:64
msgid "Web Content Accessibility Guidelines (WCAG)"
msgstr ""

#: ../../content/contributing/accessibility.rst:66
msgid "This W3C standard gives general guidelines for how to create accessible web pages."
msgstr ""

#: ../../content/contributing/accessibility.rst:68
msgid "`WCAG 2.0 <http://www.w3.org/TR/WCAG20/>`__"
msgstr ""

#: ../../content/contributing/accessibility.rst:69
msgid "`How to Meet WCAG 2.0 <http://www.w3.org/WAI/WCAG20/quickref/>`__"
msgstr ""

#: ../../content/contributing/accessibility.rst:70
msgid "`Understanding WCAG 2.0 <http://www.w3.org/TR/UNDERSTANDING-WCAG20/>`__"
msgstr ""

#: ../../content/contributing/accessibility.rst:72
msgid "WCAG has different levels of accessibility support. We currently plan to support level A, as AA and AAA deal with matters that seem to be not relevant for OTOBO."
msgstr ""

#: ../../content/contributing/accessibility.rst:76
msgid "Accessible Rich Internet Applications (WAI-ARIA) 1.0"
msgstr ""

#: ../../content/contributing/accessibility.rst:78
msgid "This standard deals with the special issues arising from the shift away from static content to dynamic web applications. It deals with questions like how a user can be notified of changes in the user interface resulting from AJAX requests, for example."
msgstr ""

#: ../../content/contributing/accessibility.rst:80
msgid "`WAI-ARIA 1.0 <http://www.w3.org/TR/wai-aria/>`__"
msgstr ""

#: ../../content/contributing/accessibility.rst:84
msgid "Implementation guidelines"
msgstr ""

#: ../../content/contributing/accessibility.rst:87
msgid "Provide alternatives for non-text content"
msgstr ""

#: ../../content/contributing/accessibility.rst:89
msgid "Goal: *All non-text content that is presented to the user has a text alternative that serves the equivalent purpose.* (WCAG 1.1.1)"
msgstr ""

#: ../../content/contributing/accessibility.rst:91
msgid "It is very important to understand that screen readers can only present textual information and available metadata to the user. To give you an example, whenever a screen reader sees ``<a href=\"#\" class=\"CloseLink\"></a>``, it can only read *link* to the user, but not the target of this link. With a slight improvement, it would be accessible: ``<a href=\"#\" class=\"CloseLink\" title=\"Close this widget\"></a>``. In this case the user would hear *link close this widget*, voila!"
msgstr ""

#: ../../content/contributing/accessibility.rst:93
msgid "It is important to always formulate the text in a most *speaking* way. Just imagine it is the only information that you have. Will it help you? Can you understand its purpose just by hearing it?"
msgstr ""

#: ../../content/contributing/accessibility.rst:95
msgid "Please follow these rules when working on OTOBO:"
msgstr ""

#: ../../content/contributing/accessibility.rst:97
msgid "*Rule*: Wherever possible, use speaking texts and formulate in real, understandable and precise sentences. *Close this widget* is much better than *Close*, because the latter is redundant."
msgstr ""

#: ../../content/contributing/accessibility.rst:98
msgid "*Rule*: Links always must have either text content that is spoken by the screen reader (``<a href=\"#\" >Delete this entry</a>``), or a ``title`` attribute (``<a href=\"#\" title=\"Close this widget\"></a>``)."
msgstr ""

#: ../../content/contributing/accessibility.rst:99
msgid "*Rule*: Images must always have an alternative text that can be read to the user (``<img src=\"house.png\" alt=\"Image of a house\" />``)."
msgstr ""

#: ../../content/contributing/accessibility.rst:103
msgid "Make navigation easy"
msgstr ""

#: ../../content/contributing/accessibility.rst:105
msgid "Goal: *Allow the user to easily navigate the current page and the entire application.*"
msgstr ""

#: ../../content/contributing/accessibility.rst:107
msgid "The ``title`` tag is the first thing a user hears from the screen reader when opening a web page. For OTOBO, there is also always just one ``h1`` element on the page, indicating the current page (it contains part of the information from ``title``). This navigational information helps the user to understand where they are, and what the purpose of the current page is."
msgstr ""

#: ../../content/contributing/accessibility.rst:109
msgid "*Rule*: Always give a precise title to the page that allows the user to understand where they currently are."
msgstr ""

#: ../../content/contributing/accessibility.rst:111
msgid "Screen readers can use the built-in document structure of HTML (headings ``h1`` to ``h6``) to determine the structure of a document and to allow the user to jump around from section to section. However, this is not enough to reflect the structure of a dynamic web application. That's why ARIA defines several *landmark* roles that can be given to elements to indicate their navigational significance."
msgstr ""

#: ../../content/contributing/accessibility.rst:113
msgid "To keep the validity of the HTML documents, the ``role`` attributes (ARIA landmark roles) are not inserted into the source code directly, but instead by classes which will later be used by the JavaScript functions in ``OTOBO.UI.Accessibility`` to set the corresponding ``role`` attributes on the node."
msgstr ""

#: ../../content/contributing/accessibility.rst:115
msgid "*Rule*: Use WAI-ARIA Landmark Roles to structure the content for screen readers."
msgstr ""

#: ../../content/contributing/accessibility.rst:117
msgid "Banner: ``<div class=\"ARIARoleBanner\"></div>`` will become ``<div class=\"ARIARoleBanner\" role=\"banner\"></div>``"
msgstr ""

#: ../../content/contributing/accessibility.rst:118
msgid "Navigation: ``<div class=\"ARIARoleNavigation\"></div>`` will become ``<div class=\"ARIARoleNavigation\" role=\"navigation\"></div>``"
msgstr ""

#: ../../content/contributing/accessibility.rst:119
msgid "Search function: ``<div class=\"ARIARoleSearch\"></div>`` will become ``<div class=\"ARIARoleSearch\" role=\"search\"></div>``"
msgstr ""

#: ../../content/contributing/accessibility.rst:120
msgid "Main application area: ``<div class=\"ARIARoleMain\"></div>`` will become ``<div class=\"ARIARoleMain\" role=\"main\"></div>``"
msgstr ""

#: ../../content/contributing/accessibility.rst:121
msgid "Footer: ``<div class=\"ARIARoleContentinfo\"></div>`` will become ``<div class=\"ARIARoleContentinfo\" role=\"contentinfo\"></div>``"
msgstr ""

#: ../../content/contributing/accessibility.rst:123
msgid "For navigation inside of ``<form>`` elements, it is necessary for the impaired user to know what each input elements purpose is. This can be achieved by using standard HTML ``<label>`` elements which create a link between the label and the form element."
msgstr ""

#: ../../content/contributing/accessibility.rst:125
msgid "When an input element gets focus, the screen reader will usually read the connected label, so that the user can hear its exact purpose. An additional benefit for seeing users is that they can click on the label, and the input element will get focus (especially helpful for checkboxes, for example)."
msgstr ""

#: ../../content/contributing/accessibility.rst:127
msgid "*Rule*: Provide ``<label>`` elements for *all* form element (``input``, ``select``, ``textarea``) fields."
msgstr ""

#: ../../content/contributing/accessibility.rst:129
msgid "Example: ``<label for=\"date\">Date:</label><input type=\"text\" name=\"date\" id=\"date\"/>``"
msgstr ""

#: ../../content/contributing/accessibility.rst:133
msgid "Make interaction possible"
msgstr ""

#: ../../content/contributing/accessibility.rst:135
msgid "Goal: *Allow the user to perform all interactions just by using the keyboard.*"
msgstr ""

#: ../../content/contributing/accessibility.rst:137
msgid "While it is technically possible to create interactions with JavaScript on arbitrary HTML elements, this must be limited to elements that a user can interact with by using the keyboard. Specifically, they need to be able to give focus to the element and to interact with it. For example, a push button to toggle a widget should not be realized by using a ``span`` element with an attached JavaScript ``onclick`` event listener, but it should be (or contain) an ``a`` tag to make it clear to the screen reader that this element can cause interaction."
msgstr ""

#: ../../content/contributing/accessibility.rst:139
msgid "*Rule*: For interactions, always use elements that can receive focus, such as ``a``, ``input``, ``select`` and ``button``."
msgstr ""

#: ../../content/contributing/accessibility.rst:140
msgid "*Rule*: Make sure that the user can always identify the nature of the interaction (see rules about non-textual content and labelling of form elements)."
msgstr ""

#: ../../content/contributing/accessibility.rst:142
msgid "Goal: *Make dynamic changes known to the user.*"
msgstr ""

#: ../../content/contributing/accessibility.rst:144
msgid "A special area of accessibility problems are dynamic changes in the user interface, either by JavaScript or also by AJAX calls. The screen reader will not tell the user about changes without special precautions. This is a difficult topic and cannot yet be completely explained here."
msgstr ""

#: ../../content/contributing/accessibility.rst:146
msgid "*Rule*: Always use the validation framework ``OTOBO.Validate`` for form validation."
msgstr ""

#: ../../content/contributing/accessibility.rst:148
msgid "This will make sure that the error tooltips are being read by the screen reader. That way the blind user a) knows the item which has an error and b) get a text describing the error."
msgstr ""

#: ../../content/contributing/accessibility.rst:150
msgid "*Rule*: Use the function ``OTOBO.UI.Accessibility.AudibleAlert()`` to notify the user about other important UI changes."
msgstr ""

#: ../../content/contributing/accessibility.rst:152
msgid "*Rule*: Use the ``OTOBO.UI.Dialog`` framework to create modal dialogs. These are already optimized for accessibility."
msgstr ""

#: ../../content/contributing/accessibility.rst:156
msgid "General screen reader optimizations"
msgstr ""

#: ../../content/contributing/accessibility.rst:158
msgid "Goal: *Help screen readers with their work.*"
msgstr ""

#: ../../content/contributing/accessibility.rst:160
msgid "*Rule*: Each page must identify its own main language so that the screen reader can choose the right speech synthesis engine."
msgstr ""

#: ../../content/contributing/accessibility.rst:162
msgid "Example: ``<html lang=\"fr\">...</html>``"
msgstr ""

#: ../../content/contributing/code-style.rst:12
msgid "Code Style Guide"
msgstr ""

#: ../../content/contributing/code-style.rst:14
msgid "In order to preserve the consistent development of the OTOBO project, we have set up guidelines regarding style for the different programming languages."
msgstr ""

#: ../../content/contributing/code-style.rst:19
msgid "Perl"
msgstr ""

#: ../../content/contributing/code-style.rst:22
msgid "Whitespace"
msgstr ""

#: ../../content/contributing/code-style.rst:24
msgid "TAB: We use 4 spaces. Examples for braces:"
msgstr ""

#: ../../content/contributing/code-style.rst:41
msgid "Length of Lines"
msgstr ""

#: ../../content/contributing/code-style.rst:43
msgid "Lines should generally not be longer than 120 characters, unless it is necessary for special reasons."
msgstr ""

#: ../../content/contributing/code-style.rst:47
msgid "Spaces and Parentheses"
msgstr ""

#: ../../content/contributing/code-style.rst:49
msgid "To gain more readability, we use spaces between keywords and opening parenthesis."
msgstr ""

#: ../../content/contributing/code-style.rst:56
msgid "If there is just one single variable, the parenthesis enclose the variable with no spaces inside."
msgstr ""

#: ../../content/contributing/code-style.rst:66
msgid "If the condition is not just one single variable, we use spaces between the parenthesis and the condition. And there is still the space between the keyword (e.g. ``if``) and the opening parenthesis."
msgstr ""

#: ../../content/contributing/code-style.rst:72
msgid "Note that for Perl builtin functions, we do not use parentheses:"
msgstr ""

#: ../../content/contributing/code-style.rst:80
msgid "Source Code Header and Charset"
msgstr ""

#: ../../content/contributing/code-style.rst:82
msgid "Attach the following header to every source file. Source files are saved in UTF-8 charset."
msgstr ""

#: ../../content/contributing/code-style.rst:94
msgid "Executable files (``*.pl``) have a special header."
msgstr ""

#: ../../content/contributing/code-style.rst:118
msgid "Conditions"
msgstr ""

#: ../../content/contributing/code-style.rst:120
msgid "Conditions can be quite complex and there can be *chained* conditions (linked with logical *or* or *and* operations). When coding for OTOBO, you have to be aware of several situations."
msgstr ""

#: ../../content/contributing/code-style.rst:122
msgid "Perl best practices says, that high precedence operators (``&&`` and ``||``) shouldn't mixed up with low precedence operators (``and`` and ``or``). To avoid confusion, we always use the high precedence operators."
msgstr ""

#: ../../content/contributing/code-style.rst:132
msgid "This means that you have to be aware of traps. Sometimes you need to use parenthesis to make clear what you want."
msgstr ""

#: ../../content/contributing/code-style.rst:134
msgid "If you have long conditions (line is longer than 120 characters over all), you have to break it in several lines. And the start of the conditions is in a new line (not in the line of the ``if``)."
msgstr ""

#: ../../content/contributing/code-style.rst:151
msgid "Also note, that the right parenthesis is in a line on its own and the left curly bracket is also in a new line and with the same indentation as the ``if``. The operators are at the beginning of a new line! The subsequent examples show how to do it."
msgstr ""

#: ../../content/contributing/code-style.rst:185
msgid "Postfix ``if``"
msgstr ""

#: ../../content/contributing/code-style.rst:187
msgid "Generally we use *postfix ``if``* statements to reduce the number of levels. But we don't use it for multiline statements and is only allowed when involves return statements in functions or to end a loop or to go next iteration."
msgstr ""

#: ../../content/contributing/code-style.rst:189
#: ../../content/contributing/code-style.rst:213
#: ../../content/contributing/code-style.rst:499
msgid "This is correct:"
msgstr ""

#: ../../content/contributing/code-style.rst:195
#: ../../content/contributing/code-style.rst:222
#: ../../content/contributing/code-style.rst:511
msgid "This is wrong:"
msgstr ""

#: ../../content/contributing/code-style.rst:204
msgid "This is less maintainable than this:"
msgstr ""

#: ../../content/contributing/code-style.rst:230
msgid "Restrictions for the Use of Some Perl Builtins"
msgstr ""

#: ../../content/contributing/code-style.rst:232
msgid "Some builtin subroutines of Perl may not be used in every place:"
msgstr ""

#: ../../content/contributing/code-style.rst:234
msgid "Don't use ``die`` and ``exit`` in ``.pm`` files."
msgstr ""

#: ../../content/contributing/code-style.rst:235
msgid "Don't use the ``Dumper`` function in released files."
msgstr ""

#: ../../content/contributing/code-style.rst:236
msgid "Don't use ``print`` in ``.pm`` files."
msgstr ""

#: ../../content/contributing/code-style.rst:237
msgid "Don't use ``require``, use ``Main::Require()`` instead."
msgstr ""

#: ../../content/contributing/code-style.rst:238
msgid "Use the functions of the ``DateTimeObject`` instead of the builtin functions like ``time()``, ``localtime()``, etc."
msgstr ""

#: ../../content/contributing/code-style.rst:242
msgid "Regular Expressions"
msgstr ""

#: ../../content/contributing/code-style.rst:244
msgid "For regular expressions *in the source code*, we always use the ``m//`` operator with curly braces as delimiters. We also use the modifiers ``x``, ``m`` and ``s`` by default. The ``x`` modifier allows you to comment your regex and use spaces to visually separate logical groups."
msgstr ""

#: ../../content/contributing/code-style.rst:257
msgid "As the space no longer has a special meaning, you have to use a single character class to match a single space (``[ ]``). If you want to match any whitespace you can use ``\\s``."
msgstr ""

#: ../../content/contributing/code-style.rst:259
msgid "In the regex, the dot (``.``) includes the newline (whereas in regex without ``s`` modifier the dot means 'everything but newline'). If you want to match anything but newline, you have to use the negated single character class (``[^\\n]``)."
msgstr ""

#: ../../content/contributing/code-style.rst:269
msgid "An exception to the convention above applies to all cases where regular expressions are not written statically in the code but instead are *supplied by users* in one form or another (for example via system configuration or in a Postmaster filter configuration). Any evaluation of such a regular expression has to be done without any modifiers (e.g. ``$Variable =~ m{$Regex}``) in order to match the expectation of (mostly inexperienced) users and also to be backwards compatible."
msgstr ""

#: ../../content/contributing/code-style.rst:271
msgid "If modifiers are strictly necessary for user supplied regular expressions, it is always possible to use embedded modifiers (e.g. ``(?:(?i)SmAlL oR lArGe)``). For details, please see `perlretut <http://perldoc.perl.org/perlretut.html#Embedding-comments-and-modifiers-in-a-regular-expression>`__."
msgstr ""

#: ../../content/contributing/code-style.rst:273
msgid "Usage of the ``r`` modifier is encouraged, e.g. if you need to extract part of a string into another variable. This modifier keeps the matched variable intact and instead provides the substitution result as a return value."
msgstr ""

#: ../../content/contributing/code-style.rst:275
#: ../../content/contributing/code-style.rst:322
#: ../../content/contributing/code-style.rst:441
msgid "Use this:"
msgstr ""

#: ../../content/contributing/code-style.rst:288
#: ../../content/contributing/code-style.rst:342
#: ../../content/contributing/code-style.rst:450
msgid "Instead of this:"
msgstr ""

#: ../../content/contributing/code-style.rst:302
msgid "If you want to match for start and end of a **string**, you should generally use ``\\A`` and ``\\z`` instead of the more generic ``^`` and ``$`` unless you really need to match start or end of **lines** within a multiline string."
msgstr ""

#: ../../content/contributing/code-style.rst:320
msgid "Usage of named capture groups is also encouraged, particularly for multi-matches. Named capture groups are easier to read/understand, prevent mix-ups when matching more than one capture group and allow extension without accidentally introducing bugs."
msgstr ""

#: ../../content/contributing/code-style.rst:364
msgid "Naming"
msgstr ""

#: ../../content/contributing/code-style.rst:366
msgid "Names and comments are written in English. Variables, objects and methods must be descriptive nouns or noun phrases with the first letter set upper case (`CamelCase <https://en.wikipedia.org/wiki/CamelCase>`__)."
msgstr ""

#: ../../content/contributing/code-style.rst:368
msgid "Names should be as descriptive as possible. A reader should be able to say what is meant by a name without digging too deep into the code. E.g. use ``$ConfigItemID`` instead of ``$ID``. Examples: ``@TicketIDs``, ``$Output``, ``StateSet()``, etc."
msgstr ""

#: ../../content/contributing/code-style.rst:372
msgid "Variable Declaration"
msgstr ""

#: ../../content/contributing/code-style.rst:374
msgid "If you have several variables, you can declare them in one line if they *belong together*:"
msgstr ""

#: ../../content/contributing/code-style.rst:380
msgid "Otherwise break it into separate lines:"
msgstr ""

#: ../../content/contributing/code-style.rst:387
msgid "Do not set to ``undef`` or ``''`` in the declaration as this might hide mistakes in code."
msgstr ""

#: ../../content/contributing/code-style.rst:397
msgid "You can set a variable to ``''`` if you want to concatenate strings:"
msgstr ""

#: ../../content/contributing/code-style.rst:406
msgid "Otherwise you would get an *uninitialized* warning."
msgstr ""

#: ../../content/contributing/code-style.rst:410
msgid "Handling of Parameters"
msgstr ""

#: ../../content/contributing/code-style.rst:412
msgid "To fetch the parameters passed to subroutines, OTOBO normally uses the hash ``%Param`` (not ``%Params``). This leads to more readable code as every time we use ``%Param`` in the subroutine code we know it is the parameter hash passed to the subroutine."
msgstr ""

#: ../../content/contributing/code-style.rst:414
msgid "Just in some exceptions a regular list of parameters should be used. So we want to avoid something like this:"
msgstr ""

#: ../../content/contributing/code-style.rst:422
msgid "We want to use this instead:"
msgstr ""

#: ../../content/contributing/code-style.rst:430
msgid "This has several advantages:"
msgstr ""

#: ../../content/contributing/code-style.rst:432
msgid "We do not have to change the code in the subroutine when a new parameter should be passed."
msgstr ""

#: ../../content/contributing/code-style.rst:433
msgid "Calling a function with named parameters is much more readable."
msgstr ""

#: ../../content/contributing/code-style.rst:437
msgid "Multiple Named Parameters"
msgstr ""

#: ../../content/contributing/code-style.rst:439
msgid "If a function call requires more than one named parameter, split them into multiple lines."
msgstr ""

#: ../../content/contributing/code-style.rst:458
msgid "``return`` Statements"
msgstr ""

#: ../../content/contributing/code-style.rst:460
msgid "Subroutines have to have a ``return`` statement. The explicit ``return`` statement is preferred over the implicit way (result of last statement in subroutine) as this clarifies what the subroutine returns."
msgstr ""

#: ../../content/contributing/code-style.rst:471
msgid "Explicit Return Values"
msgstr ""

#: ../../content/contributing/code-style.rst:473
msgid "Explicit return values means that you should not have a ``return`` statement followed by a subroutine call."
msgstr ""

#: ../../content/contributing/code-style.rst:479
msgid "The following example is better as this says explicitly what is returned. With the example above the reader doesn't know what the return value is as he might not know what ``Do()`` returns."
msgstr ""

#: ../../content/contributing/code-style.rst:486
msgid "If you assign the result of a subroutine to a variable, a *good* variable name indicates what was returned:"
msgstr ""

#: ../../content/contributing/code-style.rst:495
msgid "``use`` Statements"
msgstr ""

#: ../../content/contributing/code-style.rst:497
msgid "``use strict`` and ``use warnings`` have to be the first two *uses* in a module."
msgstr ""

#: ../../content/contributing/code-style.rst:525
msgid "Objects and Their Allocation"
msgstr ""

#: ../../content/contributing/code-style.rst:527
msgid "In OTOBO many objects are available. But you should not use every object in every file to keep the front end/back end separation."
msgstr ""

#: ../../content/contributing/code-style.rst:529
msgid "Don't use the ``LayoutObject`` in core modules (``Kernel/System``)."
msgstr ""

#: ../../content/contributing/code-style.rst:530
msgid "Don't use the ``ParamObject`` in core modules (``Kernel/System``)."
msgstr ""

#: ../../content/contributing/code-style.rst:531
msgid "Don't use the ``DBObject`` in front end modules (``Kernel/Modules``)."
msgstr ""

#: ../../content/contributing/code-style.rst:535
msgid "Documenting Back End Modules"
msgstr ""

#: ../../content/contributing/code-style.rst:544
msgid "``NAME`` section"
msgstr ""

#: ../../content/contributing/code-style.rst:538
msgid "This section should include the module name, `` - `` as separator and a brief description of the module purpose."
msgstr ""

#: ../../content/contributing/code-style.rst:568
msgid "``SYNOPSIS`` section"
msgstr ""

#: ../../content/contributing/code-style.rst:547
msgid "This section should give a short usage example of commonly used module functions."
msgstr ""

#: ../../content/contributing/code-style.rst:549
#: ../../content/contributing/code-style.rst:573
msgid "Usage of this section is optional."
msgstr ""

#: ../../content/contributing/code-style.rst:584
msgid "``DESCRIPTION`` section"
msgstr ""

#: ../../content/contributing/code-style.rst:571
msgid "This section should give more in-depth information about the module if deemed necessary (instead of having a long ``NAME`` section)."
msgstr ""

#: ../../content/contributing/code-style.rst:591
msgid "``PUBLIC INTERFACE`` section"
msgstr ""

#: ../../content/contributing/code-style.rst:587
msgid "This section marks the begin of all functions that are part of the API and therefore meant to be used by other modules."
msgstr ""

#: ../../content/contributing/code-style.rst:603
msgid "``PRIVATE FUNCTIONS`` section"
msgstr ""

#: ../../content/contributing/code-style.rst:594
msgid "This section marks the begin of private functions."
msgstr ""

#: ../../content/contributing/code-style.rst:596
msgid "Functions below are not part of the API, to be used only within the module and therefore not considered stable."
msgstr ""

#: ../../content/contributing/code-style.rst:598
msgid "It is advisable to use this section whenever one or more private functions exist."
msgstr ""

#: ../../content/contributing/code-style.rst:606
msgid "Documenting Subroutines"
msgstr ""

#: ../../content/contributing/code-style.rst:608
msgid "Subroutines should always be documented. The documentation contains a general description about what the subroutine does, a sample subroutine call and what the subroutine returns. It should be in this order. A sample documentation looks like this:"
msgstr ""

#: ../../content/contributing/code-style.rst:631
msgid "You can copy and paste a ``Data::Dumper`` output for the return values."
msgstr ""

#: ../../content/contributing/code-style.rst:635
msgid "Code Comments in Perl"
msgstr ""

#: ../../content/contributing/code-style.rst:637
msgid "In general, you should try to write your code as readable and self-explaining as possible. Don't write a comment to explain what obvious code does, this is unnecessary duplication. Good comments should explain **why** there is some code, possible side effects and anything that might be special or unusually complicated about the code."
msgstr ""

#: ../../content/contributing/code-style.rst:639
msgid "Please adhere to the following guidelines:"
msgstr ""

#: ../../content/contributing/code-style.rst:642
msgid "Make the code so readable that comments are not needed, if possible."
msgstr ""

#: ../../content/contributing/code-style.rst:642
msgid "It's always preferable to write code so that it is very readable and self-explaining, for example with precise variable and function names."
msgstr ""

#: ../../content/contributing/code-style.rst:652
msgid "Don't say what the code says (DRY -> Don't repeat yourself)."
msgstr ""

#: ../../content/contributing/code-style.rst:645
msgid "Don't repeat (obvious) code in the comments."
msgstr ""

#: ../../content/contributing/code-style.rst:655
msgid "Document **why** the code is there, not how it works."
msgstr ""

#: ../../content/contributing/code-style.rst:655
msgid "Usually, code comments should explain the *purpose* of code, not how it works in detail. There might be exceptions for specially complicated code, but in this case also a refactoring to make it more readable could be commendable."
msgstr ""

#: ../../content/contributing/code-style.rst:658
msgid "Document pitfalls."
msgstr ""

#: ../../content/contributing/code-style.rst:658
msgid "Everything that is unclear, tricky or that puzzled you during development should be documented."
msgstr ""

#: ../../content/contributing/code-style.rst:675
msgid "Use full-line sentence-style comments to document algorithm paragraphs."
msgstr ""

#: ../../content/contributing/code-style.rst:661
msgid "Always use full sentences (uppercase first letter and final period). Subsequent lines of a sentence should be indented."
msgstr ""

#: ../../content/contributing/code-style.rst:687
msgid "Use short end-of-line comments to add detail information."
msgstr ""

#: ../../content/contributing/code-style.rst:678
msgid "These can either be a complete sentence (capital first letter and period) or just a phrase (lowercase first letter and no period)."
msgstr ""

#: ../../content/contributing/code-style.rst:690
msgid "Declaration of SQL Statements"
msgstr ""

#: ../../content/contributing/code-style.rst:692
msgid "If there is no chance for changing the SQL statement, it should be used in the ``Prepare`` function. The reason for this is, that the SQL statement and the bind parameters are closer to each other."
msgstr ""

#: ../../content/contributing/code-style.rst:694
msgid "The SQL statement should be written as one nicely indented string without concatenation like this:"
msgstr ""

#: ../../content/contributing/code-style.rst:709
msgid "This is easy to read and modify, and the whitespace can be handled well by our supported DBMSs. For auto-generated SQL code (like in ``TicketSearch``), this indentation is not necessary."
msgstr ""

#: ../../content/contributing/code-style.rst:713
msgid "Returning on Errors"
msgstr ""

#: ../../content/contributing/code-style.rst:715
msgid "Whenever you use database functions you should handle errors. If anything goes wrong, return from subroutine:"
msgstr ""

#: ../../content/contributing/code-style.rst:723
msgid "Using Limit"
msgstr ""

#: ../../content/contributing/code-style.rst:725
msgid "Use ``Limit => 1`` if you expect just one row to be returned."
msgstr ""

#: ../../content/contributing/code-style.rst:737
msgid "Using the ``while`` loop"
msgstr ""

#: ../../content/contributing/code-style.rst:739
msgid "Always use the ``while`` loop, even when you expect one row to be returned, as some databases do not release the statement handle and this can lead to weird bugs."
msgstr ""

#: ../../content/contributing/code-style.rst:743
msgid "JavaScript"
msgstr ""

#: ../../content/contributing/code-style.rst:745
msgid "All JavaScript is loaded in all browsers (no browser hacks in the template files). The code is responsible to decide if it has to skip or execute certain parts of itself only in certain browsers."
msgstr ""

#: ../../content/contributing/code-style.rst:749
msgid "Directory Structure"
msgstr ""

#: ../../content/contributing/code-style.rst:751
msgid "Directory structure inside the ``var/httpd/htdocs/js/`` folder:"
msgstr ""

#: ../../content/contributing/code-style.rst:765
msgid "Thirdparty Code"
msgstr ""

#: ../../content/contributing/code-style.rst:767
msgid "Every thirdparty module gets its own subdirectory: *module name-version number* (e.g. ckeditor-4.7.0, jquery-3.2.1). Inside of that, file names should not have a version number or postfix included (wrong: ``jquery/jquery-3.2.1.min.js``, right: ``jquery-3.2.1/jquery.js``)."
msgstr ""

#: ../../content/contributing/code-style.rst:771
msgid "JavaScript Variables"
msgstr ""

#: ../../content/contributing/code-style.rst:773
msgid "Variable names should be CamelCase, just like in Perl."
msgstr ""

#: ../../content/contributing/code-style.rst:775
msgid "Variables that hold a jQuery object should start with ``$``, for example: ``$Tooltip``."
msgstr ""

#: ../../content/contributing/code-style.rst:779
msgid "Functions"
msgstr ""

#: ../../content/contributing/code-style.rst:781
msgid "Function names should be CamelCase, just like in Perl."
msgstr ""

#: ../../content/contributing/code-style.rst:785
msgid "Namespaces"
msgstr ""

#: ../../content/contributing/code-style.rst:791
msgid "Code Comments in JavaScript"
msgstr ""

#: ../../content/contributing/code-style.rst:793
msgid "The :ref:`Code Comments in Perl` also apply to JavaScript."
msgstr ""

#: ../../content/contributing/code-style.rst:795
msgid "Single line comments are done with ``//``."
msgstr ""

#: ../../content/contributing/code-style.rst:796
msgid "Longer comments are done with ``/* ... */``."
msgstr ""

#: ../../content/contributing/code-style.rst:797
msgid "If you comment out parts of your JavaScript code, only use ``//`` because ``/* ... */`` can cause  problems with regular expressions in the code."
msgstr ""

#: ../../content/contributing/code-style.rst:801
msgid "Event Handling"
msgstr ""

#: ../../content/contributing/code-style.rst:803
msgid "Always use ``$.on()`` instead of the event-shorthand methods of jQuery for better readability (wrong: ``$SomeObject.click(...)``, right: ``$SomeObject.on('click', ...``)."
msgstr ""

#: ../../content/contributing/code-style.rst:805
msgid "If you ``$.on()`` events, make sure to ``$.off()`` them beforehand, to make sure that events will not be bound twice, should the code be executed another time."
msgstr ""

#: ../../content/contributing/code-style.rst:807
msgid "Make sure to use ``$.on()`` with namespacing, such as ``$.on('click.<Name>')``."
msgstr ""

#: ../../content/contributing/code-style.rst:811
msgid "HTML"
msgstr ""

#: ../../content/contributing/code-style.rst:813
msgid "Use HTML 5 notation. Don't use self-closing tags for non-void elements (such as ``div``, ``span``, etc.)."
msgstr ""

#: ../../content/contributing/code-style.rst:815
msgid "Use proper intendation. Elements which contain other non-void child elements should not be on the same level as their children."
msgstr ""

#: ../../content/contributing/code-style.rst:817
msgid "Don't use HTML elements for layout reasons (e.g. using ``br`` elements for adding space to the top or bottom of other elements). Use the proper CSS classes instead."
msgstr ""

#: ../../content/contributing/code-style.rst:819
msgid "Don't use inline CSS. All CSS should either be added by using predefined classes or (if necessary) using JavaScript (e.g. for showing/hiding elements)."
msgstr ""

#: ../../content/contributing/code-style.rst:821
msgid "Don't use JavaScript in templates. All needed JavaScript should be part of the proper library for a certain front end module or of a proper global library. If you need to pass JavaScript data to the front end, use ``$LayoutObject->AddJSData()``."
msgstr ""

#: ../../content/contributing/code-style.rst:825
msgid "CSS"
msgstr ""

#: ../../content/contributing/code-style.rst:827
msgid "Minimum resolution is 1024x768px."
msgstr ""

#: ../../content/contributing/code-style.rst:829
msgid "The layout is liquid, which means that if the screen is wider, the space will be used."
msgstr ""

#: ../../content/contributing/code-style.rst:831
msgid "Absolute size measurements should be specified in px to have a consistent look on many platforms and browsers."
msgstr ""

#: ../../content/contributing/code-style.rst:833
msgid "Documentation is made with CSSDOC (see CSS files for examples). All logical blocks should have a CSSDOC comment."
msgstr ""

#: ../../content/contributing/code-style.rst:837
msgid "CSS Architecture"
msgstr ""

#: ../../content/contributing/code-style.rst:839
msgid "We follow the `Object Oriented CSS <https://github.com/stubbornella/oocss/wiki>`__ approach. In essence, this means that the layout is achieved by combining different generic building blocks to realize a particular design."
msgstr ""

#: ../../content/contributing/code-style.rst:841
msgid "Wherever possible, module specific design should not be used. Therefore we also do not work with IDs on the ``body`` element, for example, if it can be avoided."
msgstr ""

#: ../../content/contributing/code-style.rst:845
msgid "CSS Style"
msgstr ""

#: ../../content/contributing/code-style.rst:847
msgid "All definitions have a ``{`` in the same line as the selector, all rules are defined in one row per rule, the definition ends with a row with a single ``}`` in it."
msgstr ""

#: ../../content/contributing/code-style.rst:849
msgid "See the following example:"
msgstr ""

#: ../../content/contributing/code-style.rst:859
msgid "Between ``:`` and the rule value, there is a space."
msgstr ""

#: ../../content/contributing/code-style.rst:860
msgid "Every rule has an indent of 4 spaces."
msgstr ""

#: ../../content/contributing/code-style.rst:861
msgid "If multiple selectors are specified, separate them with comma and put each one on an own line:"
msgstr ""

#: ../../content/contributing/code-style.rst:871
msgid "If rules are combinable, combine them (e.g. combine ``background-position``, ``background-image``, etc. into ``background``)."
msgstr ""

#: ../../content/contributing/code-style.rst:873
msgid "Rules should be in a logical order within a definition (all color specific rule together, all positioning rules together, etc.)."
msgstr ""

#: ../../content/contributing/code-style.rst:874
msgid "All IDs and names are written in CamelCase notation:"
msgstr ""

#: ../../content/contributing/sending-contributions.rst:12
msgid "Sending Contributions"
msgstr ""

#: ../../content/contributing/sending-contributions.rst:14
msgid "The source code of OTOBO and additional modules can be found on `GitHub <https://github.com/RotherOSS>`__. From there you can get to the listing of all available repositories. It also describes the currently active branches and where contributions should go to (stable vs. development branches)."
msgstr ""

#: ../../content/contributing/sending-contributions.rst:16
msgid "It is highly recommended that you use the OTOBO code quality checker `OTOBOCodePolicy <https://github.com/RotherOSS/CodePolicy>`__ as described in the :ref:`Useful Tools` even before sending in your contributions. If your code does not validate against this tool, it will likely not be accepted."
msgstr ""

#: ../../content/contributing/sending-contributions.rst:18
msgid "The easiest way to send your contributions to the OTOBO developer's team is by creating a *pull request* in GitHub. Please take a look at the instructions on `GitHub <https://help.github.com>`__, specifically about `forking a repository and sending pull requests <https://help.github.com/articles/fork-a-repo>`__."
msgstr ""

#: ../../content/contributing/sending-contributions.rst:20
msgid "The basic workflow would look like this:"
msgstr ""

#: ../../content/contributing/sending-contributions.rst:22
msgid "Register at GitHub, if you have no account yet."
msgstr ""

#: ../../content/contributing/sending-contributions.rst:23
msgid "Fork the repository you want to contribute to, and checkout the branch that the changes should go in."
msgstr ""

#: ../../content/contributing/sending-contributions.rst:24
msgid "Create a new development branch for your fix/feature/contribution, based on the current branch."
msgstr ""

#: ../../content/contributing/sending-contributions.rst:25
msgid "After you finished your changes and committed them, push your branch to GitHub."
msgstr ""

#: ../../content/contributing/sending-contributions.rst:26
msgid "Create a pull request. The OTOBO dev team will be notified about this, check your pull request and either merge it or give you some feedback about possible improvements."
msgstr ""

#: ../../content/contributing/sending-contributions.rst:28
msgid "It might sound complicated, but once you have this workflow set up you'll see that making contributions is extremely easy."
msgstr ""

#: ../../content/contributing/translate.rst:12
msgid "Translating"
msgstr ""

#: ../../content/contributing/translate.rst:14
msgid "The translations are contributed and maintained mainly by OTOBO users, so *your* help is needed."
msgstr ""

#: ../../content/contributing/translate.rst:16
#: ../../content/documentation/translate-documentation.rst:14
msgid "All translations of the OTOBO GUI, the public extension modules and the documentations are managed using `Weblate <https://translate.otobo.de/>`__."
msgstr ""

#: ../../content/contributing/translate.rst:18
msgid "To contribute to translations:"
msgstr ""

#: ../../content/contributing/translate.rst:20
msgid "Sign up for a free translator account on `Weblate <https://translate.otobo.de/>`__."
msgstr ""

#: ../../content/contributing/translate.rst:21
msgid "Select a translation component and your language for translation."
msgstr ""

#: ../../content/contributing/translate.rst:22
msgid "Start updating your translation. No additional software or files required."
msgstr ""

#: ../../content/contributing/translate.rst:26
msgid "If your language is not listed in the dashboard, you can request a language. After it is approved, you can start translating."
msgstr ""

#: ../../content/contributing/translate.rst:28
#: ../../content/documentation/translate-documentation.rst:16
msgid "In OTOBO 10 the documentations are available in *reStructuredText* format. Be careful not to break the structure while translating the documentation."
msgstr ""

#: ../../content/contributing/translate.rst:32
msgid "You can find some examples in the :doc:`../documentation` chapter."
msgstr ""

#: ../../content/contributing/translate.rst:34
msgid "The OTOBO developers will download the translations from time to time into the OTOBO source code repositories, you don't have to submit them anywhere."
msgstr ""

#: ../../content/contributing/ui-design.rst:12
msgid "User Interface Design"
msgstr ""

#: ../../content/contributing/ui-design.rst:16
msgid "Capitalization"
msgstr ""

#: ../../content/contributing/ui-design.rst:18
msgid "This section talks about how the different parts of the English user interface should be capitalized. For further information, you may want to review `this helpful page <https://msdn.microsoft.com/en-us/library/dn742478.aspx>`__."
msgstr ""

#: ../../content/contributing/ui-design.rst:20
msgid "Headings (h1-h6) and titles (names, such as *Queue View*) are set in *title style* capitalization, that means all first letters will be capitalized (with a few exceptions such as *this*, *and*, *or* etc.)."
msgstr ""

#: ../../content/contributing/ui-design.rst:22
#: ../../content/contributing/ui-design.rst:29
msgid "Examples:"
msgstr ""

#: ../../content/contributing/ui-design.rst:24
msgid "*Action List*"
msgstr ""

#: ../../content/contributing/ui-design.rst:25
msgid "*Manage Customer-Group Relations*"
msgstr ""

#: ../../content/contributing/ui-design.rst:27
msgid "Other structural elements such as buttons, labels, tabs, menu items are set in *sentence style* capitalization (only the first letter of a phrase is capitalized), but no final dot is added to complete the phrase as a sentence."
msgstr ""

#: ../../content/contributing/ui-design.rst:31
msgid "*First name*"
msgstr ""

#: ../../content/contributing/ui-design.rst:32
msgid "*Select queue refresh time*"
msgstr ""

#: ../../content/contributing/ui-design.rst:33
msgid "*Print this ticket*"
msgstr ""

#: ../../content/contributing/ui-design.rst:35
msgid "Descriptive texts and tooltip contents are written as complete sentences."
msgstr ""

#: ../../content/contributing/ui-design.rst:37
#: ../../content/get-started/development-environment.rst:68
msgid "Example:"
msgstr ""

#: ../../content/contributing/ui-design.rst:39
msgid "*This value is required.*"
msgstr ""

#: ../../content/contributing/ui-design.rst:41
msgid "For translations, it has to be checked if the title style capitalization is also appropriate in the target language. It might have to be changed to sentence style capitalization or something else."
msgstr ""

#: ../../content/contributing/unit-tests.rst:12
msgid "Unit Tests"
msgstr ""

#: ../../content/contributing/unit-tests.rst:14
msgid "OTOBO provides a test suite which can be used to develop and run unit tests for all system related code."
msgstr ""

#: ../../content/contributing/unit-tests.rst:18
msgid "Creating a Test File"
msgstr ""

#: ../../content/contributing/unit-tests.rst:20
msgid "The test files are stored in ``.t`` files under ``scripts/test/*.t``. For example, let's take a look at the file ``scripts/test/Calendar.t`` for the *Calendar* class."
msgstr ""

#: ../../content/contributing/unit-tests.rst:22
msgid "Every test file should ideally instantiate unit test helper object at the start, so it can benefit from some built-in methods provided by it:"
msgstr ""

#: ../../content/contributing/unit-tests.rst:47
msgid "By providing ``RestoreDatabase`` parameter to helper constructor, any database statement executed during the unit test will be rolled back at the end, making sure no permanent change has been done."
msgstr ""

#: ../../content/contributing/unit-tests.rst:49
msgid "Like any other test suite, OTOBO provides assertion methods which can be used to test conditions. For example, this is how we create a test user and test that it has been indeed created:"
msgstr ""

#: ../../content/contributing/unit-tests.rst:61
msgid "Please consult API section below for complete list of assertion methods."
msgstr ""

#: ../../content/contributing/unit-tests.rst:63
msgid "It's always good practice to create random data in unit tests, which can help distinguish it from previously added data. Use random methods from API to get the strings and include them in your parameters:"
msgstr ""

#: ../../content/contributing/unit-tests.rst:82
msgid "Good developers make their unit test easy to maintain. Consider putting all test cases in an array and then iterate over them with some code. This will provide an easy way to extend the test later:"
msgstr ""

#: ../../content/contributing/unit-tests.rst:154
msgid "Prerequisites for Testing"
msgstr ""

#: ../../content/contributing/unit-tests.rst:156
msgid "To be able to run the unit tests, you need to have all optional environment dependencies (Perl modules and other modules) installed, except those for different database back ends than what you are using. Run ``bin/otobo.CheckEnvironment.pl`` to verify your module installation."
msgstr ""

#: ../../content/contributing/unit-tests.rst:158
msgid "You also need to have an instance of the OTOBO web front end running on the FQDN that is configured in your local OTOBO's ``Config.pm`` file. This OTOBO instance must use the same database that is configured for the unit tests."
msgstr ""

#: ../../content/contributing/unit-tests.rst:162
msgid "Testing"
msgstr ""

#: ../../content/contributing/unit-tests.rst:164
msgid "To run your tests, just use ``bin/otobo.Console.pl Dev::UnitTest::Run --test Calendar`` to use ``scripts/test/Calendar.t``."
msgstr ""

#: ../../content/contributing/unit-tests.rst:178
msgid "You can even run several tests at once, just supply additional ``--test`` arguments to the command:"
msgstr ""

#: ../../content/contributing/unit-tests.rst:196
msgid "If you execute ``bin/otobo.Console.pl Dev::UnitTest::Run`` without any argument, it will run all tests found in the system. Please note that this can take some time to finish."
msgstr ""

#: ../../content/contributing/unit-tests.rst:198
msgid "Provide ``--verbose`` argument in order to see messages about successful tests too. Any errors encountered during testing will be displayed regardless of this switch, provided they are actually raised in the test."
msgstr ""

#: ../../content/contributing/unit-tests.rst:202
msgid "Unit Test API"
msgstr ""

#: ../../content/contributing/unit-tests.rst:204
msgid "OTOBO provides API for unit testing that was used in the previous example. Here we'll list the most important functions, please also see the online API reference of ```Kernel::System::UnitTest`` <https://otobo.github.io/doc/api/otobo/8.0/Perl/Kernel/System/UnitTest.pm.html>`__."
msgstr ""

#: ../../content/contributing/unit-tests.rst:214
msgid "``True()``"
msgstr ""

#: ../../content/contributing/unit-tests.rst:207
msgid "This function tests whether given scalar value is a true value in Perl."
msgstr ""

#: ../../content/contributing/unit-tests.rst:224
msgid "``False()``"
msgstr ""

#: ../../content/contributing/unit-tests.rst:217
msgid "This function tests whether given scalar value is a false value in Perl."
msgstr ""

#: ../../content/contributing/unit-tests.rst:235
msgid "``Is()``"
msgstr ""

#: ../../content/contributing/unit-tests.rst:227
msgid "This function tests whether the given scalar variables are equal."
msgstr ""

#: ../../content/contributing/unit-tests.rst:246
msgid "``IsNot()``"
msgstr ""

#: ../../content/contributing/unit-tests.rst:238
msgid "This function tests whether the given scalar variables are unequal."
msgstr ""

#: ../../content/contributing/unit-tests.rst:257
msgid "``IsDeeply()``"
msgstr ""

#: ../../content/contributing/unit-tests.rst:249
msgid "This function compares complex data structures for equality. ``$A`` and ``$B`` have to be references."
msgstr ""

#: ../../content/contributing/unit-tests.rst:268
msgid "``IsNotDeeply()``"
msgstr ""

#: ../../content/contributing/unit-tests.rst:260
msgid "This function compares complex data structures for inequality. ``$A`` and ``$B`` have to be references."
msgstr ""

#: ../../content/contributing/unit-tests.rst:270
msgid "Besides this, unit test helper object also provides some helpful methods for common test conditions. For full reference, please see the online API reference of ```Kernel::System::UnitTest::Helper`` <https://doc.otobo.com/doc/api/otobo/8.0/Perl/Kernel/System/UnitTest/Helper.pm.html>`__."
msgstr ""

#: ../../content/contributing/unit-tests.rst:282
msgid "``GetRandomID()``"
msgstr ""

#: ../../content/contributing/unit-tests.rst:273
msgid "This function creates a random ID that can be used in tests as a unique identifier. It is guaranteed that within a test this function will never return a duplicate."
msgstr ""

#: ../../content/contributing/unit-tests.rst:277
msgid "Please note that these numbers are not really random and should only be used to create test data."
msgstr ""

#: ../../content/contributing/unit-tests.rst:292
msgid "``TestUserCreate()``"
msgstr ""

#: ../../content/contributing/unit-tests.rst:285
msgid "This function creates a test user that can be used in tests. It will be set to invalid automatically during the destructor. It returns the login name of the new user, the password is the same."
msgstr ""

#: ../../content/contributing/unit-tests.rst:305
msgid "``FixedTimeSet()``"
msgstr ""

#: ../../content/contributing/unit-tests.rst:295
msgid "This functions makes it possible to override the system time as long as this object lives. You can pass an optional time parameter that should be used, if not, the current system time will be used."
msgstr ""

#: ../../content/contributing/unit-tests.rst:299
msgid "All calls to methods of ``Kernel::System::Time`` and ``Kernel::System::DateTime`` will use the given time afterwards."
msgstr ""

#: ../../content/contributing/unit-tests.rst:308
msgid "``FixedTimeUnset()``"
msgstr ""

#: ../../content/contributing/unit-tests.rst:308
msgid "This functions restores the regular system time behavior."
msgstr ""

#: ../../content/contributing/unit-tests.rst:311
msgid "``FixedTimeAddSeconds()``"
msgstr ""

#: ../../content/contributing/unit-tests.rst:311
msgid "This functions adds a number of seconds to the fixed system time which was previously set by ``FixedTimeSet()``. You can pass a negative value to go back in time."
msgstr ""

#: ../../content/contributing/unit-tests.rst:326
msgid "``ConfigSettingChange()``"
msgstr ""

#: ../../content/contributing/unit-tests.rst:314
msgid "This functions temporarily changes a configuration setting system wide to another value, both in the current instance of the ``ConfigObject`` and also in the system configuration on disk. This will be reset when the ``Helper`` object is destroyed."
msgstr ""

#: ../../content/contributing/unit-tests.rst:318
#: ../../content/contributing/unit-tests.rst:333
msgid "Please note that this will not work correctly in clustered environments."
msgstr ""

#: ../../content/contributing/unit-tests.rst:355
msgid "``CustomCodeActivate()``"
msgstr ""

#: ../../content/contributing/unit-tests.rst:329
msgid "This function will temporarily include custom code in the system. For example, you may use this to redefine a subroutine from another class. This change will persist for remainder of the test. All code will be removed when the ``Helper`` object is destroyed."
msgstr ""

#: ../../content/contributing/unit-tests.rst:382
msgid "``ProvideTestDatabase()``"
msgstr ""

#: ../../content/contributing/unit-tests.rst:358
msgid "This function will provide a temporary database for the test. Please first define test database settings in ``Kernel/Config.pm``, i.e:"
msgstr ""

#: ../../content/contributing/unit-tests.rst:368
msgid "The method call will override global database configuration for duration of the test, i.e. temporary database will receive all calls sent over system ``DBObject``."
msgstr ""

#: ../../content/contributing/unit-tests.rst:370
msgid "All database contents will be automatically dropped when the ``Helper`` object is destroyed."
msgstr ""

#: ../../content/contributing/unit-tests.rst:372
msgid "This method returns ``undef`` in case the test database is not configured. If it is configured, but the supplied XML cannot be read or executed, this method will ``die()`` to interrupt the test with an error."
msgstr ""

#: ../../content/documentation.rst:12
msgid "Documentation"
msgstr ""

#: ../../content/documentation.rst:14
msgid "In OTOBO 10 the documentations are available in *reStructuredText* format. Various outputs are available on the `OTOBO documentation page <https://doc.otobo.de/>`__, like HTML, EPUB and PDF."
msgstr ""

#: ../../content/documentation.rst:16
msgid "The documentation is written in English and translated into many languages."
msgstr ""

#: ../../content/documentation/documentation-infrastucture.rst:12
msgid "Documentation Infrastructure"
msgstr ""

#: ../../content/documentation/documentation-infrastucture.rst:14
msgid "OTOBO uses `Sphinx <http://www.sphinx-doc.org/>`__ to generate the outputs. The HTML output is generated using the `Read the Docs <https://readthedocs.org/>`__ theme."
msgstr ""

#: ../../content/documentation/documentation-infrastucture.rst:18
msgid "All outputs are customized on the build server. If you want to setup a developer environment in your local machine for testing and writing the documentation, the outputs can be different."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:12
msgid "reStructuredText Primer"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:14
msgid "The documentation format name is **reStructuredText** (one word, this is the correct spelling). This is an easy to read documentation format using plain text and small inline markers."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:16
msgid "This short tutorial will guide you through to create or update documentations. To give a full featured tutorial about how to use the *reStructuredText* format is beyond the scope of this document, and many tutorials (e. g. `Sphinx reStructuredText primer <http://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html>`__ and `reStructuredText user documentation <http://docutils.sourceforge.net/rst.html>`__) and `on-line editors <http://rst.ninjs.org>`__ are available on the internet."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:18
msgid "The following examples shows the most commonly used documentation elements."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:22
msgid "Headings"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:24
msgid "To use heading in the documentation, you have to underline the titles with special characters. The underline must start from the first letter of the title and end at the last letter of the title. The hierarchy of the special characters are the following: =, -, ~, ^, ."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:26
msgid "The following example shows the usage of the headings:"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:57
msgid "Paragraphs"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:59
msgid "For writing paragraphs, you have to start sentences at the beginning of the line. To create a new paragraph, just leave a blank line between the paragraphs. Example:"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:73
msgid "Inline Markups"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:75
msgid "The standard inline markup is quite simple:"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:77
msgid "One asterisk: \\*text\\* for *emphasis* (italics)."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:78
msgid "Two asterisks: \\*\\*text\\*\\* for **strong emphasis** (boldface)."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:79
msgid "Grave accents: \\`\\`text\\`\\` for ``literal texts`` (code samples)."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:81
msgid "If asterisks or grave accents appear in running text which could be confused with inline markup delimiters, they have to be escaped with a backslash, like \\\\*."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:85
msgid "Lists"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:87
msgid "To create unordered lists, start a line with asterisk (\\*) or dash (-). To create ordered list, start a line with numbers or hash mark (#). If you need nested lists, leave a blank line between the list items and use indentation with 3 spaces. Example:"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:101
msgid "Nested list example:"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:115
msgid "Literal Blocks"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:117
msgid "Literal blocks are texts that should be displayed as verbatim. To create literal blocks, do the following:"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:119
msgid "Type 2 colons (::) in a new line."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:120
msgid "Leave a blank line."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:121
msgid "Write the text with indentation of 3 spaces."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:123
msgid "Use literal blocks for code snippets, terminal outputs, configuration files, etc. Example:"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:133
msgid "If the language of the code snippet is known, you can specify it for syntax highlighting:"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:161
msgid "Tables"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:163
msgid "To create grid tables, you have to draw the table. Example:"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:178
msgid "Hyperlinks"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:180
msgid "Hyperlinks can be used inline or referenced. For inline use, encapsulate the text of the link and the URL with grave accents and two trailing underscore characters."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:186
msgid "The link above will display as: `OTOBO website <https://otobo.de>`__."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:188
msgid "To create referenced links, you have to separate the text and the link. Example:"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:198
msgid "Images"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:200
msgid "To insert an image into the documentation:"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:202
msgid "Put the image in the ``images`` folder."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:203
msgid "Create a reference to the image with:"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:214
msgid "Colored Boxes"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:216
msgid "These boxes have special meanings and will be highlighted as default."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:218
msgid "Warning box:"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:228
msgid "This is a warning box."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:230
msgid "Note box:"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:240
msgid "This is a note box."
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:242
msgid "See also box:"
msgstr ""

#: ../../content/documentation/restructuredtext-primer.rst:252
msgid "This is a see also box."
msgstr ""

#: ../../content/documentation/style-guide.rst:12
msgid "Style Guide"
msgstr ""

#: ../../content/documentation/style-guide.rst:14
msgid "This part of the documentation is only for visual style and wording."
msgstr ""

#: ../../content/documentation/style-guide.rst:18
msgid "Writing Content"
msgstr ""

#: ../../content/documentation/style-guide.rst:20
msgid "There is an internet slang **TL;DR**, which means *too long, didn't read* (see more information on `Wikipedia <https://en.wikipedia.org/wiki/TL;DR>`__). Many people don't like reading long texts, so please keep the documentation as short as possible. Use step-by-step tutorials instead of writing wall of text."
msgstr ""

#: ../../content/documentation/style-guide.rst:22
msgid "For example this is a **wrong** example for writing content:"
msgstr ""

#: ../../content/documentation/style-guide.rst:33
msgid "The same content in **suggested** *human understandable* format:"
msgstr ""

#: ../../content/documentation/style-guide.rst:45
msgid "The latter is easier to translate, because 6 short sentences will be included in the language file. If a content is changed in one of the sentences, only the changed sentence need to be reviewed and translated again. The first wrong example puts only one huge string to the language file, and if some changes will be made in the source string, the translator needs to review and re-translate the whole string."
msgstr ""

#: ../../content/documentation/style-guide.rst:49
msgid "Screenshots"
msgstr ""

#: ../../content/documentation/style-guide.rst:51
msgid "Don't use the native resolution of your machine. Usually it is full HD or bigger, so creating a screenshot with this resolution will became unreadable in some output, because all the images have to be shrink to the width of A4 paper in case of PDF. OTOBO uses responsive design, so 1025 pixels is the minimum, that OTOBO assumes it is a large display. Please use this as width of your screenshots."
msgstr ""

#: ../../content/documentation/style-guide.rst:55
msgid "The resolution can be set in all web browser with a feature called *mobile mode* or *responsive design*. Check your browser user manual for the usage of the feature and set the width of the screen to 1025 pixels."
msgstr ""

#: ../../content/documentation/style-guide.rst:57
msgid "This is an example for a **wrong** screenshot, as it has resolution of full HD. Due to the automatic shrinking the texts on the screenshot are hard to read:"
msgstr ""

#: ../../content/documentation/style-guide.rst:62
msgid "Agent Dashboard (1920 pixels width)"
msgstr ""

#: ../../content/documentation/style-guide.rst:64
msgid "The same screenshot with **suggested** resolution. The texts are much easier to read:"
msgstr ""

#: ../../content/documentation/style-guide.rst:69
msgid "Agent Dashboard (1025 pixels width)"
msgstr ""

#: ../../content/documentation/style-guide.rst:71
msgid "It is also wrong, if the screenshot has good resolution in pixels, but with high DPI. For example this screenshot is **wrong**, because the texts on it is much bigger than the other texts in the documentation:"
msgstr ""

#: ../../content/documentation/style-guide.rst:76
msgid "Video Invitation Dialog (756 pixels width but with high DPI)"
msgstr ""

#: ../../content/documentation/style-guide.rst:80
msgid "Create Screenshots with Firefox"
msgstr ""

#: ../../content/documentation/style-guide.rst:82
msgid "If only a part of the screenshot is required, the screenshot needs to be cropped. The administrator interface of OTOBO consist of a left sidebar and a main content column. To create screenshots with Firefox:"
msgstr ""

#: ../../content/documentation/style-guide.rst:84
msgid "Right click on an element in the browser and select *Inspect element*."
msgstr ""

#: ../../content/documentation/style-guide.rst:85
msgid "Select the element in the DOM, if it was not selected."
msgstr ""

#: ../../content/documentation/style-guide.rst:86
msgid "Right click on the node and select *Screenshot Node*."
msgstr ""

#: ../../content/documentation/style-guide.rst:91
msgid "Example screenshot for the main content"
msgstr ""

#: ../../content/documentation/style-guide.rst:96
msgid "Example screenshot for the left sidebar"
msgstr ""

#: ../../content/documentation/style-guide.rst:101
msgid "Example screenshot for the main content column"
msgstr ""

#: ../../content/documentation/style-guide.rst:105
msgid "Capitalization in Documentation"
msgstr ""

#: ../../content/documentation/style-guide.rst:107
msgid "For titles always have to use sentence case capitalization, which means, that in titles always capitalize:"
msgstr ""

#: ../../content/documentation/style-guide.rst:109
msgid "Nouns (man, bus, book)."
msgstr ""

#: ../../content/documentation/style-guide.rst:110
msgid "Adjectives (angry, lovely, small)."
msgstr ""

#: ../../content/documentation/style-guide.rst:111
msgid "Verbs (run, eat, sleep)."
msgstr ""

#: ../../content/documentation/style-guide.rst:112
msgid "Adverbs (slowly, quickly, quietly)."
msgstr ""

#: ../../content/documentation/style-guide.rst:113
msgid "Pronouns (he, she, it)."
msgstr ""

#: ../../content/documentation/style-guide.rst:114
msgid "Subordinating conjunctions (as, because, that)."
msgstr ""

#: ../../content/documentation/style-guide.rst:116
msgid "In titles do not capitalize:"
msgstr ""

#: ../../content/documentation/style-guide.rst:118
msgid "Articles: a, an, the."
msgstr ""

#: ../../content/documentation/style-guide.rst:119
msgid "Coordinating conjunctions: and, but, or, for, nor, etc."
msgstr ""

#: ../../content/documentation/style-guide.rst:120
msgid "Prepositions (fewer than five letters): on, at, to, from, by, etc."
msgstr ""

#: ../../content/documentation/style-guide.rst:122
msgid "In normal sentences don't capitalize any words, only names and reference to titles have to be capitalized. This is a **wrong** example:"
msgstr ""

#: ../../content/documentation/style-guide.rst:128
msgid "The **suggested** sentence with proper capitalization. Besides, *Ticket Zoom* is the name of the screen, so it should be emphasized:"
msgstr ""

#: ../../content/documentation/style-guide.rst:136
msgid "Buttons and Screen Names"
msgstr ""

#: ../../content/documentation/style-guide.rst:138
msgid "In the content sentences all buttons and screens should be emphasized and should be written with capital letters or in sentence case. Don't use apostrophes or quotation marks for emphasizing."
msgstr ""

#: ../../content/documentation/style-guide.rst:140
msgid "This sentence is **wrong**, because apostrophes are used for emphasizing:"
msgstr ""

#: ../../content/documentation/style-guide.rst:146
msgid "The **suggested** way is to use asterisks for emphasizing:"
msgstr ""

#: ../../content/documentation/style-guide.rst:154
msgid "Wording"
msgstr ""

#: ../../content/documentation/style-guide.rst:156
msgid "Don't use variable names in sentences. This sentence is **wrong**, because a variable name is meaningless for some people:"
msgstr ""

#: ../../content/documentation/style-guide.rst:162
msgid "The same sentence without variable name, this is **suggested**:"
msgstr ""

#: ../../content/documentation/style-guide.rst:170
msgid "Variable Names"
msgstr ""

#: ../../content/documentation/style-guide.rst:172
msgid "Variable names should always marked as ``literal`` content. This is useful for translators, as they can exactly know, that the string mustn't be translated. If a string is not marked as literal content, it usually should be translated. For example:"
msgstr ""

#: ../../content/documentation/translate-documentation.rst:12
msgid "Translating the Documentation"
msgstr ""

#: ../../content/documentation/translate-documentation.rst:18
msgid "Here are some examples."
msgstr ""

#: ../../content/documentation/translate-documentation.rst:33
msgid "Emphases"
msgstr ""

#: ../../content/documentation/translate-documentation.rst:21
msgid "Emphasized texts are between two asterisks. The text should be translated. This is usually used for screen names, titles, buttons and labels. Please check the user interface translations to find and use the same wording in the documentation."
msgstr ""

#: ../../content/documentation/translate-documentation.rst:23
#: ../../content/documentation/translate-documentation.rst:38
#: ../../content/documentation/translate-documentation.rst:53
#: ../../content/documentation/translate-documentation.rst:68
#: ../../content/documentation/translate-documentation.rst:83
msgid "Example original sentence:"
msgstr ""

#: ../../content/documentation/translate-documentation.rst:29
#: ../../content/documentation/translate-documentation.rst:44
#: ../../content/documentation/translate-documentation.rst:59
#: ../../content/documentation/translate-documentation.rst:74
#: ../../content/documentation/translate-documentation.rst:89
msgid "Example translation into Hungarian:"
msgstr ""

#: ../../content/documentation/translate-documentation.rst:48
msgid "Strong"
msgstr ""

#: ../../content/documentation/translate-documentation.rst:36
msgid "Strong texts are between two double asterisks. The text should be translated. This is usually used for important information."
msgstr ""

#: ../../content/documentation/translate-documentation.rst:63
msgid "Literal texts"
msgstr ""

#: ../../content/documentation/translate-documentation.rst:51
msgid "Literal texts are between two double back-tick characters. This is usually used for variable names, configuration names and file paths, and **must not** be translated, otherwise it will break the structure."
msgstr ""

#: ../../content/documentation/translate-documentation.rst:78
msgid "Internal links"
msgstr ""

#: ../../content/documentation/translate-documentation.rst:66
msgid "Internal links point to other pages or headings of the pages. ``:doc:`page-name``` is used for referring to a page and ``:ref:`Heading Title``` is used for referring to a heading. There is a custom tag ``:sysconfig:`System Configuration Name``` for referring to a system configuration. The texts *page-name*, *Heading Title* and *System Configuration Name* **must not** be translated, otherwise it will break the structure."
msgstr ""

#: ../../content/documentation/translate-documentation.rst:92
msgid "External links"
msgstr ""

#: ../../content/documentation/translate-documentation.rst:81
msgid "External links consist of a visible text and an URL in form *\\`visible text <https://example.com>\\`__*. The *visible text* should be translated."
msgstr ""

#: ../../content/get-started.rst:12
msgid "Getting Started"
msgstr ""

#: ../../content/get-started.rst:14
msgid "OTOBO is a multi-platform web application framework which was originally developed for a trouble ticket system. It supports different web servers and databases."
msgstr ""

#: ../../content/get-started.rst:16
msgid "This manual shows how to develop your own OTOBO modules and applications based on the OTOBO styleguides."
msgstr ""

#: ../../content/get-started/architecture.rst:12
msgid "Architecture Overview"
msgstr ""

#: ../../content/get-started/architecture.rst:14
msgid "The OTOBO framework is modular. The following picture shows the basic layer architecture of OTOBO."
msgstr ""

#: ../../content/get-started/architecture.rst:19
msgid "OTOBO Architecture"
msgstr ""

#: ../../content/get-started/architecture.rst:21
msgid "The OTOBO Generic Interface continues OTOBO modularity. The next picture shows the basic layer architecture of the Generic Interface."
msgstr ""

#: ../../content/get-started/architecture.rst:26
msgid "Generic Interface Architecture"
msgstr ""

#: ../../content/get-started/architecture.rst:30
msgid "Directories"
msgstr ""

#: ../../content/get-started/architecture.rst:33
msgid "Directory"
msgstr ""

#: ../../content/get-started/architecture.rst:33
msgid "Description"
msgstr ""

#: ../../content/get-started/architecture.rst:35
msgid "bin/"
msgstr ""

#: ../../content/get-started/architecture.rst:35
msgid "command line tools"
msgstr ""

#: ../../content/get-started/architecture.rst:37
msgid "bin/cgi-bin/"
msgstr ""

#: ../../content/get-started/architecture.rst:37
msgid "web handle"
msgstr ""

#: ../../content/get-started/architecture.rst:39
msgid "bin/fcgi-bin/"
msgstr ""

#: ../../content/get-started/architecture.rst:39
msgid "fast CGI web handle"
msgstr ""

#: ../../content/get-started/architecture.rst:41
msgid "Kernel"
msgstr ""

#: ../../content/get-started/architecture.rst:41
msgid "application code base"
msgstr ""

#: ../../content/get-started/architecture.rst:43
msgid "Kernel/Config/"
msgstr ""

#: ../../content/get-started/architecture.rst:43
#: ../../content/get-started/architecture.rst:45
msgid "configuration files"
msgstr ""

#: ../../content/get-started/architecture.rst:45
msgid "Kernel/Config/Files"
msgstr ""

#: ../../content/get-started/architecture.rst:47
msgid "Kernel/GenericInterface/"
msgstr ""

#: ../../content/get-started/architecture.rst:47
msgid "the Generic Interface API"
msgstr ""

#: ../../content/get-started/architecture.rst:49
msgid "Kernel/GenericInterface/Invoker/"
msgstr ""

#: ../../content/get-started/architecture.rst:49
msgid "invoker modules for Generic Interface"
msgstr ""

#: ../../content/get-started/architecture.rst:52
msgid "Kernel/GenericInterface/Mapping/"
msgstr ""

#: ../../content/get-started/architecture.rst:52
msgid "mapping modules for Generic Interface, e.g. Simple"
msgstr ""

#: ../../content/get-started/architecture.rst:55
msgid "Kernel/GenericInterface/Operation /"
msgstr ""

#: ../../content/get-started/architecture.rst:55
msgid "operation modules for Generic Interface"
msgstr ""

#: ../../content/get-started/architecture.rst:58
msgid "Kernel/GenericInterface/Transport /"
msgstr ""

#: ../../content/get-started/architecture.rst:58
msgid "transport modules for Generic Interface, e.g. \"HTTP SOAP\""
msgstr ""

#: ../../content/get-started/architecture.rst:61
msgid "Kernel/Language"
msgstr ""

#: ../../content/get-started/architecture.rst:61
msgid "language translation files"
msgstr ""

#: ../../content/get-started/architecture.rst:63
msgid "Kernel/Scheduler/"
msgstr ""

#: ../../content/get-started/architecture.rst:63
msgid "Scheduler files"
msgstr ""

#: ../../content/get-started/architecture.rst:65
msgid "Kernel/Scheduler/TaskHandler"
msgstr ""

#: ../../content/get-started/architecture.rst:65
msgid "handler modules for scheduler tasks, e.g. GenericInterface"
msgstr ""

#: ../../content/get-started/architecture.rst:68
msgid "Kernel/System/"
msgstr ""

#: ../../content/get-started/architecture.rst:68
msgid "core modules, e.g. Log, Ticket"
msgstr ""

#: ../../content/get-started/architecture.rst:70
msgid "Kernel/Modules/"
msgstr ""

#: ../../content/get-started/architecture.rst:70
msgid "front end modules, e.g. QueueView"
msgstr ""

#: ../../content/get-started/architecture.rst:73
msgid "Kernel/Output/HTML/"
msgstr ""

#: ../../content/get-started/architecture.rst:73
msgid "html templates"
msgstr ""

#: ../../content/get-started/architecture.rst:75
msgid "var/"
msgstr ""

#: ../../content/get-started/architecture.rst:75
msgid "variable data"
msgstr ""

#: ../../content/get-started/architecture.rst:77
msgid "var/log"
msgstr ""

#: ../../content/get-started/architecture.rst:77
msgid "logfiles"
msgstr ""

#: ../../content/get-started/architecture.rst:79
msgid "var/cron/"
msgstr ""

#: ../../content/get-started/architecture.rst:79
msgid "cron files"
msgstr ""

#: ../../content/get-started/architecture.rst:81
msgid "var/httpd/htdocs/"
msgstr ""

#: ../../content/get-started/architecture.rst:81
msgid "htdocs directory with index.html"
msgstr ""

#: ../../content/get-started/architecture.rst:83
msgid "var/httpd/htdocs/skins/Agent/"
msgstr ""

#: ../../content/get-started/architecture.rst:83
msgid "available skins for the Agent interface"
msgstr ""

#: ../../content/get-started/architecture.rst:86
msgid "var/httpd/htdocs/skins/Customer/"
msgstr ""

#: ../../content/get-started/architecture.rst:86
msgid "available skins for the Customer interface"
msgstr ""

#: ../../content/get-started/architecture.rst:89
msgid "var/httpd/htdocs/js/"
msgstr ""

#: ../../content/get-started/architecture.rst:89
msgid "JavaScript files"
msgstr ""

#: ../../content/get-started/architecture.rst:91
msgid "scripts/"
msgstr ""

#: ../../content/get-started/architecture.rst:91
msgid "misc files"
msgstr ""

#: ../../content/get-started/architecture.rst:93
msgid "scripts/test/"
msgstr ""

#: ../../content/get-started/architecture.rst:93
msgid "unit test files"
msgstr ""

#: ../../content/get-started/architecture.rst:95
msgid "scripts/test/sample/"
msgstr ""

#: ../../content/get-started/architecture.rst:95
msgid "unit test sample data files"
msgstr ""

#: ../../content/get-started/architecture.rst:100
msgid "Files"
msgstr ""

#: ../../content/get-started/architecture.rst:102
msgid ".pl = Perl"
msgstr ""

#: ../../content/get-started/architecture.rst:103
msgid ".pm = Perl Module"
msgstr ""

#: ../../content/get-started/architecture.rst:104
msgid ".tt = Template::Toolkit template files"
msgstr ""

#: ../../content/get-started/architecture.rst:105
msgid ".dist = Default templates of files"
msgstr ""

#: ../../content/get-started/architecture.rst:106
msgid ".yaml or .yml = YAML files, used for Web Service configuration"
msgstr ""

#: ../../content/get-started/architecture.rst:110
msgid "Core Modules"
msgstr ""

#: ../../content/get-started/architecture.rst:112
msgid "Core modules are located under ``$OTOBO_HOME/Kernel/System/*``. This layer is for the logical work. Core modules are used to handle system routines like *lock ticket* and *create ticket*. A few main core modules are:"
msgstr ""

#: ../../content/get-started/architecture.rst:115
msgid "``Kernel::System::Config`` to access configuration options."
msgstr ""

#: ../../content/get-started/architecture.rst:116
msgid "``Kernel::System::Log`` to log into OTOBO log back end."
msgstr ""

#: ../../content/get-started/architecture.rst:117
msgid "``Kernel::System::DB`` to access the database back end."
msgstr ""

#: ../../content/get-started/architecture.rst:118
msgid "``Kernel::System::Auth`` to check user authentication."
msgstr ""

#: ../../content/get-started/architecture.rst:119
msgid "``Kernel::System::User`` to manage users."
msgstr ""

#: ../../content/get-started/architecture.rst:120
msgid "``Kernel::System::Group`` to manage groups."
msgstr ""

#: ../../content/get-started/architecture.rst:121
msgid "``Kernel::System::Email`` for sending emails."
msgstr ""

#: ../../content/get-started/architecture.rst:123
#: ../../content/get-started/architecture.rst:151
#: ../../content/get-started/architecture.rst:173
#: ../../content/get-started/architecture.rst:183
#: ../../content/get-started/architecture.rst:191
#: ../../content/get-started/architecture.rst:201
#: ../../content/get-started/architecture.rst:211
#: ../../content/get-started/architecture.rst:219
msgid "For more information see the `Documentation Portal <https://doc.otobo.com/doc/>`__."
msgstr ""

#: ../../content/get-started/architecture.rst:127
msgid "Front End Handle"
msgstr ""

#: ../../content/get-started/architecture.rst:129
msgid "The interface between the browser, web server and the front end modules. A front end module can be used via the HTTP link."
msgstr ""

#: ../../content/get-started/architecture.rst:137
#: ../../content/how-to-extend-otobo/otobo-module-layers.rst:43
msgid "Front End Modules"
msgstr ""

#: ../../content/get-started/architecture.rst:139
msgid "Front end modules are located under ``$OTOBO_HOME/Kernel/Modules/*.pm``. There are two public functions in there - ``new()`` and ``run()`` - which are accessed from the front end handle (e.g. ``index.pl``)."
msgstr ""

#: ../../content/get-started/architecture.rst:141
msgid "``new()`` is used to create a front end module object. The front end handle provides the used front end module with the basic framework objects. These are, for example:"
msgstr ""

#: ../../content/get-started/architecture.rst:143
msgid "``ParamObject`` to get web form params."
msgstr ""

#: ../../content/get-started/architecture.rst:144
msgid "``DBObject`` to use existing database connections."
msgstr ""

#: ../../content/get-started/architecture.rst:145
msgid "``LayoutObject`` to use templates and other HTML layout functions."
msgstr ""

#: ../../content/get-started/architecture.rst:146
msgid "``ConfigObject`` to access config settings."
msgstr ""

#: ../../content/get-started/architecture.rst:147
msgid "``LogObject`` to use the framework log system."
msgstr ""

#: ../../content/get-started/architecture.rst:148
msgid "``UserObject`` to get the user functions from the current user."
msgstr ""

#: ../../content/get-started/architecture.rst:149
msgid "``GroupObject`` to get the group functions."
msgstr ""

#: ../../content/get-started/architecture.rst:155
msgid "CMD Front End"
msgstr ""

#: ../../content/get-started/architecture.rst:157
msgid "The CMD (command line) front end is like the web front end handle and the web front end module in one (just without the ``LayoutObject``) and uses the core modules for some actions in the system."
msgstr ""

#: ../../content/get-started/architecture.rst:161
#: ../../content/how-to-extend-otobo/otobo-module-layers.rst:52
msgid "Generic Interface Modules"
msgstr ""

#: ../../content/get-started/architecture.rst:163
msgid "Generic interface modules are located under ``$OTOBO_HOME/Kernel/GenericInterface/*``. Generic interface modules are used to handle each part of a web service execution on the system. The main modules for the generic interface are:"
msgstr ""

#: ../../content/get-started/architecture.rst:165
msgid "``Kernel::GenericInterface::Transport`` to interact with remote systems."
msgstr ""

#: ../../content/get-started/architecture.rst:166
msgid "``Kernel::GenericInterface::Mapping`` to transform data into a required format."
msgstr ""

#: ../../content/get-started/architecture.rst:167
msgid "``Kernel::GenericInterface::Requester`` to use OTOBO as a client for the web service."
msgstr ""

#: ../../content/get-started/architecture.rst:168
msgid "``Kernel::GenericInterface::Provider`` to use OTOBO as a server for web service."
msgstr ""

#: ../../content/get-started/architecture.rst:169
msgid "``Kernel::GenericInterface::Operation`` to execute provider actions."
msgstr ""

#: ../../content/get-started/architecture.rst:170
msgid "``Kernel::GenericInterface::Invoker`` to execute requester actions."
msgstr ""

#: ../../content/get-started/architecture.rst:171
msgid "``Kernel::GenericInterface::Debugger`` to track web service communication, using log entries."
msgstr ""

#: ../../content/get-started/architecture.rst:177
msgid "Generic Interface Invoker Modules"
msgstr ""

#: ../../content/get-started/architecture.rst:179
msgid "Generic interface invoker modules are located under ``$OTOBO_HOME/Kernel/GenericInterface/Invoker/*``. Each invoker is contained in a folder called ``Controller``. This approach helps to define a name space not only for internal classes and methods but for filenames too. For example: ``$OTOBO_HOME/Kernel/GenericInterface/Invoker/Test/`` is the controller for all test type invokers."
msgstr ""

#: ../../content/get-started/architecture.rst:181
msgid "Generic interface invoker modules are used as a back end to create requests for remote systems to execute actions."
msgstr ""

#: ../../content/get-started/architecture.rst:187
msgid "Generic Interface Mapping Modules"
msgstr ""

#: ../../content/get-started/architecture.rst:189
msgid "Generic interface mapping modules are located under ``$OTOBO_HOME/Kernel/GenericInterface/Mapping/*``. These modules are used to transform data (keys and values) from one format to another."
msgstr ""

#: ../../content/get-started/architecture.rst:195
msgid "Generic Interface Operation Modules"
msgstr ""

#: ../../content/get-started/architecture.rst:197
msgid "Generic interface operation modules are located under ``$OTOBO_HOME/Kernel/GenericInterface/Operation/*``. Each operation is contained in a folder called ``Controller``. This approach help to define a name space not only for internal classes and methods but for filenames too. For example: ``$OTOBO_HOME/Kernel/GenericInterface/Operation/Ticket/`` is the controller for all ticket type operations."
msgstr ""

#: ../../content/get-started/architecture.rst:199
msgid "Generic interface operation modules are used as a back end to perform actions requested by a remote system."
msgstr ""

#: ../../content/get-started/architecture.rst:205
msgid "Generic Interface Transport Modules"
msgstr ""

#: ../../content/get-started/architecture.rst:207
msgid "Generic interface network transport modules are located under ``$OTOBO_HOME/Kernel/GenericInterface/Transport/*``. Each transport module should be placed in a directory named as the network protocol used. For example: The HTTP SOAP transport module, located in ``$OTOBO_HOME/Kernel/GenericInterface/Transport/HTTP/SOAP.pm``."
msgstr ""

#: ../../content/get-started/architecture.rst:209
msgid "Generic interface transport modules are used send data to, and receive data from a remote system."
msgstr ""

#: ../../content/get-started/architecture.rst:215
msgid "Scheduler Task Handler Modules"
msgstr ""

#: ../../content/get-started/architecture.rst:217
msgid "Scheduler task handler modules are located under ``$OTOBO_HOME/Kernel/Scheduler/TaskHandler/*``. These modules are used to perform asynchronous tasks. For example, the ``GenericInterface`` task handler perform generic interface requests to remote systems outside the Apache process. This helps the system to be more responsive, preventing possible performance issues."
msgstr ""

#: ../../content/get-started/architecture.rst:223
msgid "Database"
msgstr ""

#: ../../content/get-started/architecture.rst:225
msgid "The database interface supports different databases."
msgstr ""

#: ../../content/get-started/architecture.rst:227
msgid "For the OTOBO data model please refer to the files in your ``/doc`` directory. Alternatively you can look at the data model on `GitHub <https://github.com/RotherOSS/otobo/blob/rel-10_0/development/diagrams/Database/OTOBODatabaseDiagram.png>`__."
msgstr ""

#: ../../content/get-started/development-environment.rst:12
msgid "Development Environment"
msgstr ""

#: ../../content/get-started/development-environment.rst:14
msgid "To facilitate the writing of OTOBO expansion modules, the creation of a development environment is necessary. The source code of OTOBO and additional public modules can be found on `GitHub <http://github.com/RotherOSS>`__."
msgstr ""

#: ../../content/get-started/development-environment.rst:18
msgid "Obtain the Source Code"
msgstr ""

#: ../../content/get-started/development-environment.rst:20
msgid "First of all a directory must be created in which the modules can be stored. Then switch to the new directory using the command line and clone the Git repository by using the following command:"
msgstr ""

#: ../../content/get-started/development-environment.rst:26
msgid "For other versions like OTOBO 11.0.x:"
msgstr ""

#: ../../content/get-started/development-environment.rst:32
msgid "Please configure the OTOBO system according to the `installation instructions`_."
msgstr ""

#: ../../content/get-started/development-environment.rst:38
msgid "Useful Tools"
msgstr ""

#: ../../content/get-started/development-environment.rst:40
msgid "Clone the `module-tools <https://github.com/RotherOSS/module-tools>`__ module too, for your development environment. It contains a number of useful tools:"
msgstr ""

#: ../../content/get-started/development-environment.rst:46
msgid "`OTOBOCodePolicy <https://github.com/RotherOSS/CodePolicy>`__ is a code quality checker that enforces the use of common coding standards also for the OTOBO development team. It is highly recommended to use it if you plan to make contributions. You can use it as a standalone test script or even register it as a git commit hook that runs every time that you create a commit. Please see `the module documentation <https://github.com/RotherOSS/CodePolicy/blob/master/doc/en/CodePolicy.xml>`__ for details."
msgstr ""

#: ../../content/get-started/development-environment.rst:54
msgid "Linking Expansion Modules"
msgstr ""

#: ../../content/get-started/development-environment.rst:56
msgid "A clear separation between OTOBO and the modules is necessary for proper developing. Particularly when using a git clone, a clear separation is crucial. In order to facilitate the OTOBO access the files, links must be created. This is done by a script in the directory module tools repository."
msgstr ""

#: ../../content/get-started/development-environment.rst:58
msgid "Example: linking the *Calendar* module:"
msgstr ""

#: ../../content/get-started/development-environment.rst:64
msgid "Whenever new files are added, they must be linked as described above."
msgstr ""

#: ../../content/get-started/development-environment.rst:66
msgid "As soon as the linking is completed, the system configuration must be rebuilt to register the module in OTOBO. Additional SQL or Perl code from the module must also be executed."
msgstr ""

#: ../../content/get-started/development-environment.rst:76
msgid "To remove links from OTOBO enter the following command:"
msgstr ""

#: ../../content/get-started/development-environment.rst:84
msgid "Tipps and tricks"
msgstr ""

#: ../../content/get-started/development-environment.rst:87
msgid "Debug syntax errors in OTOBO Perl files"
msgstr ""

#: ../../content/get-started/development-environment.rst:89
msgid "Change to the OTOBO Homedirectory:"
msgstr ""

#: ../../content/get-started/development-environment.rst:97
msgid "After that execute the syntax check:"
msgstr ""

#: ../../content/history.rst:13
msgid "Documentation History"
msgstr ""

#: ../../content/history.rst:15
msgid "2019 - OTRS Development Guide - OTRS AG (https://otrs.com)"
msgstr ""

#: ../../content/history.rst:16
msgid "2020 - OTOBO Development Tutorial - Rother OSS GmbH (https://otobo.de)"
msgstr ""

#: ../../content/history.rst:18
msgid "Published by: Rother OSS GmbH, (https://otobo.de), Oberwalting 31, 94339 Leiblfing, Germany. Authors: OTRS AG (original version), Rother OSS GmbH (https://otobo.de)"
msgstr ""

#: ../../content/history.rst:21
msgid "Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license can be found on the `GNU website <https://www.gnu.org/licenses/fdl-1.3.txt>`__."
msgstr ""

#: ../../content/how-it-works.rst:12
msgid "OTOBO Internals - How it Works"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:12
msgid "Config Mechanism"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:14
msgid "OTOBO comes with a dedicated mechanism to manage configuration options via a graphical interface (system configuration). This section describes how it works internally and how you can provide new configuration options or change existing default values."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:19
msgid "``Defaults.pm``: OTOBO Default Configuration"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:21
msgid "The default configuration file of OTOBO is ``Kernel/Config/Defaults.pm``. This file is needed for operation of freshly installed systems without a deployed XML configuration and should be left untouched as it is automatically updated on framework updates."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:25
msgid "Automatically Generated Configuration Files"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:27
msgid "In ``Kernel/Config/Files`` you can find some automatically generated configuration files:"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:30
msgid "``ZZZAAuto.pm``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:30
msgid "Perl cache of the XML configuration's current values (default or modified by user)."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:33
msgid "``ZZZACL.pm``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:33
msgid "Perl cache of ACL configuration from database."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:36
msgid "``ZZZProcessManagement.pm``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:36
msgid "Perl cache of process management configuration from database."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:38
msgid "These files are a Perl representation of the current system configuration. They should never be manually changed as they are overwritten by OTOBO."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:42
msgid "XML Configuration Files"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:44
msgid "In OTOBO, configuration options that the administrator can configure via system configuration are provided via XML files with a special format. To convert old XML's you can use the following command:"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:50
msgid "The file ``Kernel/Config/Files/ZZZAAuto.pm`` is a cached Perl version of the XML that contains all settings with their current value. It can be (re-)generated with:"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:56
msgid "Each XML config file has the following layout:"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:74
msgid "``init``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:69
msgid "The global ``init`` attribute describes where the config options should be loaded. There are different levels available and will be loaded/overloaded in the following order:"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:71
msgid "``Framework`` (for framework settings e. g. session option)"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:72
msgid "``Application`` (for application settings e. g. ticket options)"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:73
msgid "``Config`` (for extensions to existing applications e. g. ITSM options)"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:74
msgid "``Changes`` (for custom development e. g. to overwrite framework or ticket options)."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:76
msgid "The configuration items are written as ``Setting`` elements with a ``Description``, a ``Navigation`` group (for the tree-based navigation in the GUI) and the ``Value`` that it represents. Here's an example:"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:90
msgid "``Required``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:90
msgid "If this is set to 1, the configuration setting cannot be disabled."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:93
msgid "``Valid``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:93
msgid "Determines if the config setting is active (1) or inactive (0) by default."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:97
msgid "``ConfigLevel``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:96
msgid "If the optional attribute ``ConfigLevel`` is set, the config variable might not be edited by the administrator, depending on his own config level. The config variable ``ConfigLevel`` sets the level of technical experience of the administrator. It can be *100 (Expert)*, *200 (Advanced)* or *300 (Beginner)*. As a guideline which config level should be given to an option, it is recommended that all options having to do with the configuration of external interaction, like Sendmail, LDAP, SOAP, and others should get a config level of at least *200 (Advanced)*."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:100
msgid "``Invisible``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:100
msgid "If set to 1, the config setting is not shown in the GUI."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:103
msgid "``ReadOnly``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:103
msgid "If set to 1, the config setting cannot be changed in the GUI."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:106
msgid "``UserModificationPossible``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:106
msgid "If ``UserModificationPossible`` is set to ``1``, administrators can enable user modifications of this setting (in user preferences)."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:109
msgid "``UserModificationActive``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:109
msgid "If ``UserModificationActive`` is set to ``1``, user modifications of this setting is enabled (in user preferences). You should use this attribute together with ``UserModificationPossible``."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:112
msgid "``UserPreferencesGroup``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:112
msgid "Use ``UserPreferencesGroup`` attribute to define under which group config variable belongs (in the ``UserPreferences`` screen). You should use this attribute together with ``UserModificationPossible``."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:114
msgid "Guidelines for placing settings in the right navigation nodes:"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:116
msgid "Only create new nodes if neccessary. Avoid nodes with only very few settings if possible."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:117
msgid "On the first tree level, no new nodes should be added."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:118
msgid "Don't place new settings in ``Core`` directly. This is reserved for a few important global settings."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:119
msgid "``Core::*`` can take new groups that contain settings that cover the same topic (like ``Core::Email``) or relate to the same entity (like ``Core::Queue``)."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:120
msgid "All event handler registrations go to ``Core::Event``."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:121
msgid "Don't add new direct child nodes within ``Frontend``. Global front end settings go to ``Frontend::Base``, settings only affecting a part of the system go to the respective ``Admin``, ``Agent``, ``Customer`` or ``Public`` sub nodes."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:122
msgid "Front end settings that only affect one screen should go to the relevant screen (``View``) node (create one if needed), for example ``AgentTicketZoom`` related settings go to ``Frontend::Agent::View::TicketZoom``. If there are module layers within one screen with groups of related settings, they would also go to a sub group here (e. g. ``Frontend::Agent::View::TicketZoom::MenuModule`` for all ticket zoom menu module registrations)."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:123
msgid "All global loader settings go to ``Frontend::Base::Loader``, screen specific loader settings to ``Frontend::*::ModuleRegistration::Loader``."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:127
msgid "Structure of ``Value`` elements"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:129
msgid "``Value`` elements hold the actual configuration data payload. They can contain single values, hashes or arrays."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:134
msgid "``Item``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:136
msgid "An ``Item`` element holds one piece of data. The optional ``ValueType`` attribute determines which kind of data and how it needs to be presented to the user in the GUI. If no ``ValueType`` is specified, it defaults to ``String``."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:138
msgid "Please see :ref:`Value Types` for a definition of the different value types."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:152
msgid "``Array``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:154
msgid "With this config element arrays can be displayed."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:171
msgid "``Hash``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:173
msgid "With this config element hashes can be displayed."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:189
msgid "It's possible to have nested array/hash elements (like hash of arrays, array of hashes, array of hashes of arrays, etc.). Below is an example array of hashes."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:220
msgid "Value Types"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:222
msgid "The XML config settings support various types of configuration variables."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:226
msgid "``String``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:238
msgid "A config element for numbers and single-line strings. Checking the validity with a regular expression is possible (optional). This is the default ``ValueType``."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:250
msgid "The optional ``Translatable`` attribute marks this setting as translatable, which will cause it to be included in the OTOBO translation files. This attribute can be placed on any tag (see also below)."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:254
msgid "``Password``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:256
msgid "A config element for passwords. It's still stored as plain text in the XML, but it's masked in the GUI."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:269
msgid "``PerlModule``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:271
msgid "A config element for Perl module. It has a ``ValueFilter`` attribute, which filters possible values for selection. In the example below, user can select Perl module ``Kernel::System::Log::SysLog`` or ``Kernel::System::Log::File``."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:284
msgid "``Textarea``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:286
msgid "A config element for multiline text."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:299
msgid "``Select``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:301
msgid "This config element offers preset values as a pull-down menu. The ``SelectedID`` or ``SelectedValue`` attributes can pre-select a default value."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:317
msgid "``Checkbox``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:319
msgid "This config element checkbox has two states: 0 or 1."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:332
msgid "``Date``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:334
msgid "This config element contains a date value."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:347
msgid "``DateTime``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:349
msgid "This config element contains a date and time value."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:362
msgid "``Directory``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:364
msgid "This config element contains a directory."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:377
msgid "``File``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:379
msgid "This config element contains a file path."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:392
msgid "``Entity``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:394
msgid "This config element contains a value of a particular entity. ``ValueEntityType`` attribute defines the entity type. Supported entities: ``DynamicField``, ``Queue``, ``Priority``, ``State`` and ``Type``. Consistency checks will ensure that only valid entities can be configured and that entities used in the configuration cannot be set to invalid. Also, when an entity is renamed, all referencing config settings will be updated."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:407
msgid "``TimeZone``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:409
msgid "This config element contains a time zone value."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:422
msgid "``VacationDays``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:424
msgid "This config element contains definitions for vacation days which are repeating each year. Following attributes are mandatory: ``ValueMonth``, ``ValueDay``."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:442
msgid "``VacationDaysOneTime``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:444
msgid "This config element contains definitions for vacation days which occur only once. Following attributes are mandatory: ``ValueMonth``, ``ValueDay`` and ``ValueYear``."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:459
msgid "``WorkingHours``"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:461
msgid "This config element contains definitions for working hours."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:483
msgid "Front End Registration"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:485
msgid "Module registration for agent interface:"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:512
msgid "Default Item in Array and Hash"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:514
msgid "The new XML structure allows us to create complex structures. Therefore we need ``DefaultItem`` entries to describe the structure of the array/hash. If it's not provided, system considers that you want simple array/hash with scalar values. ``DefaultItem`` is used as a template when adding new elements, so it can contain additional attributes, like ``ValueType``, and it can define default values."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:516
msgid "Here are few examples:"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:520
msgid "Array of Array with ``Select`` Items"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:538
msgid "Hash of Hash with ``Date`` Items"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:553
msgid "Accessing Config Options at Runtime"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:555
msgid "You can read and write (for one request) the config options via the core module ``Kernel::Config``."
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:557
msgid "If you want to read a config option:"
msgstr ""

#: ../../content/how-it-works/config-mechanism.rst:564
msgid "If you want to change a config option at runtime and just for this one request/process:"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:12
msgid "Database Mechanism"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:14
msgid "OTOBO comes with a database layer that provides access to different databases."
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:16
msgid "``Kernel::System::DB`` supports two ways of interacting with the database: *SQL* and *XML*."
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:19
msgid "SQL"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:21
msgid "The SQL interface should be used for normal database actions (``SELECT``, ``INSERT``, ``UPDATE``, etc.). It can be used more or less like the Perl DBI interface. One limitation is that only a single statement handle may be active per database object."
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:27
msgid "INSERT/UPDATE/DELETE statements"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:54
msgid "A special feature is the possibility to insert a timestamp that is generated on the client side. Using the client time avoids inconsistences with a divergent time on the database host."
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:68
msgid "SELECT statement"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:114
msgid "Take care to use ``Limit`` as param and not in the SQL string because not all databases support ``LIMIT`` in SQL strings."
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:118
msgid "Use the ``Bind`` attribute whereever you can, especially for long statements. If you use ``Bind`` you do not need the function ``Quote()``."
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:122
msgid "Beware that `SelectAll()` may not be used within a loop over the `FetchrowArray()` results."
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:125
msgid "QUOTE"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:127
msgid "String:"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:133
msgid "Integer:"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:139
msgid "Number:"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:147
msgid "Please use the ``Bind`` attribute instead of ``Quote()`` where ever you can."
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:150
msgid "XML"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:152
msgid "The XML interface should be used for ``INSERT``, ``CREATE TABLE``, ``DROP TABLE`` and ``ALTER TABLE``. As this syntax is different from database to database, using it makes sure that you write applications that can be used in all of them."
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:157
msgid "INSERT"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:168
msgid "CREATE TABLE"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:170
msgid "Possible data types are: ``BIGINT``, ``SMALLINT``, ``INTEGER``, ``VARCHAR`` (Size=1-1000000), ``DATE`` (format: yyyy-mm-dd hh:mm:ss) and ``LONGBLOB``."
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:193
msgid "``LONGBLOB`` columns need special treatment. Their content needs to be base64 transcoded if the database driver does not support the feature ``DirectBlob``. Please see the following example:"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:202
msgid "Similarly, when reading from such a column, the content must not automatically be decoded as UTF-8 by passing the ``Encode => 0`` flag to ``Prepare()``:"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:234
msgid "DROP TABLE"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:242
msgid "ALTER TABLE"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:244
msgid "The following shows an example of add, change and drop columns."
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:270
msgid "The next shows an example how to rename a table."
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:278
msgid "Code to Process XML"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:295
msgid "Database Drivers"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:297
msgid "The database drivers are located under ``$OTOBO_HOME/Kernel/System/DB/*.pm``."
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:301
msgid "Supported Databases"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:303
msgid "MySQL or MariaDB"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:304
msgid "PostgreSQL"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:305
msgid "Oracle"
msgstr ""

#: ../../content/how-it-works/database-mechanism.rst:306
msgid "Microsoft SQL Server (only for external database connections, not as OTOBO database)"
msgstr ""

#: ../../content/how-it-works/date-time.rst:12
msgid "Date and Time"
msgstr ""

#: ../../content/how-it-works/date-time.rst:14
msgid "OTOBO comes with its own package to handle date and time which ensures correct calculation and storage of date and time."
msgstr ""

#: ../../content/how-it-works/date-time.rst:18
msgid "Introduction"
msgstr ""

#: ../../content/how-it-works/date-time.rst:20
msgid "Date and time are represented by an object of ``Kernel::System::DateTime``. Every ``DateTime`` object holds its own date, time and time zone information. In contrast to the now deprecated ``Kernel::System::Time`` package, this means that you can and should create a ``DateTime`` object for every date/time you want to use."
msgstr ""

#: ../../content/how-it-works/date-time.rst:24
msgid "Creation of a ``DateTime`` Object"
msgstr ""

#: ../../content/how-it-works/date-time.rst:26
msgid "The object manager of OTOBO has been extended by a ``Create`` method to support packages for which more than one instance can be created:"
msgstr ""

#: ../../content/how-it-works/date-time.rst:37
msgid "The example above will create a ``DateTime`` object for the current date and time in time zone *Europe/Berlin*. There are more options to create a ``DateTime`` object (time components, string, timestamp, cloning), see POD of ``Kernel::System::DateTime``."
msgstr ""

#: ../../content/how-it-works/date-time.rst:41
msgid "You will get an error if you try to retrieve a ``DateTime`` object via ``$Kernel::OM->Get('Kernel::System::DateTime')``."
msgstr ""

#: ../../content/how-it-works/date-time.rst:45
msgid "Time Zones"
msgstr ""

#: ../../content/how-it-works/date-time.rst:47
msgid "Time offsets in hours (+2, -10, etc.) have been replaced by time zones (Europe/Berlin, America/New_York, etc.). The conversion between time zones is completely encapsulated within a ``DateTime`` object. If you want to convert to another time zone, simply use the following code:"
msgstr ""

#: ../../content/how-it-works/date-time.rst:53
msgid "There is a system configuration option ``OTOBOTimeZone``. This setting defines the time zone that OTOBO uses internally to store date and time within the database."
msgstr ""

#: ../../content/how-it-works/date-time.rst:57
msgid "You have to ensure to convert a ``DateTime`` object to the OTOBO time zone before it gets stored in the database (there's a convenient method for this: ``ToOTOBOTimeZone()``). An exception could be that you explicitly want a database column to hold a date/time in a specific time zone. But be aware that the database itself won't provide time zone information by itself when retrieving it."
msgstr ""

#: ../../content/how-it-works/date-time.rst:61
msgid "``TimeZoneList()`` of ``Kernel::System::DateTime`` provides a list of available time zones."
msgstr ""

#: ../../content/how-it-works/date-time.rst:65
msgid "Method Summary"
msgstr ""

#: ../../content/how-it-works/date-time.rst:67
msgid "The ``Kernel::System::DateTime`` package provides the following methods (this is only a selection, see source code for details)."
msgstr ""

#: ../../content/how-it-works/date-time.rst:71
msgid "Object Creation Methods"
msgstr ""

#: ../../content/how-it-works/date-time.rst:73
msgid "A ``DateTime`` object can be created either via the object manager's ``Create()`` method or by cloning another ``DateTime`` object with its ``Clone()`` method."
msgstr ""

#: ../../content/how-it-works/date-time.rst:77
msgid "Get Method"
msgstr ""

#: ../../content/how-it-works/date-time.rst:79
msgid "With ``Get()`` all data of a ``DateTime`` object will be returned as a hash (date and time components including day name, etc. as well as time zone)."
msgstr ""

#: ../../content/how-it-works/date-time.rst:83
msgid "Set Method"
msgstr ""

#: ../../content/how-it-works/date-time.rst:85
msgid "With ``Set()`` you can either change certain components of the ``DateTime`` object (year, month, day, hour, minute, second) or you can set a date and time based on a given string (*2016-05-24 23:04:12*). Note that you cannot change the time zone with this method."
msgstr ""

#: ../../content/how-it-works/date-time.rst:89
msgid "Time Zone Methods"
msgstr ""

#: ../../content/how-it-works/date-time.rst:91
msgid "To change the time zone of a ``DateTime`` object use method ``ToTimeZone()`` or as a shortcut for converting to OTOBO time zone ``ToOTOBOTimeZone()``."
msgstr ""

#: ../../content/how-it-works/date-time.rst:93
msgid "To retrieve the configured OTOBO time zone or user default time zone, always use method ``OTOBOTimeZoneGet()`` or ``UserDefaultTimeZoneGet()``. Never retrieve these manually via ``Kernel::Config``."
msgstr ""

#: ../../content/how-it-works/date-time.rst:97
msgid "Comparison Operators And Methods"
msgstr ""

#: ../../content/how-it-works/date-time.rst:99
msgid "``Kernel::System::DateTime`` uses operator overloading for comparisons. So you can simply compare two ``DateTime`` objects with <, <=, ==, !=, >= and >. ``Compare()`` is usable in Perl's sort context as it returns -1, 0 or 1."
msgstr ""

#: ../../content/how-it-works/date-time.rst:103
msgid "Deprecated Package ``Kernel::System::Time``"
msgstr ""

#: ../../content/how-it-works/date-time.rst:105
msgid "The now deprecated package ``Kernel::System::Time`` has been extended to fully support time zones instead of time offsets. This has been done to ensure that existing code works without (bigger) changes."
msgstr ""

#: ../../content/how-it-works/date-time.rst:107
msgid "However, there is a case in which you have to change existing code. If you have code that uses the old time offsets to calculate a new date/time or a difference, you have to migrate this code to use the new ``DateTime`` object."
msgstr ""

#: ../../content/how-it-works/date-time.rst:109
msgid "Example (old code):"
msgstr ""

#: ../../content/how-it-works/date-time.rst:119
msgid "Example (new code):"
msgstr ""

#: ../../content/how-it-works/loader.rst:12
msgid "The CSS and JavaScript Loader"
msgstr ""

#: ../../content/how-it-works/loader.rst:14
msgid "The CSS and JavaScript code in OTOBO grew to a large amount. To be able to satisfy both development concerns (good maintainability by a large number of separate files) and performance issues (making few HTTP requests and serving minified content without unnecessary whitespace and documentation) had to be addressed. To achieve these goals, the loader was invented."
msgstr ""

#: ../../content/how-it-works/loader.rst:18
msgid "How it works"
msgstr ""

#: ../../content/how-it-works/loader.rst:20
msgid "To put it simple, the loader:"
msgstr ""

#: ../../content/how-it-works/loader.rst:22
msgid "determines for each request precisely which CSS and JavaScript files are needed at the client side by the current application module"
msgstr ""

#: ../../content/how-it-works/loader.rst:23
msgid "collects all the relevant data"
msgstr ""

#: ../../content/how-it-works/loader.rst:24
msgid "minifies the data, removing unnecessary whitespace and documentation"
msgstr ""

#: ../../content/how-it-works/loader.rst:25
msgid "serves it to the client in only a few HTTP requests instead of many individual ones, allowing the client to cache these snippets in the browser cache"
msgstr ""

#: ../../content/how-it-works/loader.rst:26
msgid "performs these tasks in a highly performing way, utilizing the caching mechanisms of OTOBO"
msgstr ""

#: ../../content/how-it-works/loader.rst:28
msgid "Of course, there is a little bit more detailed involved, but this should suffice as a first overview."
msgstr ""

#: ../../content/how-it-works/loader.rst:32
msgid "Basic Operation"
msgstr ""

#: ../../content/how-it-works/loader.rst:34
msgid "With the configuration settings ``Loader::Enabled::CSS`` and ``Loader::Enabled::JavaScript``, the loader can be turned on and off for CSS and JavaScript, respectively (it is on by default)."
msgstr ""

#: ../../content/how-it-works/loader.rst:36
msgid "To learn about how the loader works, please turn it off in your OTOBO installation with the aforementioned configuration settings. Now look at the source code of the application module that you are currently using in this OTOBO system (after a reload, of course). You will see that there are many CSS files loaded in the ``<head>`` section of the page, and many JavaScript files at the bottom of the page, just before the closing ``</body>`` element."
msgstr ""

#: ../../content/how-it-works/loader.rst:38
msgid "Having the content like this in many individual files with a readable formatting makes the development much easier, and even possible at all. However, this has the disadvantage of a large number of HTTP requests (network latency has a big effect) and unnecessary content (whitespace and documentation) which needs to be transferred to the client."
msgstr ""

#: ../../content/how-it-works/loader.rst:40
msgid "The loader solves this problem by performing the steps outlined in the short description above. Please turn on the Loader again and reload your page now. Now you can see that there are only very few CSS and JavaScript tags in the HTML code, like this:"
msgstr ""

#: ../../content/how-it-works/loader.rst:48
msgid "What just happened? During the original request generating the HTML code for this page, the Loader generated these two files (or took them from the cache) and put the shown ``<script>`` tags on the page which link to these files, instead of linking to all relevant JavaScript files separately (as you saw it without the loader being active)."
msgstr ""

#: ../../content/how-it-works/loader.rst:50
msgid "The CSS section looks a little more complicated:"
msgstr ""

#: ../../content/how-it-works/loader.rst:64
msgid "The reason is that Internet Explorer 7 and 8 need special treatment in addition to the default CSS because of their lacking support of web standard technologies. So we have some normal CSS that is loaded in all browsers, and some special CSS that is inside of so-called *conditional comments* which cause it to be loaded **only** by Internet Explorer 7/8. All other browsers will ignore it."
msgstr ""

#: ../../content/how-it-works/loader.rst:66
msgid "Now we have outlined how the loader works. Let's look at how you can utilize that in your own OTOBO extensions by adding configuration data to the loader, telling it to load additional or alternative CSS or JavaScript content."
msgstr ""

#: ../../content/how-it-works/loader.rst:70
msgid "Configuring the Loader: JavaScript"
msgstr ""

#: ../../content/how-it-works/loader.rst:72
msgid "To be able to operate correctly, the loader needs to know which content it has to load for a particular OTOBO application module. First, it will look for JavaScript files which *always* have to be loaded, and then it looks for special files which are only relevant for the current application module."
msgstr ""

#: ../../content/how-it-works/loader.rst:76
msgid "Common JavaScript"
msgstr ""

#: ../../content/how-it-works/loader.rst:78
msgid "The list of JavaScript files to be loaded is configured in the configuration settings ``Loader::Agent::CommonJS`` (for the agent interface) and ``Loader::Customer::CommonJS`` (for the customer interface)."
msgstr ""

#: ../../content/how-it-works/loader.rst:80
msgid "These settings are designed as hashes, so that OTOBO extensions can add their own hash keys for additional content to be loaded. Let's look at an example:"
msgstr ""

#: ../../content/how-it-works/loader.rst:101
msgid "This is the list of JavaScript files which always need to be loaded for the agent interface of OTOBO."
msgstr ""

#: ../../content/how-it-works/loader.rst:103
msgid "To add new content which is supposed to be loaded always in the agent interface, just add an XML configuration file with another hash entry:"
msgstr ""

#: ../../content/how-it-works/loader.rst:117
msgid "Simple, isn't it?"
msgstr ""

#: ../../content/how-it-works/loader.rst:121
msgid "Module Specific JavaScript"
msgstr ""

#: ../../content/how-it-works/loader.rst:123
msgid "Not all JavaScript is usable for all application modules of OTOBO. Therefore it is possible to specify module specific JavaScript files. Whenever a certain module is used (such as ``AgentDashboard``), the module specific JavaScript for this module will also be loaded. The configuration is done in the front end module registration in the XML configurations. Again, an example:"
msgstr ""

#: ../../content/how-it-works/loader.rst:156
msgid "It is possible to put a ``<Item Key=\"JavaScript\">`` tag in the front end module registrations which may contain ``<Array>`` and one tag ``<Item>`` for each JavaScript file that is supposed to be loaded for this application module."
msgstr ""

#: ../../content/how-it-works/loader.rst:159
msgid "Now you have all information you need to configure the way the loader handles JavaScript code."
msgstr ""

#: ../../content/how-it-works/loader.rst:163
msgid "Configuring the Loader: CSS"
msgstr ""

#: ../../content/how-it-works/loader.rst:165
msgid "The loader handles CSS files very similar to JavaScript files, as described in the previous section, and extending the settings works in the same way too."
msgstr ""

#: ../../content/how-it-works/loader.rst:170
msgid "Common CSS"
msgstr ""

#: ../../content/how-it-works/loader.rst:172
msgid "The way common CSS is handled is very similar to the way :ref:`Common JavaScript` is loaded."
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:12
msgid "Log Mechanism"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:15
msgid "System Log"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:17
msgid "OTOBO comes with a system log back end that can be used for application logging and debugging."
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:19
msgid "The ``Log`` object can be accessed and used via the object manager like this:"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:28
msgid "Depending on the configured log level via ``MinimumLogLevel`` option in system configuration, logged message will either be saved or not, based on their ``Priority`` flag."
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:30
msgid "If ``error`` is set, just errors are logged. With ``debug``, you get all logging messages. The order of log levels is:"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:32
msgid "``debug``"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:33
msgid "``info``"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:34
msgid "``notice``"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:35
msgid "``error``"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:37
msgid "The output of the system log can be directed to either a syslog daemon or log file, depending on the configured ``LogModule`` option in system configuration."
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:41
msgid "Communication Log"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:43
msgid "In addition to system log, OTOBO provides specialized logging back end for any communication related logging. The system comes with dedicated tables and front ends to track and display communication logs for easier debugging and operational overview."
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:45
msgid "To take advantage of the new system, first create a non-singleton instance of communication log object:"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:59
msgid "When you have a communication log object instance, you can start an object log for logging individual messages. There are two object logs currently implemented: ``Connection`` and ``Message``."
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:61
msgid "``Connection`` object log should be used for logging any connection related messages (for example: authenticating on server or retrieving incoming messages)."
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:63
msgid "Simply, start the object log by declaring its type, and you can use it immediately:"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:78
msgid "The communication log object instance handles the current started object logs, so you don't need to remember and bring them around everywhere, but it also means that you can only start one object per type."
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:80
msgid "If you encounter an unrecoverable error, you can choose to close the object log and mark it as failed:"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:96
msgid "In turn, you can mark the communication log as failure as well:"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:104
msgid "Otherwise, stop the object log and in turn communication log as success:"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:124
msgid "``Message`` object log should be used for any log entries regarding specific messages and their processing. It is used in a similar way, just make sure to start it before using it:"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:148
msgid "You also have the possibility to link the log object and later lookup the communications for a certain object type and ID:"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:163
msgid "You should make sure to always stop communication and flag it as failed, if any log object failed as well. This will allow administrators to see failed communications in the overview, and take any action if needed."
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:165
msgid "It's important to preserve the communication log for duration of a single process. If your work is spanning over multiple modules and any of them can benefit from logging, make sure to pass the existing communication log instance around so all methods can use the same one. With this approach, you will make sure any log entries spawned for the same process are contained in a single communication."
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:167
msgid "If passing the communication log instance is not an option (async tasks!), you can also choose to recreate the communication log object in the same state as in previous step. Just get the communication ID and pass it to the new code, and then create the instance with this parameter supplied:"
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:185
msgid "You can then continue to use this instance as previously stated, start any object logs if needed, adding entries and setting status in the end."
msgstr ""

#: ../../content/how-it-works/log-mechanism.rst:187
msgid "If you need to retrieve the communication log data or do something else with it, please also take a look at ``Kernel::System::CommunicationLog::DB.pm``."
msgstr ""

#: ../../content/how-it-works/skins.rst:12
msgid "Skins"
msgstr ""

#: ../../content/how-it-works/skins.rst:14
msgid "The visual appearance of OTOBO is controlled by *skins*."
msgstr ""

#: ../../content/how-it-works/skins.rst:16
msgid "A skin is a set of CSS and image files, which together control how the GUI is presented to the user. Skins do not change the HTML content that is generated by OTOBO (this is what *themes* do), but they control how it is displayed. With the help of modern CSS standards it is possible to change the display thoroughly (e.g. repositioning parts of dialogs, hiding elements, etc.)."
msgstr ""

#: ../../content/how-it-works/skins.rst:20
msgid "Skin Basics"
msgstr ""

#: ../../content/how-it-works/skins.rst:22
msgid "All skins are in ``$OTOBO_HOME/var/httpd/htdocs/skins/Agent/$SKIN_NAME``."
msgstr ""

#: ../../content/how-it-works/skins.rst:24
msgid "Each of the agents can select individually, which of the installed agent skins they want to *wear*."
msgstr ""

#: ../../content/how-it-works/skins.rst:27
msgid "How Skins Are Loaded"
msgstr ""

#: ../../content/how-it-works/skins.rst:29
msgid "It is important to note that the ``default`` skin will **always** be loaded **first**. If the agent selected another skin than the default one, the other one will be loaded only **after** the default skin. By loading here we mean that OTOBO will put tags into the HTML content which cause the CSS files to be loaded by the browser. Let's see an example of this:"
msgstr ""

#: ../../content/how-it-works/skins.rst:36
msgid "Here it can clearly be seen that the ``default`` skin is loaded first, and then the custom skin specified by the agent. In this example, we see the result of the activated loader (``Loader::Enabled`` set to 1), which gathers all CSS files, concatenates and minifies them and serves them as one chunk to the browser. This saves bandwidth and also reduces the number of HTTP requests. Let's see the same example with the loader turned off:"
msgstr ""

#: ../../content/how-it-works/skins.rst:63
msgid "Here we can better see the individual files that come from the skins."
msgstr ""

#: ../../content/how-it-works/skins.rst:65
msgid "There are different types of CSS files: common files which must always be loaded, and module-specific files which are only loaded for special modules within the OTOBO framework."
msgstr ""

#: ../../content/how-it-works/skins.rst:67
msgid "In addition, it is possible to specify CSS files which only must be loaded on IE7 or IE8 (in the case of the customer interface, also IE6). This is unfortunate, but it was not possible to develop a modern GUI on these browsers without having special CSS for them."
msgstr ""

#: ../../content/how-it-works/skins.rst:69
msgid "For details regarding the CSS file types, please see the :doc:`loader` section."
msgstr ""

#: ../../content/how-it-works/skins.rst:71
msgid "For each HTML page generation, the loader will first take all configured CSS files from the ``default`` skin, and then for each file look if it is also available in a custom skin (if a custom skin is selected) and load them after the default files."
msgstr ""

#: ../../content/how-it-works/skins.rst:73
msgid "That means a) that CSS files in custom skins need to have the same names as in the default skins, and b) that a custom skin does not need to have all files of the default skin. That is the big advantage of loading the default skin first: a custom skin has all default CSS rules present and only needs to change those which should result in a different display. That can often be done in a single file, like in the example above."
msgstr ""

#: ../../content/how-it-works/skins.rst:75
msgid "Another effect of this is that you need to be careful to overwrite all default CSS rules in your custom skins that you want to change. Let's see an example:"
msgstr ""

#: ../../content/how-it-works/skins.rst:84
msgid "This defines special headings inside of the ``.Header`` element as bold, black text. Now if you want to change that in your skin to another color and normal text, it is not enough to write this:"
msgstr ""

#: ../../content/how-it-works/skins.rst:92
msgid "Because the original rule for ``font-weight`` still applies. You need to override it explicitly:"
msgstr ""

#: ../../content/how-it-works/skins.rst:102
msgid "Creating a New Skin"
msgstr ""

#: ../../content/how-it-works/skins.rst:104
msgid "In this section, we will be creating a new agent skin which replaces the default OTOBO background color (white) with a custom company color (light grey) and the default logo by a custom one. Also we will configure that skin to be the one which all agents will see by default."
msgstr ""

#: ../../content/how-it-works/skins.rst:106
msgid "There are only three simple steps we need to take to achieve this goal:"
msgstr ""

#: ../../content/how-it-works/skins.rst:108
msgid "create the skin files"
msgstr ""

#: ../../content/how-it-works/skins.rst:109
msgid "configure the new logo and"
msgstr ""

#: ../../content/how-it-works/skins.rst:110
msgid "make the skin known to the OTOBO system"
msgstr ""

#: ../../content/how-it-works/skins.rst:112
msgid "Let's start by creating the files needed for our new skin. First of all, we need to create a new folder for this skin (we'll call it ``custom``). This folder will be ``$OTOBO_HOME/var/httpd/htdocs/skins/Agent/custom``."
msgstr ""

#: ../../content/how-it-works/skins.rst:114
msgid "In there, we need to place the new CSS file in a new directory ``css`` which defines the new skin's appearance. We'll call it ``Core.Default.css``. Remember that it must have the same name as one of the files in the default skin. This is the code needed for the CSS file:"
msgstr ""

#: ../../content/how-it-works/skins.rst:122
msgid "Now follows the second step, adding a new logo and making the new skin known to the OTOBO system. For this, we first need to place our custom logo (e.g. ``logo.png``) in a new directory (e.g. ``img``) in our skin directory. Then we need to create a new configuration file ``$OTOBO_HOME/Kernel/Config/Files/XML/CustomSkin.xml``, which will contain the needed settings as follows:"
msgstr ""

#: ../../content/how-it-works/skins.rst:156
msgid "To make this configuration active, we need to navigate to the system configuration module in the admin area of OTOBO. Alternatively, you can run the script:"
msgstr ""

#: ../../content/how-it-works/skins.rst:162
msgid "This will regenerate the Perl cache of the XML configuration files, so that our new skin is now known and can be selected in the system. To make it the default skin that new agents see before they made their own skin selection, edit the system configuration setting ``Loader::Agent::DefaultSelectedSkin`` and set it to *custom*."
msgstr ""

#: ../../content/how-it-works/skins.rst:164
msgid "In conclusion: to create a new skin in OTOBO, we had to place the new logo file, and create one CSS and one XML file, resulting in three new files:"
msgstr ""

#: ../../content/how-it-works/templates.rst:12
msgid "Templating Mechanism"
msgstr ""

#: ../../content/how-it-works/templates.rst:14
msgid "Internally, OTOBO uses a templating mechanism to dynamically generate its HTML pages (and other content), while keeping the program logic (Perl) and the presentation (HTML) separate. Typically, a front end module will use an own template file, pass some data to it and return the rendered result to the user."
msgstr ""

#: ../../content/how-it-works/templates.rst:16
msgid "The template files are located at ``$OTOBO_HOME/Kernel/Output/HTML/Standard/*.tt``."
msgstr ""

#: ../../content/how-it-works/templates.rst:18
msgid "OTOBO relies on `the Template::Toolkit rendering engine <http://www.template-toolkit.org/>`__. The full Template::Toolkit syntax can be used in OTOBO templates. This section describes some example use cases and OTOBO extensions to the Template::Toolkit syntax."
msgstr ""

#: ../../content/how-it-works/templates.rst:22
msgid "Template Commands"
msgstr ""

#: ../../content/how-it-works/templates.rst:25
msgid "Inserting Dynamic Data"
msgstr ""

#: ../../content/how-it-works/templates.rst:27
msgid "In templates, dynamic data must be inserted, quoted etc. This section lists the relevant commands to do that."
msgstr ""

#: ../../content/how-it-works/templates.rst:31
msgid "``[% Data.Name %]``"
msgstr ""

#: ../../content/how-it-works/templates.rst:33
msgid "If data parameters are given to the templates by the application module, these data can be output to the template. ``[% Data.Name %]`` is the most simple, but also most dangerous one. It will insert the data parameter whose name is ``Name`` into the template as it is, without further processing."
msgstr ""

#: ../../content/how-it-works/templates.rst:37
#: ../../content/how-it-works/templates.rst:117
msgid "Because of the missing HTML quoting, this can result in security problems. Never output data that was input by a user without quoting in HTML context. The user could - for example - just insert a ``<script>`` tag, and it would be output on the HTML page generated by OTOBO."
msgstr ""

#: ../../content/how-it-works/templates.rst:39
msgid "Whenever possible, use ``[% Data.Name | html %]`` (in HTML) or ``[% Data.Name | uri %]`` (in links) instead."
msgstr ""

#: ../../content/how-it-works/templates.rst:41
msgid "Example: Whenever we generate HTML in the application, we need to output it to the template without HTML quoting, like ``<select>`` elements, which are generated by the function ``Layout::BuildSelection()`` in OTOBO."
msgstr ""

#: ../../content/how-it-works/templates.rst:48
msgid "If you have data entries with complex names containing special characters, you cannot use the dot (``.``) notation to access this data. Use ``item()`` instead: ``[% Data.item('Complex-name') %]``."
msgstr ""

#: ../../content/how-it-works/templates.rst:52
msgid "``[% Data.Name | html %]``"
msgstr ""

#: ../../content/how-it-works/templates.rst:54
msgid "This command has the same function as the previous one, but it performs HTML quoting on the data as it is inserted to the template."
msgstr ""

#: ../../content/how-it-works/templates.rst:60
msgid "It's also possible specify a maximum length for the value. If, for example, you just want to show 8 characters of a variable (result will be *SomeName[...]*), use the following:"
msgstr ""

#: ../../content/how-it-works/templates.rst:68
msgid "``[% Data.Name | uri %]``"
msgstr ""

#: ../../content/how-it-works/templates.rst:70
msgid "This command performs `URL encoding <http://en.wikipedia.org/wiki/Percent-encoding>`__ on the data as it is inserted to the template. This should be used to output single parameter names or values of URLs, to prevent security problems. It cannot be used for complete URLs because it will also mask ``=``, for example."
msgstr ""

#: ../../content/how-it-works/templates.rst:79
msgid "``[% Data.Name | JSON %]``"
msgstr ""

#: ../../content/how-it-works/templates.rst:81
msgid "This command outputs a string or another data structure as a JavaScript JSON string."
msgstr ""

#: ../../content/how-it-works/templates.rst:87
msgid "Please note that the filter notation will only work for simple strings. To output complex data as JSON, please use it as a function:"
msgstr ""

#: ../../content/how-it-works/templates.rst:95
msgid "``[% Env() %]``"
msgstr ""

#: ../../content/how-it-works/templates.rst:97
msgid "Inserts environment variables provided by the ``LayoutObject``. Some examples:"
msgstr ""

#: ../../content/how-it-works/templates.rst:103
msgid "Some other common predefined variables are:"
msgstr ""

#: ../../content/how-it-works/templates.rst:105
msgid "``[% Env(\"Action\") %]``: the current action"
msgstr ""

#: ../../content/how-it-works/templates.rst:106
msgid "``[% Env(\"Baselink\") %]``: the baselink, e. g. ``index.pl?SessionID=...``"
msgstr ""

#: ../../content/how-it-works/templates.rst:107
msgid "``[% Env(\"CGIHandle\") %]``: the current CGI handle e. g. ``index.pl``"
msgstr ""

#: ../../content/how-it-works/templates.rst:108
msgid "``[% Env(\"SessionID\") %]``: the current session id"
msgstr ""

#: ../../content/how-it-works/templates.rst:109
msgid "``[% Env(\"Time\") %]``: the current time e. g. *Thu Dec 27 16:00:55 2001*"
msgstr ""

#: ../../content/how-it-works/templates.rst:110
msgid "``[% Env(\"UserFullname\") %]``: e. g. Dirk Seiffert"
msgstr ""

#: ../../content/how-it-works/templates.rst:111
msgid "``[% Env(\"UserIsGroup[admin]\") %]``: Yes"
msgstr ""

#: ../../content/how-it-works/templates.rst:112
msgid "``[% Env(\"UserIsGroup[users]\") %]``: Yes, user groups (useful for own links)"
msgstr ""

#: ../../content/how-it-works/templates.rst:113
msgid "``[% Env(\"UserLogin\") %]``: e. g. mgg@x11.org"
msgstr ""

#: ../../content/how-it-works/templates.rst:119
#: ../../content/how-it-works/templates.rst:149
msgid "Don't forget to add the ``| html`` filter where appropriate."
msgstr ""

#: ../../content/how-it-works/templates.rst:123
msgid "``[% Config() %]``"
msgstr ""

#: ../../content/how-it-works/templates.rst:125
msgid "Inserts configuration variables into the template. Let's see an example ``Kernel/Config.pm``:"
msgstr ""

#: ../../content/how-it-works/templates.rst:138
msgid "To output values from it in the template, use:"
msgstr ""

#: ../../content/how-it-works/templates.rst:147
msgid "Because of the missing HTML quoting, this can result in security problems."
msgstr ""

#: ../../content/how-it-works/templates.rst:153
msgid "Localization Commands"
msgstr ""

#: ../../content/how-it-works/templates.rst:157
msgid "``[% Translate() %]``"
msgstr ""

#: ../../content/how-it-works/templates.rst:159
msgid "Translates a string into the current user's selected language. If no translation is found, the original string will be used."
msgstr ""

#: ../../content/how-it-works/templates.rst:165
msgid "You can also translate dynamic data by using ``Translate`` as a filter:"
msgstr ""

#: ../../content/how-it-works/templates.rst:171
msgid "You can also specify one or more parameters (``%s``) inside of the string which should be replaced with dynamic data:"
msgstr ""

#: ../../content/how-it-works/templates.rst:177
msgid "Strings in JavaScript can be translated and processed with the JSON filter."
msgstr ""

#: ../../content/how-it-works/templates.rst:185
msgid "``[% Localize() %]``"
msgstr ""

#: ../../content/how-it-works/templates.rst:187
msgid "Outputs data according to the current language/locale."
msgstr ""

#: ../../content/how-it-works/templates.rst:189
msgid "In different cultural areas, different convention for date and time formatting are used. For example, what is the 01.02.2010 in Germany, would be 02/01/2010 in the USA. ``[% Localize() %]`` abstracts this away from the templates. Let's see an example:"
msgstr ""

#: ../../content/how-it-works/templates.rst:197
msgid "First, the data is inserted from the application module with ``Data``. Here always an ISO UTC timestamp (2010-06-09 15:45:41) must be passed as data to ``[% Localize() %]``. Then it will be output it according to the date/time definition of the current locale."
msgstr ""

#: ../../content/how-it-works/templates.rst:199
msgid "The data passed to ``[% Localize() %]`` must be UTC. If a time zone offset is specified for the current agent, it will be applied to the UTC timestamp before the output is generated."
msgstr ""

#: ../../content/how-it-works/templates.rst:201
msgid "There are different possible date/time output formats: ``TimeLong`` (full date/time), ``TimeShort`` (no seconds) and ``Date`` (no time)."
msgstr ""

#: ../../content/how-it-works/templates.rst:217
msgid "Also the output of human readable file sizes is available as an option ``Localize('Filesize')`` (just pass the raw file size in bytes)."
msgstr ""

#: ../../content/how-it-works/templates.rst:227
msgid "``[% ReplacePlaceholders() %]``"
msgstr ""

#: ../../content/how-it-works/templates.rst:229
msgid "Replaces placeholders (``%s``) in strings with passed parameters."
msgstr ""

#: ../../content/how-it-works/templates.rst:231
msgid "In certain cases, you might want to insert HTML code in translations, instead of placeholders. On the other hand, you also need to take care of sanitization, since translated strings should not be trusted as-is. For this, you can first translate the string, pass it through the HTML filter and finally replace placeholders with static (safe) HTML code."
msgstr ""

#: ../../content/how-it-works/templates.rst:237
msgid "Number of parameters to ``ReplacePlaceholders()`` filter should match number of placeholders in the original string."
msgstr ""

#: ../../content/how-it-works/templates.rst:239
msgid "You can also use ``[% ReplacePlaceholders() %]`` in function format, in case you are not translating anything. In this case, first parameter is the target string, and any found placeholders in it are substituted with subsequent parameters."
msgstr ""

#: ../../content/how-it-works/templates.rst:247
msgid "Template Processing Commands"
msgstr ""

#: ../../content/how-it-works/templates.rst:251
msgid "Comment"
msgstr ""

#: ../../content/how-it-works/templates.rst:253
msgid "Lines starting with a # at the beginning of will not be shown in the html output. This can be used both for commenting the Template code or for disabling parts of it."
msgstr ""

#: ../../content/how-it-works/templates.rst:264
msgid "``[% InsertTemplate(\"Copyright.tt\") %]``"
msgstr ""

#: ../../content/how-it-works/templates.rst:268
msgid "Please note that the ``InsertTemplate`` command was added to provide better backwards compatibility to the old DTL system. It might be deprecated in a future version of OTOBO and removed later. If you don't use block commands in your included template, you don't need ``InsertTemplate`` and can use standard Template::Toolkit syntax like ``INCLUDE/PROCESS`` instead."
msgstr ""

#: ../../content/how-it-works/templates.rst:270
msgid "Includes another template file into the current one. The included file may also contain template commands."
msgstr ""

#: ../../content/how-it-works/templates.rst:277
msgid "Please note this is not the same as Template::Toolkit's ``[% INCLUDE %]`` command, which just processes the referenced template. ``[% InsertTemplate() %]`` actually adds the content of the referenced template into the current template, so that it can be processed together. That makes it possible for the embedded template to access the same environment/data as the main template."
msgstr ""

#: ../../content/how-it-works/templates.rst:281
msgid "``[% RenderBlockStart %]`` / ``[% RenderBlockEnd %]``"
msgstr ""

#: ../../content/how-it-works/templates.rst:285
msgid "Please note that the blocks commands were added to provide better backwards compatibility to the old DTL system. They might be deprecated in a future version of OTOBO and removed later. We advise you to develop any new code without using the blocks commands. You can use standard Template::Toolkit syntax like ``IF/ELSE``, ``LOOP`` and other helpful things for conditional template output."
msgstr ""

#: ../../content/how-it-works/templates.rst:287
msgid "With this command, one can specify parts of a template file as a block. This block needs to be explicitly filled with a function call from the application, to be present in the generated output. The application can call the block 0 (it will not be present in the output), 1 or more times (each with possibly a different set of data parameters passed to the template)."
msgstr ""

#: ../../content/how-it-works/templates.rst:289
msgid "One common use case is the filling of a table with dynamic data:"
msgstr ""

#: ../../content/how-it-works/templates.rst:326
msgid "The surrounding table with the header is always generated. If no data was found, the block ``NoDataFoundMsg`` is called once, resulting in a table with one data row with the message *No data found*."
msgstr ""

#: ../../content/how-it-works/templates.rst:328
msgid "If data was found, for each row there is one function call made for the block ``OverViewResultRow`` (each time passing in the data for this particular row), resulting in a table with as many data rows as results were found."
msgstr ""

#: ../../content/how-it-works/templates.rst:330
msgid "Let's look at how the blocks are called from the application module:"
msgstr ""

#: ../../content/how-it-works/templates.rst:365
msgid "Note how the blocks have both their name and an optional set of data passed in as separate parameters to the block function call. Data inserting commands inside a block always need the data provided to the block function call of this block, not the general template rendering call."
msgstr ""

#: ../../content/how-it-works/templates.rst:367
msgid "For more information see the `Documentation Portal <https://doc.otobo.de/>`__."
msgstr ""

#: ../../content/how-it-works/templates.rst:371
msgid "``[% WRAPPER JSOnDocumentComplete %]...[% END %]``"
msgstr ""

#: ../../content/how-it-works/templates.rst:373
msgid "Marks JavaScript code which should be executed after all CSS, JavaScript and other external content has been loaded and the basic JavaScript initialization was finished. Again, let's look at an example:"
msgstr ""

#: ../../content/how-it-works/templates.rst:402
msgid "This snippet creates a small form and puts an ``onchange`` handler on the ``<select>`` element which triggers an AJAX based form update."
msgstr ""

#: ../../content/how-it-works/templates.rst:404
msgid "Why is it necessary to enclose the JavaScript code in ``[% WRAPPER JSOnDocumentComplete %]...[% END %]``? JavaScript loading was moved to the footer part of the page for performance reasons. This means that within the ``<body>`` of the page, no JavaScript libraries are loaded yet. With ``[% WRAPPER JSOnDocumentComplete %]...[% END %]`` you can make sure that this JavaScript is moved to a part of the final HTML document, where it will be executed only after the entire external JavaScript and CSS content has been successfully loaded and initialized."
msgstr ""

#: ../../content/how-it-works/templates.rst:406
msgid "Inside the ``[% WRAPPER JSOnDocumentComplete %]...[% END %]`` block, you can use ``<script>`` tags to enclose your JavaScript code, but you do not have to do so. It may be beneficial because it will enable correct syntax highlighting in IDEs which support it."
msgstr ""

#: ../../content/how-it-works/templates.rst:410
msgid "Using a Template File"
msgstr ""

#: ../../content/how-it-works/templates.rst:412
msgid "Ok, but how to actually process a template file and generate the result? This is really simple:"
msgstr ""

#: ../../content/how-it-works/templates.rst:422
msgid "In the front end modules, the ``Output()`` function of ``Kernel::Output::HTML::Layout`` is called (after all the needed blocks have been called in this template) to generate the final output. An optional set of data parameters is passed to the template, for all data inserting commands which are not inside of a block."
msgstr ""

#: ../../content/how-it-works/themes.rst:12
msgid "Creating Your Own Themes"
msgstr ""

#: ../../content/how-it-works/themes.rst:14
msgid "You can create your own themes so as to use the layout you like in the OTOBO web front end. To create custom themes, you should customize the output templates to your needs. More information on the syntax and structure of output templates can be found in the :doc:`templates`."
msgstr ""

#: ../../content/how-it-works/themes.rst:16
msgid "As an example, perform the following steps to create a new theme called *Company*:"
msgstr ""

#: ../../content/how-it-works/themes.rst:18
msgid "Create a directory called ``Kernel/Output/HTML/Templates/Company`` and copy all files that you like to change from ``Kernel/Output/HTML/Templates/Standard`` into the new folder."
msgstr ""

#: ../../content/how-it-works/themes.rst:22
msgid "Only copy over the files you're planning to change. OTOBO will automatically get the missing files from the Standard theme. This will make upgrading at a later stage much easier."
msgstr ""

#: ../../content/how-it-works/themes.rst:24
msgid "Customize the files in the directory ``Kernel/Output/HTML/Templates/Company`` and change the layout to your needs."
msgstr ""

#: ../../content/how-it-works/themes.rst:25
msgid "To activate the new theme, add them in system configuration under ``Frontend::Themes``."
msgstr ""

#: ../../content/how-it-works/themes.rst:27
msgid "Now the new theme should be usable. You can select it via your personal preferences."
msgstr ""

#: ../../content/how-it-works/themes.rst:31
msgid "Do not change the theme files shipped with OTOBO, since these changes will be lost after an update. Create your own themes only by performing the steps described above."
msgstr ""

#: ../../content/how-it-works/translations.rst:12
msgid "Localization / Translation Mechanism"
msgstr ""

#: ../../content/how-it-works/translations.rst:14
msgid "There are four steps needed to translate / localize software:"
msgstr ""

#: ../../content/how-it-works/translations.rst:16
msgid "marking localizable strings in the source files"
msgstr ""

#: ../../content/how-it-works/translations.rst:17
msgid "generating the translation database/file"
msgstr ""

#: ../../content/how-it-works/translations.rst:18
msgid "the translation process itself"
msgstr ""

#: ../../content/how-it-works/translations.rst:19
msgid "the usage of translated content within the code"
msgstr ""

#: ../../content/how-it-works/translations.rst:22
msgid "Marking Translatable Strings in the Source Files"
msgstr ""

#: ../../content/how-it-works/translations.rst:24
msgid "In Perl code, all literal strings to be translated are automatically marked for translation:"
msgstr ""

#: ../../content/how-it-works/translations.rst:30
msgid "This will mark *My string %s* for translation. If you need to mark strings, but **not** translate them in the code yet, you can use the NOOP method ``Kernel::Langauge::Translatable()``."
msgstr ""

#: ../../content/how-it-works/translations.rst:45
msgid "In template files, all literal strings enclosed in the ``Translate()`` tag are automatically marked for extraction: ``[% Translate('My string %s', Data.Data )%]``."
msgstr ""

#: ../../content/how-it-works/translations.rst:48
msgid "In system configuration and database XML files you can mark strings for extraction with the ``Translatable=\"1\"`` attribute."
msgstr ""

#: ../../content/how-it-works/translations.rst:68
msgid "In YAML text, you can mark strings for translation by appending ``# Translatable`` to the end of the target string."
msgstr ""

#: ../../content/how-it-works/translations.rst:80
msgid "Collecting Translatable Strings Into The Translation Database"
msgstr ""

#: ../../content/how-it-works/translations.rst:82
msgid "The console command ``otobo.Console.pl Dev::Tools::TranslationsUpdate`` is used to extract all translatable strings from the source files. These will be collected and written into the translation files."
msgstr ""

#: ../../content/how-it-works/translations.rst:84
msgid "For the OTOBO framework and all extension modules, ``.pot`` and ``.po`` files are written. These files are used by translators to localize the software."
msgstr ""

#: ../../content/how-it-works/translations.rst:86
msgid "But OTOBO requires the translations to be in Perl files for speed reasons. These files will also be generated by ``otobo.Console.pl Dev::Tools::TranslationsUpdate``. There are two different translation cache file types which are used in the following order. If a word/sentence is redefined in a translation file, the last definition will be used."
msgstr ""

#: ../../content/how-it-works/translations.rst:88
msgid "Default framework translation file: ``Kernel/Language/$Language.pm``"
msgstr ""

#: ../../content/how-it-works/translations.rst:89
msgid "Custom translation file: ``Kernel/Language/$Language_Custom.pm``"
msgstr ""

#: ../../content/how-it-works/translations.rst:93
msgid "Default Framework Translation File"
msgstr ""

#: ../../content/how-it-works/translations.rst:95
msgid "The default framework translation file includes the basic translations. The following is an example of a default framework translation file."
msgstr ""

#: ../../content/how-it-works/translations.rst:137
msgid "Custom Translation File"
msgstr ""

#: ../../content/how-it-works/translations.rst:139
msgid "The custom translation file is read out last and so its translation which will be used. If you want to add your own wording to your installation, create this file for your language."
msgstr ""

#: ../../content/how-it-works/translations.rst:167
msgid "The language files for the new interface are now part of the built application (static JSON). When you add a custom language file to the file system, you need to rebuild the application for the change to be considered. To trigger the rebuild, restart the server with the ``--deploy-assets`` option:"
msgstr ""

#: ../../content/how-it-works/translations.rst:173
msgid "During the build process, the language files will be refreshed and will take any ``*_Custom.pm`` into account."
msgstr ""

#: ../../content/how-it-works/translations.rst:177
msgid "The Translation Process Itself"
msgstr ""

#: ../../content/how-it-works/translations.rst:179
msgid "OTOBO uses `Weblate <https://translate.otobo.de/>`__ to manage the translation process. Please see :doc:`../contributing/translate` section for details."
msgstr ""

#: ../../content/how-it-works/translations.rst:183
msgid "Using The Translated Data From The Code"
msgstr ""

#: ../../content/how-it-works/translations.rst:185
msgid "You can use the method ``$LanguageObject->Translate()`` to translate strings at runtime from Perl code, and the ``Translate()`` tag in :doc:`templates`."
msgstr ""

#: ../../content/how-to-extend-otobo.rst:12
msgid "How to Extend OTOBO"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers.rst:12
msgid "Using the power of the OTOBO module layers"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers.rst:14
msgid "OTOBO has a large number of so-called *module layers* which make it very easy to extend the system without patching existing code. One example is the number generation mechanism for tickets. It is a *module layer* with pluggable modules, and you can add your own custom number generator modules if you wish to do so. Let's look at the different layers in detail!"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers.rst:16
msgid "Authentication and User Management"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers.rst:24
msgid "Preferences"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers.rst:33
msgid "Other Core Functions"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers.rst:61
msgid "Daemon And Scheduler"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers.rst:68
msgid "Dynamic Fields"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers.rst:79
msgid "Email Handling"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers.rst:85
#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:12
msgid "Process Management"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers.rst:91
msgid "Overriding Core Modules"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/agent-auth.rst:12
msgid "Agent Authentication Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/agent-auth.rst:14
msgid "There are several agent authentication modules (DB, LDAP and HTTPBasicAuth) which come with the OTOBO framework. It is also possible to develop your own authentication modules. The agent authentication modules are located under ``Kernel/System/Auth/*.pm``. For more information about their configuration see the admin manual. Following, there is an example of a simple agent auth module. Save it under ``Kernel/System/Auth/Simple.pm``. You just need 3 functions: ``new()``, ``GetOption()`` and ``Auth()``. Return the uid, then the authentication is ok."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/agent-auth.rst:18
msgid "Agent Authentication Module Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/agent-auth.rst:20
msgid "The interface class is called ``Kernel::System::Auth``. The example agent authentication may be called ``Kernel::System::Auth::CustomAuth``. You can find an example below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/agent-auth.rst:167
msgid "Agent Authentication Module Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/agent-auth.rst:169
msgid "There is the need to activate your custom agent authenticate module. This can be done using the Perl configuration below. It is not recommended to use the XML configuration because you can lock you out via the system configuration."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/agent-auth.rst:177
msgid "Agent Authentication Module Use Case Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/agent-auth.rst:179
msgid "A useful example of an authentication implementation could be a SOAP back end."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/auth-sync.rst:12
msgid "Authentication Synchronization Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/auth-sync.rst:14
msgid "There is an LDAP authentication synchronization module which come with the OTOBO framework. It is also possible to develop your own authentication modules. The authentication synchronization modules are located under ``Kernel/System/Auth/Sync/*.pm``. For more information about their configuration see the admin manual. Following, there is an example of an authentication synchronization module. Save it under ``Kernel/System/Auth/Sync/CustomAuthSync.pm``. You just need 2 functions: ``new()`` and ``Sync()``. Return 1, then the synchronization is ok."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/auth-sync.rst:18
msgid "Authentication Synchronization Module Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/auth-sync.rst:20
msgid "The interface class is called ``Kernel::System::Auth``. The example agent authentication may be called ``Kernel::System::Auth::Sync::CustomAuthSync``. You can find an example below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/auth-sync.rst:75
msgid "Authentication Synchronization Module Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/auth-sync.rst:77
msgid "You should activate your custom synchronization module. This can be done using the Perl configuration below. It is not recommended to use the XML configuration because this would allow you to lock yourself out via system configuration."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/auth-sync.rst:85
msgid "Authentication Synchronization Module Use Case Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/auth-sync.rst:87
msgid "Useful synchronization implementation could be a SOAP or RADIUS back end."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/autoload-modules.rst:12
msgid "Autoload Modules"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/autoload-modules.rst:14
msgid "Autoload modules are a measure of last resort when the regular module layers do not suffice. These modules live in the namespace ``Kernel::Autoload``. They are required whenever a new config is loaded. This assures that they are available in the web interface and in just about all scripts. The primary use of autoload modules is to add, or to override, core functionality. Please handle with care!"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/autoload-modules.rst:19
msgid "Autoload Module Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/autoload-modules.rst:21
msgid "In order to activate an autoload module it must be declared in the system configuration. See for example the activation of our sample module ``Kernel::Autoload::Test`` in ``Kernel/Config/Files/XML/Framework.xml``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/autoload-modules.rst:37
msgid "Adding Methods to Core Modules"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/autoload-modules.rst:39
msgid "Methods are added simple by declaring a subroutine in the target namespace."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/autoload-modules.rst:56
msgid "See ``scripts/test/Config/Autoload.t`` for an example of how the new subroutine can be used."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/autoload-modules.rst:58
msgid "Because of the line ``use Kernel::System::Valid`` we could also override existing methods. But that is not recommended."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/autoload-modules.rst:60
msgid "Modifying Existing Methods of Core Modules ----------------------------~~~~~~~~~~~~--"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/autoload-modules.rst:63
msgid "Often it suffices to modify existing code. This can by overriding the relevant subroutine."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-auth.rst:12
msgid "Customer Authentication Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-auth.rst:14
msgid "There are several customer authentication modules (DB, LDAP and HTTPBasicAuth) which come with the OTOBO framework. It is also possible to develop your own authentication modules. The customer authentication modules are located under ``Kernel/System/CustomerAuth/*.pm``. For more information about their configuration see the admin manual. Following, there is an example of a simple customer auth module. Save it under ``Kernel/System/CustomerAuth/Simple.pm``. You just need 3 functions: ``new()``, ``GetOption()`` and ``Auth()``. Return the uid, then the authentication is ok."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-auth.rst:18
msgid "Customer Authentication Module Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-auth.rst:20
msgid "The interface class is called ``Kernel::System::CustomerAuth``. The example customer authentication may be called ``Kernel::System::CustomerAuth::CustomAuth``. You can find an example below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-auth.rst:169
msgid "Customer Authentication Module Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-auth.rst:171
msgid "There is the need to activate your custom customer authenticate module. This can be done using the XML configuration below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-auth.rst:186
msgid "Customer Authentication Module Use Case Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-auth.rst:188
msgid "Useful authentication implementation could be a SOAP back end."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-user-preferences.rst:12
msgid "Customer User Preferences Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-user-preferences.rst:14
msgid "There is a DB customer-user preferences module which come with the OTOBO framework. It is also possible to develop your own customer-user preferences modules. The customer-user preferences modules are located under ``Kernel/System/CustomerUser/Preferences/*.pm``. For more information about their configuration see the admin manual. Following, there is an example of a customer-user preferences module. Save it under ``Kernel/System/CustomerUser/Preferences/Custom.pm``. You just need 4 functions: ``new()``, ``SearchPreferences()``, ``SetPreferences()`` and ``GetPreferences()``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-user-preferences.rst:18
msgid "Customer User Preferences Module Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-user-preferences.rst:20
msgid "The interface class is called ``Kernel::System::CustomerUser``. The example customer-user preferences may be called ``Kernel::System::CustomerUser::Preferences::Custom``. You can find an example below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-user-preferences.rst:145
msgid "Customer User Preferences Module Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-user-preferences.rst:147
msgid "There is the need to activate your custom customer-user preferences module. This can be done using the XML configuration below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-user-preferences.rst:172
msgid "Customer User Preferences Module Use Case Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/customer-user-preferences.rst:174
msgid "Useful preferences implementation could be a SOAP or LDAP back end."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:12
msgid "OTOBO Daemon"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:14
msgid "The OTOBO daemon is a separated process that helps OTOBO to execute certain actions asynchronously and detached of the web server process, but sharing the same database."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:18
msgid "OTOBO Daemon Modules"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:20
msgid "The OTOBO daemon ``bin/otobo.Daemon.pl`` main purpose is to call (daemonize) all the registered daemon modules in the system configuration."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:22
msgid "Each daemon module must implement a common API in order to be correctly called by the OTOBO daemon and be a semi persistent process in the system. Persistent process could grow in size and memory usage over the time and normally they do not respond to changes in the configuration. That is why the daemon modules should implement a discard mechanism to be stopped and re-spawned again from time to time, freeing system resources and re-reading the configuration."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:24
msgid "A daemon module could be an all-in-one solution to perform a certain job, but there could be the case that a solution requires different daemon modules due to its complexity. That is exactly the case of the OTOBO scheduler daemon that is split into several daemon modules including some daemon modules for task management and task execution."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:26
msgid "It is not always necessary to create a new daemon module to perform certain task, usually the OTOBO scheduler daemon can deal with the majority of them, either if it is an OTOBO function that needs to be executed on a regular basis (CRON like) or if it's triggered by an OTOBO event, the OTOBO scheduler should be capable to deal with it out of the box or by adding a new scheduler task worker module."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:30
msgid "Creating A New Daemon Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:32
msgid "All daemon modules requires to be registered in the system configuration in order to be called by the main OTOBO daemon."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:36
msgid "Daemon Module Registration Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:52
msgid "Daemon Module Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:54
msgid "The following code implements a daemon module that displays the system time every 2 seconds."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:82
#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:71
#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:146
#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:267
#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:161
#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:82
#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:52
#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:77
#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:331
msgid "This is common header that can be found in common OTOBO modules. The class/package name is declared via the ``package`` keyword."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:84
msgid "In this case we are inheriting from ``BaseDaemon`` class, and the object manager dependencies are set."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:117
msgid "The constructor ``new`` creates a new instance of the class. Some used objects are also created here. It is highly recommended to disable in-memory cache in daemon modules especially if OTOBO runs in a cluster environment."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:119
msgid "In order to make this daemon module to be executed every two seconds it is necessary to define a sleep time accordingly, otherwise it will be executed as soon as possible."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:121
msgid "Refreshing the daemon module from time to time is necessary in order to define when it should be discarded."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:123
msgid "For the following functions (``PreRun``, ``Run`` and ``PostRun``) if they return false, the main OTOBO daemon will discard the object and create a new one as soon as possible."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:138
msgid "The ``PreRun`` method is executed before the main daemon module method, and the its purpose is to perform some test before the real operation. In this case a check to the database is done (always recommended), otherwise it sleeps for 10 seconds. This is needed in order to wait for DB connection to be reestablished."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:150
msgid "The ``Run`` method is where the main daemon module code resides, in this case it only prints the current time."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:168
msgid "The ``PostRun`` method is used to perform the sleeps (preventing the daemon module to be executed too often) and also to manage the safe discarding of the object. Other operations like verification or cleanup can be done here."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:207
msgid "The ``Summary`` method is called by the console command ``Maint::Daemon::Summary`` and it's required to return ``Header``, ``Column``, ``Data`` and ``NoDataMessages`` keys. ``Column`` and ``Data`` needs to be an array of hashes. It is used to display useful information of what the daemon module is currently doing, or what has been done so far. This method is optional."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/daemon-modules.rst:213
#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:147
msgid "End of file."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:12
msgid "OTOBO Scheduler"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:14
msgid "The OTOBO scheduler is a conjunction of daemon modules and task workers that runs together in order to perform all needed OTOBO tasks asynchronously from the web server process."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:18
msgid "OTOBO Scheduler Task Managers"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:21
msgid "``SchedulerCronTaskManager``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:21
msgid "This reads registered cron tasks from the OTOBO system configuration and determines the correct time to create a task to be executed."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:24
msgid "``SchedulerFutureTaskManager``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:24
msgid "This checks the tasks that are set to be executed just one time in the future and sets this task to be executed in time. For example, when a generic interface invoker can not reach the remote server, it can self schedule to be run again 5 minutes later."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:27
msgid "``SchedulerGenericAgentTaskManager``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:27
msgid "This continuously reads the generic agent tasks that are set to be run on regular time basis and sets their execution accordingly."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:29
msgid "Whenever these tasks managers are not enough, a new daemon module can be created. At a certain point of its ``Run()`` method it needs to call ``TaskAdd()`` from the ``chedulerDB`` object to register a task, and as soon as it is registered, it will be executed in the next free slot by the ``SchedulerTaskWorker``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:33
msgid "OTOBO Scheduler Task Workers"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:36
msgid "``SchedulerTaskWorker``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:36
msgid "This executes all tasks planned by the previous tasks managers plus the ones that come directly from the code by using the asynchronous executor."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:38
msgid "In order to execute each task, the ``SchedulerTaskWorker`` calls a back end module (task worker) to perform the specific task. The worker module is determined by the task type. If a new task type is added, it will require a new task worker."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:42
msgid "Creating A New Scheduler Task Worker"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:44
msgid "All files placed under ``Kernel/System/Daemon/DaemonModules/SchedulerTaskWorker`` could potentially be task workers and they do not require any registration in the system configuration."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:48
msgid "Scheduler Task Worker Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:73
msgid "In this case we are inheriting from ``BaseTaskWorker`` class, and the object manager dependencies are set."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:89
#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:345
msgid "The constructor ``new`` creates a new instance of the class."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/daemon/scheduler-task-worker-modules.rst:141
msgid "The ``Run`` is the main method. A call to ``_CheckTaskParams()`` from the base class will save some lines of code. Executing the task while capturing the STDERR is a very good practice, since the OTOBO scheduler runs normally unattended, and saving all errors to a variable will make it available for further processing. ``_HandleError()`` provides a common interface to send the error messages as email to the recipient specified in the system configuration."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dashboard.rst:12
msgid "Dashboard Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dashboard.rst:14
msgid "Dashboard module to display statistics in the form of a line graph."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dashboard.rst:19
msgid "Dashboard Widget"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dashboard.rst:170
msgid "To use this module add the following to the ``Kernel/Config.pm`` and restart your web server (if you use ``mod_perl``)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dashboard.rst:195
msgid "An excessive number of days or individual lines may lead to performance degradation."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:12
msgid "Creating a Dynamic Field Functionality Extension"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:14
msgid "To illustrate this process a new dynamic field functionality extension for the function ``Foo`` will be added to the back end object as well as in the text field driver."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:16
msgid "To create this extension we will create 4 files:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:18
#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:23
msgid "A configuration file (XML) to register the modules."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:19
msgid "A back end extension (Perl) to define the new function."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:20
msgid "A text field driver extension (Perl) that implements the new function for text fields."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:22
#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:28
msgid "File structure:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:42
msgid "Dynamic Field Foo Extension files"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:45
msgid "Dynamic Field Extension Configuration File Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:47
msgid "The configuration files are used to register the extensions for the back end and drivers as well as new behaviors for each drivers."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:51
msgid "If a driver is extended with a new function, the back end will need also an extension for that function."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:53
msgid "In this section a configuration file for ``Foo`` extension is shown and explained."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:60
#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:75
msgid "This is the normal header for a configuration file."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:75
msgid "This setting registers the extension in the back end object. The module will be loaded from ``Backend`` as a base class."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:95
msgid "This is the registration for an extension in the text dynamic field driver. The module will be loaded as a base class in the driver. Notice also that new behaviors can be specified. These extended behaviors will be added to the behaviors that the driver has out of the box, therefore a call to ``HasBehavior()`` to check for these new behaviors will be totally transparent."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:101
#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:131
msgid "Standard closure of a configuration file."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:105
msgid "Dynamic Field Back End Extension Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:107
msgid "Back end extensions will be loaded transparently into the back end itself as a base class. All defined object and properties from the back end will be accessible in the extension."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:111
msgid "All new functions defined in the back end extension should be implemented in a driver extension."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:113
msgid "In this section the ``Foo`` extension for back end is shown and explained. The extension only defines the function ``Foo()``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:219
msgid "The function ``Foo()`` is only used for test purposes. First it checks the dynamic field configuration, then it checks if the dynamic field driver (type) exists and was already loaded. To prevent the function call on a driver where is not defined it first check if the driver can execute the function, then executes the function in the driver passing all parameters."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:223
msgid "It is also possible to skip the step that tests if the driver can execute the function. To do that it is necessary to implement a mechanism in the front end module to require a special behavior on the dynamic field, and only after call the function in the back end object."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:227
msgid "Dynamic Field Driver Extension Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:229
msgid "Driver extensions will be loaded transparently into the driver itself as a base class. All defined object and properties from the driver will be accessible in the extension."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:233
msgid "All new functions implemented in the driver extension should be defined in a back end extension, as every function is called from the back end object."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:235
msgid "In this section the ``Foo`` extension for text field driver is shown and explained. The extension only implements the function ``Foo()``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend.rst:276
msgid "The function ``Foo()`` has no special logic. It is only for testing and it always returns 1."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:12
msgid "How To Extend The Dynamic Fields"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:14
msgid "There are many ways to extend the dynamic fields. The following sections will try to cover the most common scenarios."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:17
msgid "Create a New Dynamic Field Type (for ticket or article objects)"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:19
msgid "To create a new dynamic field type is necessary to:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:21
#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:31
msgid "Create a dynamic field driver. This is the main module of the new field."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:22
#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:36
msgid "Create or use an existing admin dialog to have a management interface and set its configuration options."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:23
#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:38
msgid "Create a configuration file to register the new field in the back end (or new admin dialogs in the framework if needed) and be able to create instances or it."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:27
msgid "Create a New Dynamic Field Type (for other objects)"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:29
msgid "To create a new dynamic field type for other objects is necessary to:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:32
msgid "Create an object type delegate. This is necessary, even if the other object does not require any specific data handling in its functions (e.g. after a value is set). All object type delegates must implement the functions that the back end requires."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:34
msgid "Take a look in the current object type delegates to implement the same functions, even if they just return a successful value for the other object."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:37
#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:48
msgid "Implement dynamic fields in the front end modules to be able to use the dynamic fields."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:40
msgid "And make the needed settings to show, hide or show the dynamic fields as mandatory in the new screens."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:44
msgid "Create a New package to Use Dynamic Fields"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:46
msgid "To create a package to use existing dynamic fields is necessary to:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:49
msgid "Create a configuration file to give the end user the possibility to show, hide or show the dynamic fields as mandatory in the new screens."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:53
msgid "Extend Back End and Drivers Functionalities"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:55
msgid "It might be possible that the back end object does not have a needed function for custom developments, or could also be possible that it has the function needed, but the return format does not match the needs of the custom development, or that a new behavior is needed to execute the new or the old functions."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:57
msgid "The easiest way to do this, is to extend the current field files. For this it is necessary to create a new back end extension file that defines the new functions and create also drivers extensions that implement these new functions for each field. These new drivers will only need to implement the new functions since the original drivers takes care of the standard functions. All these new files do not need a constructor as they will be loaded as a base for the back end object and the drivers."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:59
msgid "The only restrictions are that the functions should be named different than the ones on the back end and drivers, otherwise they will be overwritten with current objects."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:61
msgid "Put the new back end extension into the ``DynamicField`` directory (e.g. ``/$OTOBO_HOME/Kernel/System/DynamicField/NewPackageBackend.pm`` and its drivers in ``/$OTOBO_HOME/Kernel/System/DynamicField/Driver/NewPackage*.pm``)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:63
msgid "New behaviors only need a small setting in the extensions configuration file."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:65
msgid "To create new back end functions is needed to:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:67
msgid "Create a new back end extension module to define only the new functions."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:68
msgid "Create the dynamic fields driver extensions to implement only the new functions."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:69
msgid "Implement new dynamic fields functions in the front end modules to be able to use the new dynamic fields functions."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:70
msgid "Create a configuration file to register the new back end and drivers extensions and behaviors."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:73
msgid "Other Extensions"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-extend-options.rst:75
msgid "Other extensions could be a combination of the above examples."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:12
#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:19
msgid "Dynamic Fields Framework"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:14
msgid "Before creating new dynamic fields is necessary to understand its framework and how OTOBO screens interact with them, as well as their underlying API."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:23
msgid "Dynamic Field Back End Modules"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:26
msgid "Dynamic Field Back End"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:28
msgid "Normally called as ``BackendObject`` in the front end modules is the mediator between the front end modules and each specific dynamic field implementation or driver. It defines a generic middle API for all dynamic field drivers, and each driver has the responsibility to implement the middle API for the specific needs for the field."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:30
msgid "The dynamic field back end is the master controller of all the drivers. Each function in this module is responsible to check the required parameters and call the same function in the specific driver according to the dynamic field configuration parameter received."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:32
msgid "This module is also responsible to call specific functions on each object type delegate (like ``Ticket`` or ``Article``) e.g. to add a history entry or fire an event."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:34
msgid "The ``BackendObject`` also provides the method ``HasBehavior``. This allows dynamic field drivers to communicate their capabilities to  interested parties."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:36
msgid "This module is located in ``$OTOBO_HOME/Kernel/System/DynamicField/Backend.pm``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:42
msgid "Dynamic Field Drivers"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:44
msgid "A dynamic field driver is the implementation of the dynamic field. Each driver must implement all the mandatory functions specified in the back end (there are some functions that depends on a behavior and it is not needed to implement those if the dynamic field does not have that particular behavior)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:47
msgid "A driver is responsible to know how to get its own value or values from a web request, or from a profile (like a search profile). It also needs to know the HTML code to render the field in edit or display screens, or how to interact with the stats module, among other functions."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:49
msgid "These modules are located in ``$OTOBO_HOME/Kernel/System/DynamicField/Driver/*.pm``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:51
msgid "It exists some base drivers like ``Base.pm``, ``BaseText.pm``, ``BaseSelect.pm`` and ``BaseDateTime.pm``, that implements common functions for certain drivers (e.g. driver ``TextArea.pm`` uses ``BaseText.pm`` that also uses ``Base.pm`` then ``TextArea`` only needs to implement the functions that are missing in ``Base.pm`` and ``BateText.pm`` or the ones that are special cases)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:53
msgid "The following is the drivers inheritance tree:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:55
msgid "``Base.pm``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:57
msgid "``BaseText.pm``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:59
msgid "``Text.pm``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:60
msgid "``TextArea.pm``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:62
msgid "``BaseSelect.pm``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:64
msgid "``Dropdown.pm``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:65
msgid "``Multiselect.pm``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:67
msgid "``BaseDateTime.pm``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:69
msgid "``DateTime.pm``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:70
msgid "``Date.pm``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:72
msgid "``Checkbox.pm``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:76
msgid "Object Type Delegate"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:78
msgid "An object type delegate is responsible to perform specific functions on the object linked to the dynamic field. These functions are triggered by the back end object as they are needed."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:80
msgid "These modules are located in ``$OTOBO_HOME/Kernel/System/DynamicField/ObjectType/*.pm``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:84
msgid "Dynamic Fields Admin Modules"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:86
msgid "To manage the dynamic fields (add, edit and list) a series of modules has been already developed. There is one specific master module (``AdminDynamicField.pm``) that shows the list of defined dynamic fields, and from within other modules are called to create new dynamic fields or modify an existing ones."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:88
msgid "Normally a dynamic field driver needs its own admin module (admin dialog) to define its properties. This dialog might differ from other drivers. But this is not mandatory, drivers can share admin dialogs, if they can provide needed information for all the drivers that are linked to them, no matter if they are from different type. What is mandatory is that each driver must be linked to an admin dialog (e.g. text and textarea drivers share ``AdminDynamicFieldText.pm`` admin dialog, and date and date/time drivers share ``AdminDynamicFieldDateTime.pm`` admin dialog)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:90
msgid "Admin dialogs follow the normal OTOBO admin module rules and architecture. But for standardization all configuration common parts to all dynamic fields should have the same look and feel among all admin dialogs."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:92
msgid "These modules are located in ``$OTOBO_HOME/Kernel/Modules/*.pm``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:96
msgid "Each admin dialog needs its corresponding HTML template file (``.tt``)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:100
msgid "Dynamic Fields Core Modules"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:102
msgid "This modules reads and writes the dynamic fields information from and to the database tables."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:105
msgid "``DynamicField.pm``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:105
msgid "This module is responsible to manage the dynamic field definitions. It provides the basic API for add, change, delete, list and get dynamic fields. This module is located in ``$OTOBO_HOME/Kernel/System/DynamicField.pm``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:109
msgid "``DynamicFieldValue.pm``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:108
msgid "This module is responsible to read and write dynamic field values into the form and into the database. This module is highly used by the drivers and is located in ``$OTOBO_HOME/Kernel/System/DynamicFieldValue.pm``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:112
msgid "Dynamic Fields Database Tables"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:114
msgid "There are two tables in the database to store the dynamic field information:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:117
msgid "``dynamic_field``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:117
msgid "Used by the core module ``DynamicField.pm``, it stores the dynamic field definitions."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:120
msgid "``dynamic_field_obj_id_name``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:120
msgid "Used by the core module ``DynamicField.pm`` to save the relationship between objects (with ID and name) and an available object type."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:124
msgid "``dynamic_field_value``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:123
msgid "Used by the core module ``DynamicFieldValue.pm`` to save the dynamic field values for each dynamic field and each object type instance."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:127
msgid "Dynamic Fields Configuration Files"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:129
msgid "The back end module needs a way to know which drivers exists and since the amount of drivers can be easily extended. The easiest way to manage them is to use the system configuration, where the information of dynamic field drivers and object type drivers can be stored and extended."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:131
msgid "The master admin module also needs to know this information about the available dynamic field drivers to use the admin dialog linked with, to create or modify the dynamic fields."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-framework.rst:133
msgid "Front end modules need to read the system configuration to know which dynamic fields are active for each screen and which ones are also mandatory. For example: ``Ticket::Frontend::AgentTicketPhone###DynamicField`` stores the active, mandatory and inactive dynamic fields for *New Phone Ticket* screen."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-interaction.rst:12
msgid "Dynamic Field Interaction With Front End Modules"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-interaction.rst:14
msgid "Knowing about how front end modules interact with dynamic fields is not strictly necessary to extend dynamic fields for the ticket or article objects, since all the screens that could use the dynamic fields are already prepared. But in case of custom developments or to extend the dynamic fields to other objects is very useful to know how to access dynamic fields framework from a front end module."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-interaction.rst:16
msgid "The following pictures are showing a simple example of how the dynamic fields interact with other OTOBO framework parts."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-interaction.rst:20
#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-interaction.rst:25
msgid "Dynamic Field Interaction"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-interaction.rst:27
msgid "The first step is, that the front end module reads the configured dynamic fields."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-interaction.rst:29
msgid "For example ``AgentTicketNote`` should read ``Ticket::Frontend::AgentTicketNote###DynamicField`` setting. This setting can be used as the filter parameter for ``DynamicField`` core module function ``DynamicFieldListGet()``. The screen can store the results of this function, to have the list of the dynamic fields activated for this particular screen."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-interaction.rst:31
msgid "The screen should try to get the values from the web request subsequently. It can use the back end object function ``EditFieldValueGet()`` for this purpose and might use this values to trigger ACLs. The back end object will use each driver, to perform the specific actions for all functions."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-interaction.rst:33
msgid "Afterwards the screen should get the HTML for each field to display. The back end object function ``EditFieldRender()`` can be used to perform this action and the ACLs restrictions. On top of that, the values from the web request can be passed to this function, in order to get better results. In case of a submit, the screen could also use the back end object function ``EditFieldValueValidate()``, to check the mandatory fields."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-interaction.rst:37
msgid "Other screens could use ``DisplayFieldRender()`` instead of ``EditFieldRender()``, if the screen only shows the field value and in such case, no value validation is needed."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-interaction.rst:39
msgid "To store the value of the dynamic field, it is necessary to get the object ID."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-interaction.rst:41
msgid "For this example, if the dynamic field is linked to a ticket object, the screen should already have the ``TicketID``, otherwise if the field is linked to an article object, in order to set the value of the field, it is necessary to create the article first. ``ValueSet()`` from the back end object can be used to set the dynamic field value."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-interaction.rst:43
msgid "In summary, the front end modules does not need to know, how each dynamic field works internally, to get or set their values or to display them. It just needs to call the back end object module and use the fields in a generic way."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:12
msgid "Create New Dynamic Field"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:14
msgid "To illustrate this process a new dynamic field *Password* will be created. This new dynamic field type will show a new password field to ticket or article objects. Since is very similar to a text dynamic field we will use the ``Base`` and ``BaseText`` drivers as a basis to build this new field."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:19
msgid "This new password field implementation is just for educational purposes, it does not provide any level of security and is not recommended for production systems."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:21
msgid "To create this new dynamic field, we will create 5 files:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:24
msgid "An admin dialog module (Perl) to setup the field options."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:25
msgid "A template module for the admin dialog."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:26
msgid "A dynamic field driver (Perl)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:61
msgid "Dynamic Field Password Files"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:64
msgid "Dynamic Field Configuration File Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:66
msgid "The configuration files are used to register the dynamic field types (driver) and the object type drivers for the back end object. They also store standard registrations for admin modules in the framework."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:68
msgid "In this section a configuration file for password dynamic field is shown and explained."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:105
msgid "These settings registers the password dynamic field driver for the back end module so it can be included in the list of available dynamic fields types. It also specify its own admin dialog in the key ``ConfigDialog``. This key is used by the master dynamic field admin module to manage this new dynamic field type."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:125
msgid "This is a standard module registration for the password admin dialog in the admin interface."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:135
msgid "Dynamic Field Admin Dialog Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:137
msgid "The admin dialogs are standard admin modules to manage (add or edit) the dynamic fields."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:139
msgid "In this section an admin dialog for password dynamic field is shown and explained."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:192
msgid "The constructor ``new`` creates a new instance of the class. According to the coding guidelines objects of other classes that are needed in this module have to be created in ``new``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:234
msgid "``Run`` is the default function to be called by the web request. We try to make this function as simple as possible and let the helper functions to do the hard work."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:265
msgid "``_Add`` function is also pretty simple, it just get some parameters from the web request and call the ``_ShowScreen()`` function. Normally this function is not needed to be modified."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:383
msgid "The ``_AddAction`` function gets the configuration parameters from a new dynamic field, and it validates that the dynamic field name only contains letters and numbers. This function could validate any other parameter."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:385
msgid "``Name``, ``Label``, ``FieldOrder``, ``Validity`` are common parameters for all dynamic fields and they are required. Each dynamic field has its specific configuration that must contain at least the ``DefaultValue`` parameter. In this case it also have ``ShowValue`` and ``ValueMask`` parameters for password field."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:388
msgid "If the field has the ability to store a fixed list of values they should be stored in the ``PossibleValues`` parameter inside the specific configuration hash."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:390
msgid "As in other admin modules, if a parameter is not valid this function returns to the add screen highlighting the erroneous form fields."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:392
msgid "If all the parameters are correct it creates a new dynamic field."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:455
msgid "The ``_Change`` function is very similar to the ``_Add`` function but since this function is used to edit an existing field it needs to validated the ``FieldID`` parameter and gather the current dynamic field data."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:600
msgid "``_ChangeAction()`` is very similar to ``_AddAction()``, but adapted for the update of an existing field instead of creating a new one."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:693
msgid "The ``_ShowScreen`` function is used to set and define the HTML elements and blocks from a template to generate the admin dialog HTML code."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:697
msgid "Dynamic Field Template for Admin Dialog Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:699
msgid "The template is the place where the HTML code of the dialog is stored."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:701
msgid "In this section an admin dialog template for the password dynamic field is shown and explained."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:713
#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:411
msgid "This is common header that can be found in common OTOBO modules."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:738
msgid "This part of the code has the main box and also the actions side bar. No modifications are needed in this section."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:751
msgid "In this section of the code is defined the right part of the dialog. Notice that the value of the ``Action`` hidden input must match with the name of the admin dialog."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:819
msgid "This first widget contains the common form attributes for the dynamic fields. For consistency with other dynamic fields is recommended to leave this part of the code unchanged."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:859
msgid "The second widget has the dynamic field specific form attributes. This is the place where new attributes can be set and it could use JavaScript and AJAX technologies to make it more easy or friendly for the end user."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:885
msgid "The final part of the file contains the *Save* button and the *Cancel* link, as well as other needed JavaScript code."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:889
#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:905
msgid "Dynamic Field Driver Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:891
msgid "The driver *represents* the dynamic field. It contains several functions that are used wide in the OTOBO framework."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:893
msgid "A driver can inherit some functions from base classes. For example the ``TextArea`` driver inherits most of the functions from ``Base.pm`` and ``BaseText.pm``. This means that ``TextArea`` only needs to implement the functions that requires different logic or results. The checkbox field driver only inherits from ``Base.pm``, as all other functions are very different from any other base driver."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:899
msgid "Please refer to the Perl online documentation (POD) of the module ``/Kernel/System/DynmicField/Backend.pm`` and ``/Kernel/System/DynmicField/Driver/Base.pm`` to have the list of all attributes and possible return data for each function."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:901
msgid "In this section the password dynamic field driver is shown and explained. This driver inherits some functions from ``Base.pm`` and ``BaseText.pm`` (``Base/Text.pm`` in the new API) and only implements the functions that needs different results."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:932
msgid "This is the common header, that can be found in common OTOBO modules. The class/package name is declared via the ``package`` keyword. Note that ``BaseText`` is used as the base class."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:992
msgid "The constructor ``new`` creates a new instance of the class. According to the coding guidelines, objects of other classes, that are needed in this module, have to be created in subroutine ``new``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:994
msgid "It is important to define the behaviors correctly, as the field might or might not be used in certain screens, functions that depends on behaviors, that are not active for this particular field, might not be needed to be implemented."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:998
msgid "Drivers are created only by the ``BackendObject`` and not directly from any other module."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1088
msgid "This function is responsible to create the HTML representation of the field and its label. It is used in the edit screens like ``AgentTicketPhone``, ``AgentTicketNote``, etc."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1151
msgid "The ``DisplayValueRender()`` function returns the field value as plain text, as well as its title (both can be translated). For this particular example we are checking if the password should be revealed or display a predefined mask by a configuration parameter in the dynamic field."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1196
msgid "This function is similar to ``DisplayValueRender()`` but it is used in locations, where no ``LayoutObject`` is available."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1200
msgid "Other Functions"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1202
msgid "The following are other functions, that might be needed, if the new dynamic field does not inherit from other classes."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1204
msgid "To see the complete code of this functions, please take a look directly into the file ``Kernel/System/DynamicField/Driver/Base.pm``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1210
msgid "This function retrieves the value from the field on a specified object. In this case we are returning the first text value, since the field only stores one text value at time."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1216
msgid "This function is used to store a dynamic field value. In this case this field only stores one text type value. Other fields could store more than one value on either ``ValueText``, ``ValueDateTime`` or ``ValueInt`` format."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1223
msgid "This function is used to delete one field value attached to a particular object ID. For example if the instance of an object is to be deleted, then there is no reason to have the field value stored in the database for that particular object instance."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1229
msgid "This function is used to delete all values from a certain dynamic field. This function is very useful when a dynamic field is going to be deleted."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1235
msgid "This function is used to check if the value is consistent to its type."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1241
msgid "This function is used by ``TicketSearch`` core module to build the internal query to search for a ticket based on this field as a search parameter."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1247
msgid "This function is also a helper for ``TicketSearch`` module. ``$Param{TableAlias}`` should be kept and ``value_text`` could be replaced with ``value_date`` or ``value_int`` depending on the field."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1253
msgid "This function is used in the edit screens of OTOBO and its purpose is to get the value of the field, either from a template like generic agent profile or from a web request. This function gets the web request in the ``$Param{ParamObject}``, that is a copy of the ``ParamObject`` of the front end module or screen."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1255
msgid "There are two return formats for this function. The normal that is just the raw value or a structure that is the pair field name => field value. For example a date dynamic field returns normally the date as string, and if it should return a structure it returns a pair for each part of the date in the hash."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1257
msgid "If the result should be a structure then, normally this is used to store its values in a template, like a generic agent profile. For example a date field uses several HTML components to build the field, like the used checkbox and selects for year, month, day etc."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1264
msgid "This function should provide at least a method to validate if the field is empty, and return an error if the field is empty and mandatory, but it can also do more validations for other kind of fields, like if the option selected is valid, or if a date should be only in the past etc. It can provide a custom error message also."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1270
msgid "This function is used by ticket search dialog and it is similar to ``EditFieldRander()``, but normally on a search screen small changes has to be done for all fields. For this example we use a HTML text input instead of a password input. In other fields like drop-down field is displayed as a multiple select in order to let the user search for more than one value at a time."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1276
msgid "Very similar to ``EditFieldValueGet()``, but uses a different name prefix, adapted for the search dialog screen."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1282
msgid "This function is used also by the ticket search dialog to set the correct operator and value to do the search on this field. It also returns how the value should be displayed in the used search attributes in the results page."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1288
msgid "This function is used by the stats modules. It includes the field definition in the stats format. For fields with fixed values it also includes all this possible values and if they can be translated, take a look to the ``BaseSelect`` driver code for an example how to implement those."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1294
msgid "This function is very similar to the ``SearchFieldParameterBuild()``. The difference is that the latter gets the value from the search profile and this one gets the value directly from its parameters."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1297
msgid "This function is used by statistics module."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1303
msgid "This function is used to know how the dynamic field values stored on a profile should be retrieved, as a scalar or as an array, and it also defines the correct name of the field in the profile."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1309
msgid "This function is used by ``otobo.FillDB.pl`` script to populate the database with some test and random data. The value inserted by this function is not really relevant. The only restriction is that the value must be compatible with the field value type."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-new-field.rst:1315
msgid "Used by the notification modules. This function returns 1 if the field is present in the ``$Param{ObjectAttributes}`` parameter and if it matches the given value."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-overview.rst:12
msgid "Overview"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-overview.rst:14
msgid "Dynamic fields are custom fields that can be added to a screen to enhance and add information to an object (e.g. a ticket or an article)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-overview.rst:16
msgid "Tickets or articles could have as many fields as needed. It is also possible to use the dynamic fields framework for other objects rather than just ticket or article."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/dynamic-fields/dynamic-fields-overview.rst:19
msgid "Due to its modular design each dynamic field type can be seen as a plug-in to a framework, and this plug-in can be an OTOBO standard package to extend the available types of the dynamic fields or even to extend current dynamic field with more functions."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:12
msgid "Invoker"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:14
msgid "The invoker is used to create a request from OTOBO to a remote system. This part of the GI is in charge of perform necessary tasks in OTOBO side, to gather the necessary data in order to construct the request."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:18
msgid "Invoker Back End"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:20
msgid "Next we will show how to develop a new invoker. Each invoker has to implement these subroutines:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:22
#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:52
#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:22
#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:31
#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:22
#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:643
msgid "``new``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:23
msgid "``PrepareRequest``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:24
msgid "``HandleResponse``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:26
msgid "We should implement each one of this methods in order to be able to execute a request using the request handler (``Kernel/GenericInterface/Requester.pm``)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:30
msgid "Invoker Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:32
msgid "In this section a sample invoker module is shown and each subroutine is explained."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:56
msgid "This is common header that can be found in common OTOBO modules. The class/package name is declared via the ``package`` keyword. Invokers can not be instantiated by the object manager."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:80
#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:130
#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:79
#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:92
msgid "The constructor ``new`` creates a new instance of the class. According to the coding guidelines only objects of other classes not handled by the object manager that are needed in this module have to be created in ``new``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:112
msgid "The ``PrepareRequest`` function is used to handle and collect all needed data to be sent into the request. Here we can receive data from the request handler, use it, extend it, generate new data, and after that, we can transfer the results to the mapping layer."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:114
msgid "For this example we are expecting to receive a ticket number. If there isn't then we use the debugger method ``Error()`` that creates an entry in the debug log and also returns a structure with the parameter ``Success`` as 0 and an error message as the passed ``Summary``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:116
msgid "Also this example appends the word *Test* to the parameter ``Action`` and if ``GetSystemTime`` is requested, it will fill the ``SystemTime`` parameter with the current system time. This part of the code is to prepare the data to be sent. On a real invoker some calls to core modules (``Kernel/System/*.pm``) should be made here."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:118
msgid "If during any part of the ``PrepareRequest`` function the request need to be stop without generating and error an entry in the debug log the following code can be used:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:128
msgid "Using this, the requester will understand that the request should not continue (it will not be sent to mapping layer and will also not be sent to the network transport). The requester will not send an error on the debug log, it will only silently stop."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:178
msgid "The ``HandleResponse`` function is used to receive and process the data from the previous request, that was made to the remote system. This data already passed by mapping layer, to transform it from remote system format to OTOBO format (if needed)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:181
msgid "For this particular example it checks the ticket number again and check if the action ends with the word *Test* (as was done in the ``PrepareRequest`` function)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:185
msgid "This invoker is only used for tests, a real invoker will check if the response was on the format described by the remote system and can perform some actions like: call another invoker, perform a call to a core module, update the database, send an error, etc."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:189
msgid "Invoker Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-invoker.rst:191
msgid "There is the need to register this invoker module to be accessible in the OTOBO GUI. This can be done using the XML configuration below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:12
msgid "Mapping"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:14
msgid "The mapping is used to convert data from OTOBO to the external systems, and vice versa. This data can be represented as key => value pairs. Mapping modules can be developed to transform not just values but also the keys."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:16
msgid "For example:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:19
msgid "Mapping from"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:19
msgid "Mapping to"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:21
msgid "Prio => Warning"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:21
msgid "PriorityID => 3"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:24
msgid "The mapping layer is not absolutely necessary, a web service can skip it completely depending on the web service configuration and how invokers and operation are implemented. But if some data transformations are needed, is highly recommended to use an existing mapping module or create a new one."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:26
msgid "Mapping modules can be called more than one time during a normal communication, take a look to the following examples."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:33
msgid "OTOBO as provider example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:29
msgid "The remote system sends the request with the data in the remote system format."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:30
msgid "The data is mapped from the remote system format to the OTOBO format."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:31
msgid "OTOBO performs the operation and return the response in OTOBO format."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:32
#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:37
msgid "The data is mapped from the OTOBO format to the remote system format."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:33
msgid "The response with the data in the remote system format is sent to the remote system."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:41
msgid "OTOBO as requester example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:36
msgid "OTOBO prepares the request to the remote system using the data in the OTOBO format."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:38
msgid "The request is sent to the remote system which performs the action and sends the response back to OTOBO with the data in remote system format."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:39
msgid "The data is mapped form remote system format (again) to the OTOBO format."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:40
msgid "OTOBO processes the response."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:44
msgid "Mapping Back End"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:46
msgid "Generic interface provides a mapping module called *Simple*. With this module most of the data transformations including key and value mapping can be done, and also it defines rules for to handling the default mappings for both keys and values."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:48
msgid "So it is highly probable that you don't need to develop a custom mapping module. Please check *Simple* mapping module (``Kernel/GenericInterface/Mapping/Simple.pm``) and its on-line documentation before continue."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:50
msgid "If *Simple* mapping module does not match your needs then we will show how to develop a new mapping back end. Each mapping back end has to implement these subroutines:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:53
msgid "``Map``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:55
msgid "We should implement each one of this methods in order to be able to map the data in the communication, handled either by the requester or provider. All mapping back ends are handled by the mapping module (``Kernel/GenericInterface/Mapping.pm``)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:59
msgid "Mapping Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:61
msgid "In this section a sample mapping module is shown and each subroutine is explained."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:84
msgid "We also include ``VariableCheck`` module to perform certain validation over some variables. Mappings can not be instantiated by the object manager."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:197
msgid "The ``Map`` function is the main part of each mapping module. It receives the mapping configuration (rules) and the data in the original format (either OTOBO or remote system format) and converts it to a new format, even if the structure of the data can be changed during the mapping process."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:199
msgid "In this particular example there are three rules to map the values. This rules are set in the mapping configuration key ``TestOption`` and they are ``ToUpper``, ``ToLower`` and ``Empty``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:201
msgid "``ToUpper``: converts each data value to upper case."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:202
msgid "``ToLower``: converts each data value to lower case."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:203
msgid "``Empty``: converts each data value into an empty string."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:205
msgid "In this example no data key transformations were implemented."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:242
msgid "This are the helper functions that actually performs the string conversions."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:246
msgid "Mapping Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-mapping.rst:248
msgid "There is the need to register this mapping module to be accessible in the OTOBO GUI. This can be done using the XML configuration below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:12
msgid "Operation"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:14
msgid "The operation is used to perform an action within OTOBO. This action is requested by the external system and can include special parameters in order to correctly execute the action. After the action is performed, OTOBO sends a defined confirmation to the external system."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:18
msgid "Operation Back End"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:20
msgid "Next we will show how to develop a new operation, each operation has to implement these subroutines:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:23
#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:645
msgid "``Run``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:25
msgid "We should implement each one of this methods in order to be able to execute the action handled by the provider (``Kernel/GenericInterface/Provider.pm``)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:29
msgid "Operation Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:31
msgid "In this section a sample operation module is shown and each subroutine is explained."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:54
msgid "We also include ``VariableCheck`` module to perform certain validation over some variables. Operations can not be instantiated by the object manager."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:122
msgid "The ``Run`` function is the main part of each operation. It receives all internal mapped data from remote system needed by the provider to execute the action, it performs the action and returns the result to the provider to be external mapped and deliver back to the remote system."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:124
msgid "This particular example returns the same data as came from the remote system, unless ``TestError`` parameter is passed. In this case it returns an error."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:128
msgid "Operation Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:130
msgid "There is the need to register this operation module to be accessible in the OTOBO GUI. This can be done using the XML configuration below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:149
msgid "Unit Test Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:151
msgid "Unit test for generic interface operations does not differs from other unit tests but it is needed to consider testing locally, but also simulating a remote connection. It is a good practice to test both separately since results could be slightly different."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:155
msgid "To learn more about unit tests, please take a look to the :doc:`../../contributing/unit-tests` chapter."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:157
msgid "The following is just the starting point for a unit test:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:437
msgid "WSDL Extension Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:439
msgid "WSDL files contain the definitions of the web services and its operations for SOAP messages, in case we will extend ``development/webservices/GenericTickeConnectorSOAP.wsdl`` in some places:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:441
msgid "Port Type:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:453
msgid "Binding:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:472
msgid "Type:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:498
msgid "Message:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:513
msgid "WADL Extension Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:515
msgid "WADL files contain the definitions of the web services and its operations for REST interface, add a new resource to ``development/webservices/GenericTickeConnectorREST.wadl``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:539
msgid "Web Service SOAP Extension Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:541
msgid "Web services can be imported into OTOBO by a YAML with a predefined structure in this case we will extend ``development/webservices/GenericTickeConnectorSOAP.yml`` for a SOAP web service."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:556
msgid "Web Service REST Extension Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-operation.rst:558
msgid "Web services can be imported into OTOBO by a YAML with a predefined structure in this case we will extend ``development/webservices/GenericTickeConnectorREST.yml`` for a REST web service."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:12
msgid "Network Transport"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:14
msgid "The network transport is used as method to send and receive information between OTOBO and a remote system. The generic interface configuration allows a web service to use different network transport modules for provider and requester, but the most common scenario is that the same transport module is used for both."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:18
msgid "OTOBO as provider"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:18
msgid "OTOBO uses the network transport modules to get the data from the remote system and the operation to be executed. After the operation is performed OTOBO uses them again to send the response back to the remote system."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:21
msgid "OTOBO as requester"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:21
msgid "OTOBO uses the network transport modules to send petitions to the remote system to perform a remote action along with the required data. OTOBO waits for the remote system response and send it back to the requester module."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:23
msgid "In both ways network transport modules deal with the data in the remote system format. It is not recommended to do any data transformation in this modules, as the mapping layer is the responsible to perform any data transformation needed during the communication. An exception of this is the data conversion that is required specifically by for the transport e.g. XML or JSON from / to Perl conversions."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:27
msgid "Transport Back End"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:29
msgid "Next we will show how to develop a new transport back end. Each transport back end has to implement these subroutines:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:32
msgid "``ProviderProcessRequest``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:33
msgid "``ProviderGenerateResponse``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:34
msgid "``RequesterPerformRequest``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:36
msgid "We should implement each one of this methods in order to be able to communicate correctly with a remote system in both ways. All network transport back ends are handled by the transport module (``Kernel/GenericInterface/Transport.pm``)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:38
msgid "Currently generic interface implements the HTTP SOAP and HTTP REST transports. If the planned web service can use HTTP SOAP or HTTP SOAP there is no need to create a new network transport module, instead we recommend to take a look into HTTP SOAP or HTTP REST configurations to check their settings and how it can be tuned according to the remote system."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:42
msgid "Network Transport Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:44
msgid "In case that the provided network transports does not match the web service needs, then in this section a sample network transport module is shown and each subroutine is explained. Normally transport modules uses CPAN modules as back ends. For example the HTTP SOAP transport modules uses ``SOAP::Lite`` module as back end."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:46
msgid "For this example a custom package is used to return the data without doing a real network request to a remote system, instead this custom module acts as a loop-back interface."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:72
msgid "This is common header that can be found in common OTOBO modules. The class/package name is declared via the ``package`` keyword. Transports can not be instantiated by the object manager."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:134
msgid "The ``ProviderProcessRequest`` function gets the request from the remote system (in this case the same OTOBO) and extracts the data and the operation to perform from the request. For this example the operation is always ``test_operation``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:136
msgid "The way this function parses the request to get the data and the operation name, depends completely on the protocol to be implemented and the external modules that are used for."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:186
msgid "This function sends the response back to the remote system for the requested operation."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:188
msgid "For this particular example we return a standard HTTP response success (200) or not (500), along with the required data on each case."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:219
msgid "This is the only function that is used by OTOBO as requester. It sends the request to the remote system and waits for its response."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:221
msgid "For this example we use a custom protocol handler to avoid send the request to the real network. This custom protocol is specified below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:252
msgid "This is the code for the custom protocol that we use. This approach is only useful for training or for testing environments where the remote systems are not available."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:254
msgid "For a new module development we do not recommend to use this approach, a real protocol needs to be implemented."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:258
msgid "Network Transport Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/gi-transport.rst:260
msgid "There is the need to register this network transport module to be accessible in the OTOBO GUI. This can be done using the XML configuration below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/log.rst:12
msgid "Log Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/log.rst:14
msgid "There is a global log interface for OTOBO that provides the possibility to create own log back ends."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/log.rst:16
msgid "Writing an own logging back end is as easy as reimplementing the ``Kernel::System::Log::Log()`` method."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/log.rst:20
msgid "Log Module Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/log.rst:22
msgid "In this small example, we'll write a little file logging back end which works similar to ``Kernel::System::Log::File``, but prepends a string to each logging entry."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/log.rst:125
msgid "Log Module Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/log.rst:127
msgid "To activate our custom logging module, the administrator can either set the existing configuration item ``LogModule`` manually to ``Kernel::System::Log::CustomFile``. To realize this automatically, you can provide an XML configuration file which overrides the default setting."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/log.rst:142
msgid "Log Module Use Case Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/log.rst:144
msgid "Useful logging back ends could be logging to a web service or to encrypted files."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/log.rst:148
msgid "``Kernel::System::Log`` has other methods than ``Log()`` which cannot be reimplemented, for example code for working with shared memory segments and log data caching."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/notify.rst:12
msgid "Notification Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/notify.rst:14
msgid "Notification modules are used to display a notification below the main navigation. You can write and register your own notification module. There are currently 5 ticket menus in the OTOBO framework."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/notify.rst:16
msgid "``AgentOnline``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/notify.rst:17
msgid "``AgentTicketEscalation``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/notify.rst:18
msgid "``CharsetCheck``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/notify.rst:19
msgid "``CustomerOnline``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/notify.rst:20
msgid "``UIDCheck``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/notify.rst:24
msgid "Notification Module Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/notify.rst:26
msgid "The notification modules are located under ``Kernel/Output/HTML/TicketNotification*.pm``. Following, there is an example of a notify module. Save it under ``Kernel/Output/HTML/TicketNotificationCustom.pm``. You just need 2 functions: ``new()`` and ``Run()``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/notify.rst:102
msgid "Notification Module Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/notify.rst:104
msgid "There is the need to activate your custom notification module. This can be done using the XML configuration below. There may be additional parameters in the config hash for your notification module."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/notify.rst:123
msgid "Notification Module Use Case Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/notify.rst:125
#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-menu.rst:148
msgid "Useful ticket menu implementation could be a link to an external tool if parameters (e.g. ``FreeTextField``) have been set."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:12
msgid "Output Filter"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:14
msgid "Output filters allow to modify HTML on the fly. It is best practice to use output filters instead of modifying ``.tt`` files directly. There are three good reasons for that. When the same adaptation has to be applied to several front end modules then the adaption only has to be implemented once. The second advantage is that when OTOBO is upgraded there is a chance that the filter doesn't have to be updated, when the relevant pattern has not changed. When two extensions modify the same file there is a conflict during the installation of the second package. This conflict can be resolved by using two output filters that modify the same front end module."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:17
msgid "There are three different kinds of output filters. They are active at different stages of the generation of HTML content."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:21
msgid "``FilterElementPost``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:23
msgid "These filters allow to modify the output of a template after it was rendered."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:25
msgid "To translate content, you can run ``$LayoutObject->Translate()`` directly. If you need other template features, just define a small template file for your output filter and use it to render your content before injecting it into the main data. It can also be helpful to use jQuery DOM operations to reorder/replace content on the screen in some cases instead of using regular expressions. In this case you would inject the new code somewhere in the page as invisible content (e. g. with the class ``Hidden``), and then move it with jQuery to the correct location in the DOM and show it."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:27
msgid "To make using post output filters easier, there is also a mechanism to request HTML comment hooks for certain templates/blocks. You can add in your module config XML like:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:45
msgid "This will cause the block ``CustomerTable`` in ``AgentTicketZoom.tt`` to be wrapped in HTML comments each time it is rendered:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:53
msgid "With this mechanism every package can request just the block hooks it needs, and they are consistently rendered. These HTML comments can then be used in your output filter for easy regular expression matching."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:57
msgid "``FilterContent``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:59
msgid "This kind of filter allows to process the complete HTML output for the request right before it is sent to the browser. This can be used for global transformations."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:63
msgid "``FilterText``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:65
msgid "This kind of output filter is a plugin for the method ``Kernel::Output::HTML::Layout::Ascii2HTML()`` and is only active when the parameter ``LinkFeature`` is set to 1. Thus the ``FilterText`` output filters are currently only active for the display of the body of plain text articles. Plain text articles are generated by incoming non-HTML mails and when OTOBO is configured to not use the Rich Text feature in the front end."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:69
msgid "Output Filter Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:71
msgid "See package `TemplateModule <https://github.com/RotherOSS/TemplateModule/tree/master/Kernel/Output/HTML>`__."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:75
msgid "Output Filter Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:77
msgid "See package `TemplateModule <https://github.com/RotherOSS/TemplateModule/tree/master/Kernel/Config/Files>`__."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:81
msgid "Output Filter Use Case Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:84
msgid "Show additional ticket attributes in ``AgentTicketZoom``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:84
msgid "This can be achieved with a ``FilterElementPost`` output filter."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:87
msgid "Show the service selection as a multi level menu"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:87
msgid "Use a ``FilterElementPost`` for this feature. The list of selectable services can be parsed from the processed template output. The multi level selection can be constructed from the service list and inserted into the template content. A ``FilterElementPost`` output filter must be used for that."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:90
msgid "Create links within plain text article bodies"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:90
msgid "A biotech company uses gene names like IPI00217472 in plain text articles. A ``FilterText`` output filter can be used to create links to a sequence database, e.g. http://srs.ebi.ac.uk/srsbin/cgi-bin/wgetz?-e+[IPI-acc:IPI00217472]+-vn+2, for the gene names."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:93
msgid "Prohibit active content"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:93
msgid "There is firewall rule that disallows all active content. In order to avoid rejection by the firewall, the HTML tag ``<applet>`` can be filtered with a ``FilterContent`` output filter."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:97
msgid "Every ``FilterElementPost`` output filter is constructed and run for every configured template that is needed for the current request. Thus low performance of the output filter or a large number of filters can severely degrade performance."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:101
msgid "Best Practices"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/outputfilter.rst:103
msgid "In order to increase flexibility the list of affected templates should be configured in system configuration."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:14
msgid "Since OTOBO 10 process management can use script modules to perform activities (script tasks) and/or sequence flow actions (know before as transition actions). This modules are located in ``Kernel::System::ProcessManagement::Modules``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:18
msgid "Process Management Modules"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:20
msgid "The process management modules are scripts written in Perl language to perform certain action or actions over the process ticket like set a dynamic field or change a queue. Or to any other part of the system like create new tickets."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:22
msgid "By default modules use a set of key value pairs to use them as parameters for the action e.g. to change queue of the process ticket, the queue or queue ID and its corresponding value is needed."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:24
msgid "Some scripts might require more than a simple key value pairs as parameters or its configuration might need to have a more user friendly GUI. In such cases OTOBO provides some configuration field types that can be also extended if needed."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:26
msgid "Current field types:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:29
msgid "Dropdown"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:29
msgid "Shows a drop-down list with predefined values."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:32
msgid "Key-value list"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:32
msgid "Shows a list of simple key value pairs (text inputs). Pairs can be added or deleted."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:35
msgid "Multi language Rich Text"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:35
msgid "Shows a Rich Text editor associated to a system language, also shows a language selector to add Rich Text fields for the proper selected language."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:38
msgid "Recipients"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:38
msgid "Shows a multi select field pre-filled with agents to be used as email recipients, also displays a free input field to be used to specify external email addresses to be added to the recipients list."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:42
msgid "Rich Text"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:41
msgid "Shows a single Rich Text field."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:45
msgid "Creating a New Process Management Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:47
msgid "The following is an example of how to create a process management module. It includes a section where all possible fields are defined as a reference. To create a new module only one field type is needed but consider that by convention the parameter user ID is used to impersonate all the actions in the module with another user than the one that triggers the action. Then it is a good practice to always include the key-value list field type along with any other needed field."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:51
msgid "Process Management Module Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:53
msgid "The following code implements a dummy process management module that can be used in script task activities or sequence flow actions."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:79
msgid "In this case we are inheriting from ``Base`` class, and the object manager dependencies are set."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:164
msgid "The constructor ``new()`` creates a new instance of the class. The configuration fields are defined here and they are set in ``$Self->{Config}``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:166
msgid "The configuration has two main entries:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:169
msgid "``Description``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:169
msgid "This is used to explain the administrators what does the module do and/or considerations for its configuration."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:172
msgid "``ConfigSets``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:172
msgid "This is just a container for the actual configuration fields."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:174
msgid "All configuration fields requires a type that defines the kind of field and they could also have an internal description to be used as the title of the field widget. If it is not defined, a default description is used."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:176
msgid "Each field defines its configuration parameters and capabilities. The following is a small reference for the fields provided by OTOBO out of the box."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:178
msgid "``Dropdown``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:181
#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:216
#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:242
msgid "``Mandatory``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:181
#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:242
msgid "Used to define if a value is required to be set."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:202
msgid "``Config``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:184
msgid "Holds the information to display the drop-down field."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:187
#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:722
msgid "``Data``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:187
msgid "Simple hash that defines the options for the drop-down. The keys are used internally, and the values are the options that the user sees in the screen."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:190
#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:156
#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:719
msgid "``Name``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:190
msgid "The name of the parameter."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:193
msgid "``Multiple``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:193
msgid "To define if only one or multiple values can be selected."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:196
msgid "``PossibleNone``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:196
msgid "Defines if the list of values offer an empty value or not."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:199
msgid "``Sort``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:199
msgid "Defines how the options will be sorted when the field is rendered. The possible values are: ``AlphanumericValue``, ``NumericValue``, ``AlphanumericKey`` and ``NumericKey``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:202
msgid "``Translation``:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:202
msgid "Set if the displayed values should be translated."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:204
msgid "``KeyValueList``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:216
#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:227
#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:242
msgid "``Defaults``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:207
msgid "Array of hashes that holds the default configuration for its key value pairs."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:210
#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:224
msgid "``Key``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:210
msgid "The name of a parameter."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:213
#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:227
#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:239
msgid "``Value``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:213
msgid "The default value of the parameter (optional)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:216
msgid "Mandatory parameters can not be renamed or removed (optional)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:218
msgid "``MultiLanguageRichText``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:221
msgid "Array of hashes that holds the default configuration each language and field part."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:224
msgid "This is composed by language such as ``en`` or ``es_MX``, followed by a ``_`` (underscore character) and then ``Subject`` or ``Body`` for the corresponding part of the field."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:227
msgid "The default value of the field part (optional)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:229
msgid "``Recipients``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:231
msgid "No further configuration is provided for this kind of field."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:233
msgid "``RichText``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:236
msgid "Array of hashes that holds the default configuration field (only the first element is used)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:239
msgid "The default value of the field."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:284
msgid "The ``Run`` method is the main part of the module. First sets a common message that can be used in error logs or any other purpose. For consistency its highly recommended to use it as described above."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:286
msgid "Next step is to check if the global parameters was sent correctly."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:288
msgid "By convention all modules should be able to override the current user ID by one is provided in the parameters (if any). This passed user ID should be used in any function call that requires it."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:290
msgid "User defined attribute values can use current ticket values by using OTOBO smart tags. ``_ReplaceTicketAttributes`` is used for normal text attributes, while ``_ReplaceAdditionalAttributes`` for Rich Texts. For more complex parameters it might need customized functions to replace this smart tags."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:292
msgid "The following is the proper logic of the module."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:294
msgid "If everything was OK it must return 1."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:298
msgid "Creating a New Process Management Module Configuration Field"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:300
msgid "The following is an example of how to create a process management module configuration field. This field can be used by any process management module after its configuration."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:304
msgid "Process Management Module Configuration Field Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:306
msgid "The following code implements a simple input process management module configuration field (test). The name of the field and its default value can be set trough a process management module ``ConfigSets``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:347
msgid "Every configuration field requires to implement at least 2 main methods: ``Render`` and ``GetParams``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:372
msgid "``Render`` method is responsible to create the required HTML for the field."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:374
msgid "In this example it first localize some parameters for more easy read and maintain."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:376
msgid "The following lines set the data to display. The field widget title ``Description`` is gather from the ``ConfigSet`` if defined, otherwise it uses a default text. Similar to the field ``Name``, for the ``Value`` it first checks if the activity or sequence flow action already have a stored value, if not it tries to use the default value from the ``ConfigSet``, or use empty otherwise."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:378
msgid "At the end it returns a structure with the HTML code from a template filled with the gathered data."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:393
msgid "For this example the ``GetParams`` method is very straight forward. It gets the name of the field from the ``ConfigSet`` or use a default, and gets the value from the web request."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:397
msgid "Process Management Module Configuration Field Template Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:399
msgid "The following code implements a basic HTML template for the test process management module configuration field."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/process-management-modules.rst:433
msgid "The template shows a simple text input element with its associated label."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/queue-preferences.rst:12
msgid "Queue Preferences Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/queue-preferences.rst:14
msgid "There is a DB queue preferences module which come with the OTOBO framework. It is also possible to develop your own queue preferences modules. The queue preferences modules are located under ``Kernel/System/Queue/*.pm``. For more information about their configuration see the admin manual. Following, there is an example of a queue preferences module. Save it under ``Kernel/System/Queue/PreferencesCustom.pm``. You just need 3 functions: ``new()``, ``QueuePreferencesSet()`` and ``QueuePreferencesGet()``. Return 1, then the synchronization is ok."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/queue-preferences.rst:18
msgid "Queue Preferences Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/queue-preferences.rst:20
msgid "The interface class is called ``Kernel::System::Queue``. The example queue preferences may be called ``Kernel::System::Queue::PreferencesCustom``. You can find an example below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/queue-preferences.rst:124
msgid "Queue Preferences Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/queue-preferences.rst:126
msgid "There is the need to activate your custom queue preferences module. This can be done using the XML configuration below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/queue-preferences.rst:141
msgid "Queue Preferences Use Case Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/queue-preferences.rst:143
#: ../../content/how-to-extend-otobo/otobo-module-layers/service-preferences.rst:144
msgid "Useful preferences implementation could be a SOAP or RADIUS back end."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/rootapplication.rst:12
msgid "Root Application Module Layer"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/rootapplication.rst:14
msgid "The root application module layer enables the developers to develop and load custom front end components. Components will be lazy loaded and are omnipresent in the front end application. They can use any API that is exposed to other components within the application, including its state."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/rootapplication.rst:16
msgid "Developing a custom root application component is as easy as creating a new file."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/rootapplication.rst:20
msgid "Root Application Component Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/rootapplication.rst:22
msgid "In this small example we'll write a little component, which outputs a custom footer on every page of the agent interface app."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/rootapplication.rst:24
msgid "Just create a new file ``SampleFooter.vue`` in ``/Frontend/Apps/Agent/Components/RootApplicationModule/Modules`` folder."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/rootapplication.rst:48
msgid "To activate our custom footer module, just rebuild the app that was modified. If a development server is used, it will need to be restarted to pick up the changes."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/service-preferences.rst:12
msgid "Service Preferences Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/service-preferences.rst:14
msgid "There is a DB service preferences module which come with the OTOBO framework. It is also possible to develop your own service preferences modules. The service preferences modules are located under ``Kernel/System/Service/*.pm``. For more information about their configuration see the admin manual. Following, there is an example of a service preferences module. Save it under ``Kernel/System/Service/PreferencesCustom.pm``. You just need 3 functions: ``new()``, ``ServicePreferencesSet()`` and ``ServicePreferencesGet()``. Return 1, then the synchronization is ok."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/service-preferences.rst:18
msgid "Service Preferences Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/service-preferences.rst:20
msgid "The interface class is called ``Kernel::System::Service``. The example service preferences may be called ``Kernel::System::Service::PreferencesCustom``. You can find an example below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/service-preferences.rst:125
msgid "Service Preferences Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/service-preferences.rst:127
msgid "There is the need to activate your custom service preferences module. This can be done using the XML configuration below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/service-preferences.rst:142
msgid "Service Preferences Use Case Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/sla-preferences.rst:12
msgid "SLA Preferences Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/sla-preferences.rst:14
msgid "There is a DB SLA preferences module which come with the OTOBO framework. It is also possible to develop your own SLA preferences modules. The SLA preferences modules are located under ``Kernel/System/SLA/*.pm``. For more information about their configuration see the admin manual. Following, there is an example of an SLA preferences module. Save it under ``Kernel/System/SLA/PreferencesCustom.pm``. You just need 3 functions: ``new()``, ``SLAPreferencesSet()`` and ``SLAPreferencesGet()``. Make sure the function returns 1."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/sla-preferences.rst:18
msgid "SLA Preferences Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/sla-preferences.rst:20
msgid "The interface class is called ``Kernel::System::SLA``. The example SLA preferences may be called ``Kernel::System::SLA::PreferencesCustom``. You can find an example below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/sla-preferences.rst:124
msgid "SLA Preferences Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/sla-preferences.rst:126
msgid "There is the need to activate your custom SLA preferences module. This can be done using the XML configuration below."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/sla-preferences.rst:141
msgid "SLA Preferences Use Case Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/sla-preferences.rst:143
msgid "Useful preferences implementation could be to store additional values on SLAs."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:12
msgid "Stats Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:14
msgid "There are two different types of internal stats modules - dynamic and static. This section describes how such stats modules can be developed."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:18
msgid "Dynamic Stats"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:20
msgid "In contrast to static stats modules, dynamic statistics can be configured via the OTOBO web interface. In this section a simple statistic module is developed. Each dynamic stats module has to implement these subroutines:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:23
msgid "``GetObjectName``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:24
msgid "``GetObjectAttributes``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:25
msgid "``ExportWrapper``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:26
msgid "``ImportWrapper``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:28
msgid "Furthermore the module has to implement either ``GetStatElement`` or ``GetStatTable``. And if the header line of the result table should be changed, a sub called ``GetHeaderLine`` has to be developed."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:32
msgid "Stats Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:34
msgid "In this section a sample stats module is shown and each subroutine is explained."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:55
msgid "This is a common boilerplate that can be found in common OTOBO modules. The class/package name is declared via the ``package`` keyword. Then the needed modules are used via the ``use`` keyword."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:82
msgid "The ``new`` is the constructor for this statistic module. It creates a new instance of the class. According to the coding guidelines objects of other classes that are needed in this module have to be created in ``new``. In lines 27 to 29 the object of the stats module is created. Lines 31 to 37 check if objects that are needed in this code - either for creating other objects or in this module - are passed. After that the other objects are created."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:92
msgid "``GetObjectName`` returns a name for the statistics module. This is the label that is shown in the drop down in the configuration as well as in the list of existing statistics (column *object*)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:151
msgid "In this sample stats module, we want to provide three attributes the user can chose from: a list of queues, a list of states and a time drop down. To get the values shown in the drop down, some operations are needed. In this case ``StateList`` and ``GetAllQueues`` are called."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:153
msgid "Then the list of attributes is created. Each attribute is defined via a hash reference. You can use these keys:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:156
#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:716
msgid "The label in the web interface."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:159
msgid "``UseAsXvalue``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:159
msgid "This attribute can be used on the x-axis."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:162
msgid "``UseAsValueSeries``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:162
msgid "This attribute can be used on the y-axis."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:165
msgid "``UseAsRestriction``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:165
msgid "This attribute can be used for restrictions."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:168
msgid "``Element``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:168
#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:719
msgid "The HTML field name."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:171
msgid "``Block``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:171
msgid "The block name in the template file (e.g. ``<OTOBO_HOME>/Kernel/Output/HTML/Standard/AgentStatsEditXaxis.tt``)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:174
msgid "``Values``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:174
#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:722
msgid "The values shown in the attribute."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:176
msgid "Hint: If you install this sample and you configure a statistic with some queues - lets say 'queue A' and 'queue B' - then these queues are the only ones that are shown to the user when he starts the statistic. Sometimes a dynamic drop down or multiselect field is needed. In this case, you can set ``SelectedValues`` in the definition of the attribute:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:207
msgid "``GetStatElement`` gets called for each cell in the result table. So it should be a numeric value. In this sample it does a simple ticket search. The hash ``%Param`` contains information about the *current* x-value and the y-value as well as any restrictions. So, for a cell that should count the created tickets for queue *Misc* with state *open* the passed parameter hash looks something like this:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:218
msgid "If the *per cell* calculation should be avoided, ``GetStatTable`` is an alternative. ``GetStatTable`` returns a list of rows, hence an array of array references. This leads to the same result as using ``GetStatElement``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:247
msgid "``GetStatTable`` gets all information about the stats query that is needed. The passed parameters contain information about the attributes (``Restrictions``, attributes that are used for x/y-axis) and the table structure. The table structure is a hash reference where the keys are the values of the y-axis and their values are hash references with the parameters used for ``GetStatElement`` subroutines."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:320
msgid "Sometimes the headers of the table have to be changed. In that case, a subroutine called ``GetHeaderLine`` has to be implemented. That subroutine has to return an array reference with the column headers as elements. It gets information about the x-values passed."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:368
msgid "Configured statistics can be exported into XML format. But as queues with the same queue names can have different IDs on different OTOBO instances it would be quite painful to export the IDs (the statistics would calculate the wrong numbers then). So an export wrapper should be written to use the names instead of ids. This should be done for each *dimension* of the stats module (x-axis, y-axis and restrictions)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:370
msgid "``ImportWrapper`` works the other way around - it converts the name to the ID in the instance the configuration is imported to."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:372
msgid "This is a sample export:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:408
msgid "Now, that all subroutines are explained, this is the complete sample stats module."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:615
msgid "Stats Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:635
msgid "If you have a lot of cells in the result table and the ``GetStatElement`` is quite complex, the request can take a long time."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:639
msgid "Static Stats"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:641
msgid "The subsequent paragraphs describe the static stats. Static stats are very easy to create as these modules have to implement only three subroutines."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:644
msgid "``Param``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:649
msgid "Static Stats Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:651
msgid "The following paragraphs describe the subroutines needed in a static stats."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:679
msgid "The ``new`` creates a new instance of the static stats class. First it creates a new object and then it checks for the needed objects."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:711
msgid "The ``Param`` method provides the list of all parameters/attributes that can be selected to create a static stat. It gets some parameters passed: The values for the stats attributes provided in a request, the format of the stats and the name of the object (name of the module)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:713
msgid "The parameters/attributes have to be hash references with these key-value pairs:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:716
msgid "``Frontend``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:724
msgid "Other parameter for the ``BuildSelection`` method of the ``LayoutObject`` can be used, as it is done with ``Size`` and ``Multiple`` in this sample module."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:771
msgid "The ``Run`` method actually generates the table data for the stats. It gets the attributes for this stats passed. In this sample in ``%Param`` a key ``TypeIDs`` and a key ``QueueIDs`` exist (see attributes in ``Param`` method) and their values are array references. The returned data consists of three parts: Two array references and an array. In the first array reference the title for the statistic is stored, the second array reference contains the headlines for the columns in the table. And then the data for the table body follow."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:971
msgid "Static Stats Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/stats.rst:973
msgid "There is no configuration needed. Right after installation, the module is available to create a statistic for this module."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-menu.rst:12
msgid "Ticket Menu Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-menu.rst:14
msgid "Ticket menu modules are used to display an additional link in the menu above a ticket. You can write and register your own ticket menu module. There are 4 ticket menus (*Generic*, *Lock*, *Responsible* and *TicketWatcher*) which come with the OTOBO framework. For more information please have a look at the OTOBO admin manual."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-menu.rst:18
msgid "Ticket Menu Module Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-menu.rst:20
msgid "The ticket menu modules are located under ``Kernel/Output/HTML/TicketMenu*.pm``. Following, there is an example of a ticket menu module. Save it under ``Kernel/Output/HTML/TicketMenuCustom.pm``. You just need 2 functions: ``new()`` and ``Run()``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-menu.rst:125
msgid "Ticket Menu Module Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-menu.rst:127
msgid "There is the need to activate your custom ticket menu module. This can be done using the XML configuration below. There may be additional parameters in the config hash for your ticket menu module."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-menu.rst:146
msgid "Ticket Menu Module Use Case Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-menu.rst:152
msgid "The ticket menu directs to an URL that can be handled. If you want to handle that request via the OTOBO framework, you have to write your own front end module."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-postmaster-modules.rst:12
msgid "Ticket Postmaster Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-postmaster-modules.rst:14
msgid "Postmaster modules are used during the postmaster process. There are two kinds of postmaster modules:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-postmaster-modules.rst:16
msgid "``PostMasterPre``: used after parsing an email."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-postmaster-modules.rst:17
msgid "``PostMasterPost``: used after an email is processed and is in the database."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-postmaster-modules.rst:19
msgid "If you want to create your own postmaster filter, just create your own module. These modules are located under ``Kernel/System/PostMaster/Filter/*.pm``. For default modules see the admin manual. You just need two functions: ``new()`` and ``Run()``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-postmaster-modules.rst:21
msgid "The following is an exemplary module to match emails and set X-OTOBO-Headers (see ``doc/X-OTOBO-Headers.txt`` for more info)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-postmaster-modules.rst:23
msgid "``Kernel/Config/Files/XML/MyModule.xml``:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-postmaster-modules.rst:48
msgid "And the actual filter code in ``Kernel/System/PostMaster/Filter/Example.pm``:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-postmaster-modules.rst:138
msgid "The following image shows you the email processing flow."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticket-postmaster-modules.rst:143
msgid "Email Processing Flow"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:12
msgid "Ticket Event Module"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:14
msgid "Ticket event modules are running right after a ticket or an article action took place. Per convention these modules are located in the directory ``Kernel/System/Ticket/Event``. A ticket event module needs only two functions: ``new()`` and ``Run()``. The method ``Run()`` receives at least the parameters ``Event``, ``UserID`` and ``Data``. The parameter ``Data`` is a referecne to a hash. It contains data of the ticket and, in the case of article related events, also data of the article."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:20
msgid "Ticket Event Module Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:22
msgid "See the files in ``Kernel/System/Ticket/Event`` folder of the source code."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:26
msgid "Ticket Event Module Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:28
msgid "See the settings in ``Kernel/Config/Files/XML/Ticket.xml`` that are starting with the name ``Ticket::EventModulePost###``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:32
msgid "Ticket Event Module Use Case Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:35
msgid "A ticket should be unlocked after a move action"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:35
msgid "This standard feature has been implemented with the ticket event module ``Kernel::System::Ticket::Event::ForceUnlock``. When this feature is not wanted, then it can be turned off by unsetting the system configuration entry ``Ticket::EventModulePost###910-ForceUnlockOnMove``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:38
msgid "Perform extra cleanup action when a ticket is deleted"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:38
msgid "A customized OTOBO might hold non-standard data in additional database tables. When a ticket is deleted then this additional data needs to be deleted. This functionality can be achieved with a ticket event module listening to ``TicketDelete`` events."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:42
msgid "New tickets should be twittered"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:41
msgid "A ticket event module listening to ``TicketCreate`` can send out tweets."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:45
msgid "Ticket and Article Events"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:47
msgid "Available ticket events:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:49
msgid "``TicketCreate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:50
msgid "``TicketDelete``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:51
msgid "``TicketTitleUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:52
msgid "``TicketUnlockTimeoutUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:53
msgid "``TicketQueueUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:54
msgid "``TicketTypeUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:55
msgid "``TicketServiceUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:56
msgid "``TicketSLAUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:57
msgid "``TicketCustomerUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:58
msgid "``TicketPendingTimeUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:59
msgid "``TicketLockUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:60
msgid "``TicketArchiveFlagUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:61
msgid "``TicketStateUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:62
msgid "``TicketOwnerUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:63
msgid "``TicketResponsibleUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:64
msgid "``TicketPriorityUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:65
msgid "``HistoryAdd``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:66
msgid "``HistoryDelete``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:67
msgid "``TicketAccountTime``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:68
msgid "``TicketMerge``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:69
msgid "``TicketSubscribe``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:70
msgid "``TicketUnsubscribe``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:71
msgid "``TicketFlagSet``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:72
msgid "``TicketFlagDelete``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:73
msgid "``EscalationResponseTimeNotifyBefore``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:74
msgid "``EscalationUpdateTimeNotifyBefore``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:75
msgid "``EscalationSolutionTimeNotifyBefore``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:76
msgid "``EscalationResponseTimeStart``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:77
msgid "``EscalationUpdateTimeStart``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:78
msgid "``EscalationSolutionTimeStart``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:79
msgid "``EscalationResponseTimeStop``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:80
msgid "``EscalationUpdateTimeStop``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:81
msgid "``EscalationSolutionTimeStop``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:82
msgid "``NotificationNewTicket``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:83
msgid "``NotificationFollowUp``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:84
msgid "``NotificationLockTimeout``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:85
msgid "``NotificationOwnerUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:86
msgid "``NotificationResponsibleUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:87
msgid "``NotificationAddNote``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:88
msgid "``NotificationMove``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:89
msgid "``NotificationPendingReminder``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:90
msgid "``NotificationEscalation``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:91
msgid "``NotificationEscalationNotifyBefore``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:92
msgid "``NotificationServiceUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:94
msgid "Available article events:"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:96
msgid "``ArticleCreate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:97
msgid "``ArticleUpdate``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:98
msgid "``ArticleSend``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:99
msgid "``ArticleBounce``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:100
#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:105
msgid "``ArticleAgentNotification``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:101
#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:106
msgid "``ArticleCustomerNotification``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:102
msgid "``ArticleAutoResponse``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:103
msgid "``ArticleFlagSet``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketevent.rst:104
msgid "``ArticleFlagDelete``"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketnumber-generator.rst:12
msgid "Ticket Number Generator Modules"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketnumber-generator.rst:14
msgid "Ticket number generators are used to create distinct identifiers aka ticket number for new tickets. Any method of creating a string of numbers is possible, you should use common sense about the length of the resulting string (guideline: 5-10)."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketnumber-generator.rst:16
msgid "When creating a ticket number, make sure the result is prefixed by the system configuration variable ``SystemID`` in order to enable the detection of ticket numbers on inbound email responses. A ticket number generator module needs the two functions ``TicketCreateNumber()`` and ``GetTNByString()``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketnumber-generator.rst:18
msgid "The method ``TicketCreateNumber()`` is called without parameters and returns the new ticket number."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketnumber-generator.rst:20
msgid "The method ``GetTNByString()`` is called with the param ``String`` which contains the string to be parsed for a ticket number and returns the ticket number if found."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketnumber-generator.rst:24
msgid "Ticket Number Generator Code Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketnumber-generator.rst:26
msgid "See files in ``Kernel/System/Ticket/Number`` folder of the source code."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketnumber-generator.rst:30
msgid "Ticket Number Generator Configuration Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketnumber-generator.rst:32
msgid "See settings in ``Kernel/Config/Files/XML/Ticket.xml`` started with the name ``Ticket::NumberGenerator``."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketnumber-generator.rst:36
msgid "Ticket Number Generator Use Case Example"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketnumber-generator.rst:39
msgid "Ticket numbers should follow a specific scheme"
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketnumber-generator.rst:39
msgid "You will need to create a new ticket number generator if the default modules don't provide the ticket number scheme you'd like to use."
msgstr ""

#: ../../content/how-to-extend-otobo/otobo-module-layers/ticketnumber-generator.rst:43
msgid "You should stick to the code of ``GetTNByString()`` as used in existing ticket number generators to prevent problems with ticket number parsing. Also the routine to detect a loop in ``TicketCreateNumber()`` should be kept intact to prevent duplicate ticket numbers."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:12
msgid "Writing A New OTOBO Front End Component"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:14
msgid "In this example, we will try to write a new OTOBO front end component. Starting with OTOBO 10, the framework supports single page application front ends written in Vue.js and based on a new JavaScript toolchain. First iteration contains the new external interface, for which we will try to write a custom component. You will need to have a running OTOBO :doc:`../get-started/development-environment` as specified in the chapter of the same name."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:18
msgid "The Goal"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:20
msgid "We want to write a small front end component that displays the text *Hello World* when called up. This will be a route component, meaning it will be available in the external interface when called with a carefully crafted URL."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:24
msgid "Using The Skeleton Command"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:26
msgid "To speed up the development, we should use a skeleton command to get a boilerplate template file which we can build upon."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:28
msgid "On a running OTOBO instance, call the following command to generate the template. We will use ``HelloWorld`` as the name of our new component:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:34
msgid "In the command ``--component-directory`` is the directory of your module, ``--component-subdirectory`` path under ``Frontend/`` folder that will house the component file. For now, use ``--no-docs`` switch to skip creation of the documentation component for the design system."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:36
msgid "This command will generate two files with following paths:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:46
msgid "The Route Configuration"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:48
msgid "In order to allow the route in the external interface application, we need to add a correct route configuration that points to our component. Therefore we create a file ``Kernel/Config/Files/XML/HelloWorld.xml`` with following definition:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:85
msgid "``Group`` and ``GroupRo`` can be used to limit the route screen to users with certain groups. Please note that this only concerns the authenticated customer users."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:86
msgid "``Path`` is actually the slug under which the route component will be available. The full URL in this case will be ``/external/hello-world``, and any subsequent path component will be passed as a parameter named ``headingText``. If your system has ``Frontend::PrefixPath`` configured, full URL will be prepended by it."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:87
msgid "``Alias`` can be used to provide an alias for the same route (e. g. ``/hello-world-alt``). It will point to the same component."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:88
msgid "``Component`` is the component identifier, first part of the filename, without the ``.vue`` extension. In case of component folders, it's the name of the root folder. See :ref:`Component Folders` for more information."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:89
msgid "``IsPublic`` defines if the route will be accessible by unauthenticated users (0/Empty - not accessible, 1 - accessible)."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:90
msgid "``Props`` defines if the route will be passed URI parameters as prop values (0/Empty - not passed, 1 - passed). See :ref:`Passing Parameters to the Route Component` for more information."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:94
msgid "Component Template Code"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:96
msgid "Let's fire up the code editor now and take a closer look at the ``HelloWorld.vue`` file that our skeleton command created."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:98
msgid "Top part of the file contains a template section which should contain Vue.js template code. For example, let's modify it so it displays a heading with a text variable:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:116
msgid "OTOBO supports number of filters, with ``translate`` being one of them. It even supports translation of string literals with placeholder values, you can use it like this:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:124
msgid "Component Core Code"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:126
msgid "Next, we add a support for a prop to our component core code block, following is a modified and abridged version suitable for an example:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:143
msgid "This adds a prop with the name ``headingText`` to our component, which is of type string and has a sensible default value."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:145
msgid "Usage of ``translatable()`` no-op method is limited to marking translatable strings which appear in the code. Please note that this is not required for string literals which are piped to the translate filter, as this will be assumed from the start. Rule of thumb is to use the marker anywhere where the string is not translated at the place where it is defined."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:149
msgid "Component Style Code"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:151
msgid "Last, but not the least, we have an option to specify styles used by the component. For this we have access to the SCSS, which is a flavor of SASS CSS extension set. To leverage it, just add a style tag at the end of the component file:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:164
msgid "Inside the style block, you will have access to certain set of global variables and mixins. Please refer to the framework code for details (take a look at the ``Frontend/Styles/globals.js``)."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:166
msgid "Please note that while the styles will be loaded only when your component is referenced, these will be globally available afterwards since the CSS is inherently global for the same page. There is an option to scope the styles just to your component, you can do this via the ``scoped`` attribute on the style tag, but this might not be necessary with clever usage of BEM approach in designing your class names."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:170
msgid "Passing Parameters to the Route Component"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:172
msgid "In the route configuration above, we defined the route path that contains a parameter placeholder (``headingText``). By activating the ``Props`` flag, we made sure that the value of this parameter will be bound to our component prop with the same name every time a route is entered."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:174
msgid "For example, if we enter the route via the ``/external/hello-world`` URL, our component prop will be undefined and therefore will get its default value."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:179
msgid "Passing Parameters - Default Prop Value"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:181
msgid "But, if we access the route via the ``/external/hello-world/Value``, the prop will be set to string ``Value``, and even automatically translated in the current user language (where applicable)."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:186
msgid "Passing Parameters - Translated Prop Value"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:190
msgid "Component Folders"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:192
msgid "In case of self-enclosed components, you might want to ship some additional files with it. Sometimes it's better to modularize the code base since it's easier to maintain. In case of front end components you have a really simple way of doing this: component folders. Instead of a single ``.vue`` file for a component, enclose the file named ``index.vue`` in a folder named as your component. Something like this:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:199
msgid "Then, simply add new files in the same folder, following a sane structure:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:213
msgid "You get the idea. It will then be possible to reference the new files via relative paths, in order to achieve something like this in the parent component (``index.vue``):"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:221
msgid "Or, something like this:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:235
msgid "Even external styles can be referenced in the correct block:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:243
msgid "With this approach you will be left with a packaged component in a single folder that follows the logical tree hierarchy, and makes all resources easily findable when needed."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:247
msgid "Packaging Additional Vendor Modules"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:249
msgid "In certain cases, you might need to ship additional Node.js modules with your package. Unfortunately, both NPM and OTOBO do not support easy addition of modules to the root ``node_modules/`` folder, but there is a mechanism to provide pre-packaged module files."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:251
msgid "Simply create a ``Frontend/Vendor`` folder in your package, and add your module resources in sub-folders within it."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:253
msgid "For example, let us assume we want to ship a useful ``vue-full-calendar`` component and its dependencies as part of our package. This component has following NPM dependencies:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:260
msgid "However, some of its dependencies have even more dependencies and we can inspect them too:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:272
msgid "Quick check will inform us that both ``babel-runtime`` and ``moment`` are actually part of the OTOBO framework dependencies:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:293
msgid "This means that we don't have to ship those modules too, since they will be available out-of-box. While it's cumbersome to check all dependencies, it will be worthwhile because our package will be smaller. We will also prevent issues with overriding framework dependencies, since ``Frontend/Vendor`` wins always."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:295
msgid "Let's now install what we need and discard what we don't need. The easiest way to do it is via the following NPM command:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:314
msgid "Now we remove those modules which we know are provided by the framework:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:327
msgid "Much better. Now we move the modules to their correct place:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:335
msgid "Final optimization would be to remove unneeded files from the specific module folders. This might prove to be complicated, but it's worth it since it will further reduce size of the modules and number of files that need to be included in the package."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:337
msgid "For example, let's remove minimized JS files from the ``fullcalendar`` module because we identified that the Vue component uses full dist files only:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:343
msgid "It's also safe to remove jQuery source and minimized files as well, since the ``fullcalendar`` uses original dist files too:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-new-otobo-frontend-component.rst:351
msgid "We are left with approx. 100+ files which we need to include in our SOPM files, like any other regular package file. Once we do this, these dependencies will be present and resolvable in the target system:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:12
msgid "Writing A New OTOBO Front End Module"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:14
msgid "In this chapter, the writing of a new OTOBO module is illustrated on the basis of a simple small program. Necessary prerequisite is an OTOBO development environment as specified in the chapter of the same name."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:18
msgid "What we want to write"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:20
msgid "We want to write a little OTOBO module that displays the text 'Hello World' when called up. First of all we must build the directory ``/Hello World`` for the module in the developer directory. In this directory, all directories existent in OTOBO can be created. Each module should at least contain the following directories:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:34
msgid "Default Config File"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:36
msgid "The creation of a module registration facilitates the display of the new module in OTOBO. Therefore we create a file ``/Kernel/Config/Files/XML/HelloWorld.xml``. In this file, we create a new config element. The impact of the various settings is described in the chapter :doc:`../how-it-works/config-mechanism`."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:118
msgid "Front End Module"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:120
msgid "After creating the links and executing the system configuration, a new module with the name 'HelloWorld' is displayed. When calling it up, an error message is displayed as OTOBO cannot find the matching front end module yet. This is the next thing to be created. To do so, we create the following file:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:175
msgid "Core Module"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:177
msgid "Next, we create the file for the core module ``/HelloWorld/Kernel/System/HelloWorld.pm`` with the following content:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:273
msgid "Template File"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:275
msgid "The last thing missing before the new module can run is the relevant HTML template. Thus, we create the following file:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:291
msgid "The module is working now and displays the text *Hello World* when called."
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:295
msgid "Language File"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:297
msgid "If the text *Hello World!* is to be translated into for instance German, you can create a translation file for this language in ``HelloWorld/Kernel/Language/de_AgentHelloWorld.pm``. Example:"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:317
msgid "Summary"
msgstr ""

#: ../../content/how-to-extend-otobo/writing-otobo-application.rst:319
msgid "The example given above shows that it is not too difficult to write a new module for OTOBO. It is important, though, to make sure that the module and file name are unique and thus do not interfere with the framework or other expansion modules. When a module is finished, an OPM package must be generated from it (see chapter :doc:`../how-to-publish-otobo-extensions/package-building`)."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions.rst:12
msgid "How to Publish Your OTOBO Extensions"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:12
msgid "Package Building"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:14
msgid "If you want to create an OPM package (``.opm``) you need to create a spec file (``.sopm``) which includes the properties of the package."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:18
msgid "Package Spec File"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:20
msgid "The OPM package is XML based. You can create/edit the ``.sopm`` via a text or XML editor. It contains meta data, a file list and database options."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:27
msgid "``<Name>`` \\*"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:23
msgid "The package name."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:34
msgid "``<Version>`` \\*"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:30
msgid "The package version."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:49
msgid "``<Framework>`` \\*"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:37
msgid "The targeted framework version (7.0.x means e.g. 7.0.1 or 7.0.2)."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:43
msgid "Can also be used several times."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:56
msgid "``<Vendor>`` \\*"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:52
msgid "The package vendor."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:63
msgid "``<URL>`` \\*"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:59
msgid "The vendor URL."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:70
msgid "``<License>`` \\*"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:66
msgid "The license of the package."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:78
msgid "``<ChangeLog>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:73
msgid "The package change log."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:86
msgid "``<Description>`` \\*"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:81
msgid "The package description in different languages."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:101
msgid "Package Actions"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:89
msgid "The possible actions for the package after installation. If one of these actions is not defined on the package, it will be considered as possible."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:97
msgid "A special package action is ``PackageAllowDirectUpdate``. Only if it is defined on the package and set to true, a package can be upgraded from a lower major version (earlier than the last one) to the latest version. (e.g. a package for OTOBO 5 updated to OTOBO 7)."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:108
msgid "``<BuildHost>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:104
#: ../../content/how-to-publish-otobo-extensions/package-building.rst:111
msgid "This will be filled in automatically by OPM."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:115
msgid "``<BuildDate>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:123
msgid "``<PackageRequired>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:118
msgid "Packages that must be installed beforehand. If ``PackageRequired`` is used, a version of the required package must be specified."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:131
msgid "``<ModuleRequired>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:126
msgid "Perl modules that must be installed beforehand."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:140
msgid "``<OS>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:134
msgid "Required OS."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:152
msgid "``<Filelist>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:143
msgid "This is a list of files included in the package."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:176
msgid "``<DatabaseInstall>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:155
msgid "Database entries that have to be created when a package is installed."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:176
msgid "You also can choose ``<DatabaseInstall Type=\"post\">`` or ``<DatabaseInstall Type=\"pre\">`` to define the time of execution separately (``post`` is default). For more info see :ref:`Package Life Cycle`."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:192
msgid "``<DatabaseUpgrade>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:179
msgid "Information on which actions have to be performed in case of an upgrade."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:181
#: ../../content/how-to-publish-otobo-extensions/package-building.rst:301
msgid "Example if already installed package version is below 1.3.4 (e. g. 1.2.6), the defined action will be performed:"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:192
msgid "You also can choose ``<DatabaseUpgrade Type=\"post\">`` or ``<DatabaseUpgrade Type=\"pre\">`` to define the time of execution separately (``post`` is default). For more info see :ref:`Package Life Cycle`."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:201
msgid "``<DatabaseReinstall>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:195
msgid "Information on which actions have to be performed if the package is reinstalled."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:201
msgid "You also can choose ``<DatabaseReinstall Type=\"post\">`` or ``<DatabaseReinstall Type=\"pre\">`` to define the time of execution separately (``post`` is default). For more info see :ref:`Package Life Cycle`."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:212
msgid "``<DatabaseUninstall>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:204
msgid "Actions to be performed on package uninstall."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:212
msgid "You also can choose ``<DatabaseUninstall Type=\"post\">`` or ``<DatabaseUninstall Type=\"pre\">`` to define the time of execution separately (``post`` is default). For more info see :ref:`Package Life Cycle`."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:224
msgid "``<IntroInstall>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:215
msgid "To show a pre or post install introduction in installation dialog."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:223
#: ../../content/how-to-publish-otobo-extensions/package-building.rst:235
#: ../../content/how-to-publish-otobo-extensions/package-building.rst:246
#: ../../content/how-to-publish-otobo-extensions/package-building.rst:257
msgid "You can also use the ``Format`` attribute to define if you want to use ``html`` (which is default) or ``plain`` to use automatically a ``<pre></pre>`` tag when intro is shown (to keep the newlines and whitespace of the content)."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:235
msgid "``<IntroUninstall>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:227
msgid "To show a pre or post uninstall introduction in uninstallation dialog."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:246
msgid "``<IntroReinstall>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:238
msgid "To show a pre or post reinstall introduction in re-installation dialog."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:257
msgid "``<IntroUpgrade>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:249
msgid "To show a pre or post upgrade introduction in upgrading dialog."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:272
msgid "``<CodeInstall>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:260
msgid "Perl code to be executed when the package is installed."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:274
msgid "You also can choose ``<CodeInstall Type=\"post\">`` or ``<CodeInstall Type=\"pre\">`` to define the time of execution separately (``post`` is default). For more info see :ref:`Package Life Cycle`."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:285
msgid "``<CodeUninstall>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:277
msgid "Perl code to be executed when the package is uninstalled. On pre or post time of package uninstallation."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:285
msgid "You also can choose ``<CodeUninstall Type=\"post\">`` or ``<CodeUninstall Type=\"pre\">`` to define the time of execution separately (``post`` is default). For more info see :ref:`Package Life Cycle`."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:296
msgid "``<CodeReinstall>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:288
msgid "Perl code to be executed when the package is reinstalled."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:296
msgid "You also can choose ``<CodeReinstall Type=\"post\">`` or ``<CodeReinstall Type=\"pre\">`` to define the time of execution separately (``post`` is default). For more info see :ref:`Package Life Cycle`."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:309
msgid "``<CodeUpgrade>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:299
msgid "Perl code to be executed when the package is upgraded (subject to ``version`` tag)."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:309
msgid "You also can choose ``<CodeUpgrade Type=\"post\">`` or ``<CodeUpgrade Type=\"pre\">`` to define the time of execution separately (``post`` is default). For more info see :ref:`Package Life Cycle`."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:335
msgid "``<PackageMerge>``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:312
msgid "This tag signals that a package has been merged into another package. In this case the original package needs to be removed from the file system and the packages database, but all data must be kept."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:314
msgid "Let's assume that ``PackageOne`` was merged into ``PackageTwo``. Then ``PackageTwo.sopm`` should contain this:"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:320
msgid "If ``PackageOne`` also contained database structures, we need to be sure that it was at the latest available version of the package to have a consistent state in the database after merging the package. The attribute ``TargetVersion`` does just this: it signifies the last known version of ``PackageOne`` at the time ``PackageTwo`` was created. This is mainly to stop the upgrade process if in the user's system a version of ``PackageOne`` was found that is *newer* than the one specified in ``TargetVersion`` as this could lead to problems."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:322
msgid "Additionally it is possible to add required database and code upgrade tags for ``PackageOne`` to make sure that it gets properly upgraded to the ``TargetVersion`` *before* merging it - to avoid inconsistency problems. Here's how this could look like:"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:335
msgid "As you can see the attribute ``Type=\"merge\"`` needs to be set in this case. These sections will only be executed if a package merge is possible."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:357
msgid "Package Conditions"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:340
msgid "``IfPackage`` and ``IfNotPackage`` attributes can be added to the regular ``Database*`` and ``Code*`` sections. If they are present, the section will only be executed if another package is or is not in the local package repository."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:348
msgid "or"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:356
msgid "These attributes can be also set in the ``Database*`` and ``Code*`` sections inside the ``PackageMerge`` tags."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:360
msgid "Example .sopm"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:362
msgid "This is an example spec file looks with some of the above tags."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:409
msgid "Package Build"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:411
msgid "To build an .opm package from the spec opm."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:422
#: ../../content/how-to-publish-otobo-extensions/package-building.rst:429
msgid "Package Life Cycle"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-building.rst:424
msgid "The following image shows you how the life cycle of a package installation, upgrade and uninstallation works in the back end step by step."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:12
msgid "Package Management"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:14
msgid "The OPM (OTOBO Package Manager) is a mechanism to distribute software packages for the OTOBO framework via HTTP, FTP or file upload."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:16
msgid "For example, the OTOBO project offers OTOBO modules like a calendar, a file manager or web mail in OTOBO packages via online repositories on our FTP servers. The packages can be managed (install, upgrade and uninstall) via the admin interface."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:20
msgid "Package Distribution"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:22
msgid "If you want to create an OPM online repository, just tell the OTOBO framework where the location is by activating the system configuration setting ``Package::RepositoryList`` and adding the new location there. Then you will have a new select option in the package manager."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:24
msgid "In your repository, create an index file for your OPM packages. OTOBO just reads this index file and knows what packages are available."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:32
msgid "Package Commands"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:34
msgid "You can use the following OPM commands over the admin interface or over ``bin/otobo.Console.pl`` to manage admin jobs for OPM packages."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:38
msgid "Install"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:40
msgid "Install OPM packages."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:42
#: ../../content/how-to-publish-otobo-extensions/package-management.rst:52
#: ../../content/how-to-publish-otobo-extensions/package-management.rst:62
#: ../../content/how-to-publish-otobo-extensions/package-management.rst:72
msgid "Web: http://localhost/otobo/index.pl?Action=AdminPackageManager"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:44
msgid "CMD: ``bin/otobo.Console.pl Admin::Package::Install /path/to/package.opm``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:48
msgid "Uninstall"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:50
msgid "Uninstall OPM packages."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:54
msgid "CMD: ``bin/otobo.Console.pl Admin::Package::Uninstall /path/to/package.opm``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:58
msgid "Upgrade"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:60
msgid "Upgrade OPM packages."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:64
msgid "CMD: ``bin/otobo.Console.pl Admin::Package::Upgrade /path/to/package.opm``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:68
msgid "List"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:70
msgid "List all OPM packages."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-management.rst:74
msgid "CMD: ``bin/otobo.Console.pl Admin::Package::List``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:12
msgid "Package Porting"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:14
msgid "With every new minor or major version of OTOBO, you need to port your packages and make sure they still work with the OTOBO API."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:16
msgid "This section lists changes that you need to examine when porting your package from OTOBO 7 to 8."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:20
msgid "Front End Messages"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:22
msgid "In an effort to improve consistency and enforce new UX guidelines, a new and common front end messages API has been introduced in OTOBO 8. Developers should strive to use only this way of informing users of application changes. A front end component has been created for this feature, and it's included by default in every application."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:24
msgid "The API has been reused from a previous integration, albeit with some changes. By emitting an event on the global event bus it is still possible to trigger display of a message on the user screen. For example, in order to show a toast style message, you can just emit an event like so:"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:37
msgid "If your use case is to prevent user from interacting with the app until they make a choice or acknowledge a message, you can trigger display of a blocking modal message. The interface is similar, please note the different name of the event:"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:50
msgid "Both message styles provide numerous configuration options, so make sure to consult the `component documentation <https://doc.otobo.de/doc/api/otobo/8.0/frontend/dist/designsystem/#/documentation/components/common/common-messages>`__  in the design system for complete API description."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:54
msgid "Renamed Message Events"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:56
msgid "Front end message component improvements meant that some event names had to be renamed, it will be expected from you to port existing packages that use them to conform to the new format. Please find a table below containing all affected events."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:59
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:107
msgid "Old name"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:59
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:107
msgid "New name"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:61
msgid "``showNotification``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:61
msgid "``showToastMessage``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:63
msgid "``clearNotification``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:63
msgid "``hideToastMessage``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:68
msgid "Styling Improvements"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:70
msgid "In OTOBO 7, new front end stack has been introduced. However, since only one major front end application was shipped (for the external interface), there was no need to make sure that components living in the shared namespace have support for different styling. With OTOBO 8, this was bound to change, and now OTOBO supports app-specific styling in components."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:74
msgid "Application Specific Styling in Shared Components"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:76
msgid "Usage is quite simple: whenever you need to apply an app-specific style, wrap your SCSS code in the following mixin:"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:92
msgid "Usage of the mixin guarantees your block will only be loaded where appropriate (in this example in the external interface app). In the block you are free to use application specific global variables and functions, without any restrictions. Everything that is available within the app will be allowed."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:96
msgid "Design system will load appropriate style depending on current choice. For example, there will be a drop-down menu shown above the component example, allowing the user to switch the styles. All you have to do is make sure your component lives in the shared namespace and implements the mixin above, as needed."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:98
msgid "In order to provide this mechanism, it was required to refactor all the styles to conform to the BEM specification. This now applies to any variable names, mixins, functions, etc. By looking at their names, now it will be perfectly clear where they are coming from, and the chance for any possible collisions is decreased to the minimum."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:102
msgid "Renamed SCSS Literals"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:104
msgid "Since some SCSS literals had to be renamed, it will be expected from you to port existing packages that use them to conform to the new format. Please find a table below containing all affected literals."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:107
msgid "Namespace"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:107
msgid "Origin"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:109
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:111
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:113
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:115
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:117
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:119
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:121
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:123
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:125
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:127
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:129
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:131
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:133
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:135
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:137
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:139
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:141
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:143
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:145
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:147
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:149
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:151
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:153
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:155
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:157
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:159
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:161
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:163
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:165
msgid "Shared"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:109
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:111
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:113
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:115
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:117
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:119
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:121
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:123
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:125
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:127
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:129
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:131
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:133
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:135
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:137
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:139
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:179
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:181
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:183
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:185
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:187
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:189
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:191
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:193
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:195
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:197
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:199
msgid "*_colors*"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:109
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:111
msgid "``$base``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:109
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:111
msgid "``$Color__Base``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:113
msgid "``$white``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:113
msgid "``$Color__White``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:115
msgid "``$alert``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:115
msgid "``$Color__Alert``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:117
msgid "``$warning``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:117
msgid "``$Color__Warning``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:119
msgid "``$success``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:119
msgid "``$Color__Success``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:121
msgid "``$shadow``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:121
msgid "``$Color__Shadow``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:123
msgid "``$black100``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:123
msgid "``$Color__Black100``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:125
msgid "``$black90``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:125
msgid "``$Color__Black90``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:127
msgid "``$black80``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:127
msgid "``$Color__Black80``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:129
msgid "``$black70``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:129
msgid "``$Color__Black70``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:131
msgid "``$black50``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:131
msgid "``$Color__Black50``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:133
msgid "``$black30``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:133
msgid "``$Color__Black30``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:135
msgid "``$black20``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:135
msgid "``$Color__Black20``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:137
msgid "``$black10``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:137
msgid "``$Color__Black10``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:139
msgid "``$black4``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:139
msgid "``$Color__Black4``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:141
msgid "*_functions*"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:141
msgid "``calculateRem``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:141
msgid "``Function__CalculateRem``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:143
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:145
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:147
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:149
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:151
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:153
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:155
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:157
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:159
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:161
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:163
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:165
msgid "*_mixins*"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:143
msgid "``border-radius``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:143
msgid "``Mixin__BorderRadius``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:145
msgid "``list-reset``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:145
msgid "``Mixin__ListReset``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:147
msgid "``FontSize``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:147
msgid "``Mixin__FontSize``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:149
msgid "``MarginBottom--Responsive``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:149
msgid "``Mixin__MarginBottom--Responsive``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:151
msgid "``shadow``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:151
msgid "``Mixin__Shadow``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:153
msgid "``placeholder``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:153
msgid "``Mixin__Placeholder``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:155
msgid "``float-label-container``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:155
msgid "``Mixin__FloatLabel__Container``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:157
msgid "``float-label``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:157
msgid "``Mixin__FloatLabel``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:159
msgid "``float-label-input``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:159
msgid "``Mixin__FloatLabel__Input``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:161
msgid "``float-label-scaled``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:161
msgid "``Mixin__FloatLabel--Scaled``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:163
msgid "``linearGradient``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:163
msgid "``Mixin__LinearGradient``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:165
msgid "``linearGradientoverlay``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:165
msgid "``Mixin__LinearGradient--Overlay``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:167
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:169
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:171
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:173
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:175
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:177
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:179
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:181
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:183
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:185
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:187
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:189
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:191
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:193
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:195
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:197
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:199
msgid "External"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:167
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:169
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:171
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:173
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:175
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:177
msgid "*_variables*"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:167
msgid "``$container-max-width``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:167
msgid "``$Variable__External__ContainerMaxWidth``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:169
msgid "``$spacing-small``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:169
msgid "``$Variable__External__Spacing--Small``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:171
msgid "``$spacing-medium``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:171
msgid "``$Variable__External__Spacing--Medium``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:173
msgid "``$font-small``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:173
msgid "``$Variable__External__FontSize--Small``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:175
msgid "``$font-smaller``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:175
msgid "``$Variable__External__FontSize--Smaller``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:177
msgid "``$font-smallest``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:177
msgid "``$Variable__External__FontSize--Smallest``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:179
msgid "``$primary``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:179
msgid "``$Color__External__Primary``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:181
msgid "``$primary-darker``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:181
msgid "``$Color__External__Primary--Darker``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:183
msgid "``$primary-dark``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:183
msgid "``$Color__External__Primary--Dark``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:185
msgid "``$primary-lighter``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:185
msgid "``$Color__External__Primary--Lighter``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:187
msgid "``$primary-light``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:187
msgid "``$Color__External__Primary--Light``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:189
msgid "``$highlight``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:189
msgid "``$Color__External__Highlight``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:191
msgid "``$highlight-darker``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:191
msgid "``$Color__External__Highlight--Darker``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:193
msgid "``$highlight-dark``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:193
msgid "``$Color__External__Highlight--Dark``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:195
msgid "``$highlight-lighter``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:195
msgid "``$Color__External__Highlight--Lighter``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:197
msgid "``$highlight-light``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:197
msgid "``$Color__External__Highlight--Light``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:199
msgid "``$gray-light``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:199
msgid "``$Color__External__Gray--Light``"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:204
msgid "Encode API Changed"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:206
msgid "The legacy method ``Convert2CharsetInternal()`` was dropped. Please replace any usages of this with ``Convert()`` and a ``To => 'utf-8'`` parameter like this:"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:216
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:245
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:272
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:313
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:376
#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:417
msgid "Replace this by:"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:229
msgid "LinkObject API Changed"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:231
msgid "The method ``LinkAdd()`` has a slightly changed return value. Instead of a boolean return value it returns now the ``LinkID`` of the added link. You need to save the ``LinkID`` in order to delete a link later."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:259
msgid "The method ``LinkDelete()`` has a changed signature and return value. Instead of a boolean return value it returns now the ``LinkData`` as a hash. The parameter list now only requires the ``LinkID`` and the ``UserID``."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:283
msgid "Event Handling Changes"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:285
msgid "The event handling was changed from the previous ``Kernel::System::Event`` and ``Kernel::System::EventHandler`` modules to the `Moose <https://metacpan.org/pod/Moose>`__ role based ``Kernel::System::Event::Handler`` which handles all event types and modules in dedicated event queues."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:287
msgid "Back end files emitting events (i.e. containing ``EventHandler()`` calls) have to be modified to use the new event handling role."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:289
msgid "Remove code like this:"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:335
msgid "In order to ensure the correct behavior it is imperative that all possible events for an object type are known via the system configuration (e.g. ``Events###Ticket`` for all ticket events). **This configuration is now required**. Exceptions for dynamically created events like those of dynamic fields have to be added to ``Kernel::System::Event::Handler::_EventListBuild``."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:337
msgid "A configuration like this:"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:352
msgid "Should be modified and amended as necessary, like this:"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:368
msgid "As the generic interface provides event filters for every object type, it is now **mandatory** to provide a module for every object type which retrieves object data for the filter. These modules reside in ``Kernel/GenericInterface/Event/ObjectType``."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:370
msgid "If an event list is required in your code and you have an occurrence of this:"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:383
msgid "``MojoUserAgent`` Added, ``WebUserAgent`` Deprecated"
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:385
msgid "The legacy ``Kernel::System::WebUserAgent`` was deprecated and ``Kernel::System::MojoUserAgent`` provided as a modern alternative."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:387
msgid "Now it is possible to use the full `Mojo::UserAgent <https://metacpan.org/pod/Mojo::UserAgent>`__ API on instances of the new HTTP user agent."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:391
msgid "The legacy ``WebUserAgent`` will be removed in a future version of OTOBO. Please update all code that used it to the new object."
msgstr ""

#: ../../content/how-to-publish-otobo-extensions/package-porting.rst:393
msgid "You can replace old code like:"
msgstr ""

#: ../../content/index.rst:18
msgid "OTOBO Development Tutorial"
msgstr ""

#: ../../content/index.rst:20
msgid "This work is copyrighted by OTRS AG (https://otrs.com), Zimmersmühlenweg 11, 61440 Oberursel, Germany."
msgstr ""

#: ../../content/index.rst:23
msgid "Copyright © for modifications and amendments 2019-2020 ROTHER OSS GmbH (https://otobo.de), Oberwalting 31, 94339 Leiblfing, Germany"
msgstr ""

#: ../../content/index.rst:26
msgid "Terms and Conditions OTRS: Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license can be found on the GNU website."
msgstr ""

#: ../../content/index.rst:33
msgid "Terms and Conditions Rother OSS: Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"COPYING\"."
msgstr ""

#: ../../content/index.rst:40
msgid "Published by: Rother OSS GmbH, (https://otobo.de), Oberwalting 31, 94339 Leiblfing, Germany."
msgstr ""

#: ../../content/index.rst:43
msgid "Authors: OTRS AG (original version), Rother OSS GmbH (https://otobo.de)."
msgstr ""

